
f103-neurosky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007b54  08007b54  00017b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007c2c  08007c2c  00017c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007c30  08007c30  00017c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000248  20000000  08007c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001ac0  20000248  08007e7c  00020248  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001d08  08007e7c  00021d08  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d3de  00000000  00000000  00020271  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000039e5  00000000  00000000  0003d64f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001198  00000000  00000000  00041038  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001040  00000000  00000000  000421d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008d7d  00000000  00000000  00043210  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004d59  00000000  00000000  0004bf8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00050ce6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004ba0  00000000  00000000  00050d64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000248 	.word	0x20000248
 8000128:	00000000 	.word	0x00000000
 800012c:	08007b3c 	.word	0x08007b3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000024c 	.word	0x2000024c
 8000148:	08007b3c 	.word	0x08007b3c

0800014c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a1f      	ldr	r2, [pc, #124]	; (80001d4 <HAL_UART_RxCpltCallback+0x88>)
 8000158:	4293      	cmp	r3, r2
 800015a:	d119      	bne.n	8000190 <HAL_UART_RxCpltCallback+0x44>
	{
		if (isDataRead1 == 0)
 800015c:	4b1e      	ldr	r3, [pc, #120]	; (80001d8 <HAL_UART_RxCpltCallback+0x8c>)
 800015e:	781b      	ldrb	r3, [r3, #0]
 8000160:	2b00      	cmp	r3, #0
 8000162:	d132      	bne.n	80001ca <HAL_UART_RxCpltCallback+0x7e>
		{
			for(int i = 0; i < BUFF_SIZE; i++)
 8000164:	2300      	movs	r3, #0
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	e00b      	b.n	8000182 <HAL_UART_RxCpltCallback+0x36>
			{
				pBuff1[i] = pData1[i];
 800016a:	4a1c      	ldr	r2, [pc, #112]	; (80001dc <HAL_UART_RxCpltCallback+0x90>)
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a1b      	ldr	r2, [pc, #108]	; (80001e0 <HAL_UART_RxCpltCallback+0x94>)
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < BUFF_SIZE; i++)
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	3301      	adds	r3, #1
 8000180:	60fb      	str	r3, [r7, #12]
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	2bff      	cmp	r3, #255	; 0xff
 8000186:	ddf0      	ble.n	800016a <HAL_UART_RxCpltCallback+0x1e>
			}

			isDataRead1 = 1;
 8000188:	4b13      	ldr	r3, [pc, #76]	; (80001d8 <HAL_UART_RxCpltCallback+0x8c>)
 800018a:	2201      	movs	r2, #1
 800018c:	701a      	strb	r2, [r3, #0]
			}

			isDataRead2 = 1;
		}
	}
}
 800018e:	e01c      	b.n	80001ca <HAL_UART_RxCpltCallback+0x7e>
	}else if(huart == &huart3)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4a14      	ldr	r2, [pc, #80]	; (80001e4 <HAL_UART_RxCpltCallback+0x98>)
 8000194:	4293      	cmp	r3, r2
 8000196:	d118      	bne.n	80001ca <HAL_UART_RxCpltCallback+0x7e>
		if (isDataRead2 == 0)
 8000198:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <HAL_UART_RxCpltCallback+0x9c>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d114      	bne.n	80001ca <HAL_UART_RxCpltCallback+0x7e>
			for(int i = 0; i < BUFF_SIZE; i++)
 80001a0:	2300      	movs	r3, #0
 80001a2:	60bb      	str	r3, [r7, #8]
 80001a4:	e00b      	b.n	80001be <HAL_UART_RxCpltCallback+0x72>
				pBuff2[i] = pData2[i];
 80001a6:	4a11      	ldr	r2, [pc, #68]	; (80001ec <HAL_UART_RxCpltCallback+0xa0>)
 80001a8:	68bb      	ldr	r3, [r7, #8]
 80001aa:	4413      	add	r3, r2
 80001ac:	7819      	ldrb	r1, [r3, #0]
 80001ae:	4a10      	ldr	r2, [pc, #64]	; (80001f0 <HAL_UART_RxCpltCallback+0xa4>)
 80001b0:	68bb      	ldr	r3, [r7, #8]
 80001b2:	4413      	add	r3, r2
 80001b4:	460a      	mov	r2, r1
 80001b6:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < BUFF_SIZE; i++)
 80001b8:	68bb      	ldr	r3, [r7, #8]
 80001ba:	3301      	adds	r3, #1
 80001bc:	60bb      	str	r3, [r7, #8]
 80001be:	68bb      	ldr	r3, [r7, #8]
 80001c0:	2bff      	cmp	r3, #255	; 0xff
 80001c2:	ddf0      	ble.n	80001a6 <HAL_UART_RxCpltCallback+0x5a>
			isDataRead2 = 1;
 80001c4:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <HAL_UART_RxCpltCallback+0x9c>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	701a      	strb	r2, [r3, #0]
}
 80001ca:	bf00      	nop
 80001cc:	3714      	adds	r7, #20
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	20000c6c 	.word	0x20000c6c
 80001d8:	2000026c 	.word	0x2000026c
 80001dc:	200005e4 	.word	0x200005e4
 80001e0:	2000092c 	.word	0x2000092c
 80001e4:	20000728 	.word	0x20000728
 80001e8:	20000271 	.word	0x20000271
 80001ec:	20000b6c 	.word	0x20000b6c
 80001f0:	200004a0 	.word	0x200004a0

080001f4 <ReadOneByteFromBuff1>:


uint8_t ReadOneByteFromBuff1()
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
	uint8_t retVal = pBuff1[buffCnt1];
 80001fa:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <ReadOneByteFromBuff1+0x40>)
 80001fc:	881b      	ldrh	r3, [r3, #0]
 80001fe:	461a      	mov	r2, r3
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <ReadOneByteFromBuff1+0x44>)
 8000202:	5c9b      	ldrb	r3, [r3, r2]
 8000204:	71fb      	strb	r3, [r7, #7]
	buffCnt1++;
 8000206:	4b0b      	ldr	r3, [pc, #44]	; (8000234 <ReadOneByteFromBuff1+0x40>)
 8000208:	881b      	ldrh	r3, [r3, #0]
 800020a:	3301      	adds	r3, #1
 800020c:	b29a      	uxth	r2, r3
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <ReadOneByteFromBuff1+0x40>)
 8000210:	801a      	strh	r2, [r3, #0]
	if(buffCnt1 == PAYLOAD_LEN)
 8000212:	4b08      	ldr	r3, [pc, #32]	; (8000234 <ReadOneByteFromBuff1+0x40>)
 8000214:	881b      	ldrh	r3, [r3, #0]
 8000216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800021a:	d105      	bne.n	8000228 <ReadOneByteFromBuff1+0x34>
	{
		//HAL_UART_Receive_DMA(&huart4, pData1, BUFF_SIZE);
		buffCnt1 = 0;
 800021c:	4b05      	ldr	r3, [pc, #20]	; (8000234 <ReadOneByteFromBuff1+0x40>)
 800021e:	2200      	movs	r2, #0
 8000220:	801a      	strh	r2, [r3, #0]
		isDataRead1 = 0;
 8000222:	4b06      	ldr	r3, [pc, #24]	; (800023c <ReadOneByteFromBuff1+0x48>)
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
	}
	return retVal;
 8000228:	79fb      	ldrb	r3, [r7, #7]
}
 800022a:	4618      	mov	r0, r3
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	20000264 	.word	0x20000264
 8000238:	2000092c 	.word	0x2000092c
 800023c:	2000026c 	.word	0x2000026c

08000240 <ReadOneByteFromBuff2>:

uint8_t ReadOneByteFromBuff2()
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
	uint8_t retVal = pBuff2[buffCnt2];
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <ReadOneByteFromBuff2+0x40>)
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	461a      	mov	r2, r3
 800024c:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <ReadOneByteFromBuff2+0x44>)
 800024e:	5c9b      	ldrb	r3, [r3, r2]
 8000250:	71fb      	strb	r3, [r7, #7]
	buffCnt2++;
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <ReadOneByteFromBuff2+0x40>)
 8000254:	881b      	ldrh	r3, [r3, #0]
 8000256:	3301      	adds	r3, #1
 8000258:	b29a      	uxth	r2, r3
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <ReadOneByteFromBuff2+0x40>)
 800025c:	801a      	strh	r2, [r3, #0]
	if(buffCnt2 == PAYLOAD_LEN)
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <ReadOneByteFromBuff2+0x40>)
 8000260:	881b      	ldrh	r3, [r3, #0]
 8000262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000266:	d105      	bne.n	8000274 <ReadOneByteFromBuff2+0x34>
	{
		//HAL_UART_Receive_DMA(&huart5, pData2, BUFF_SIZE);
		buffCnt2 = 0;
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <ReadOneByteFromBuff2+0x40>)
 800026a:	2200      	movs	r2, #0
 800026c:	801a      	strh	r2, [r3, #0]
		isDataRead2 = 0;
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <ReadOneByteFromBuff2+0x48>)
 8000270:	2200      	movs	r2, #0
 8000272:	701a      	strb	r2, [r3, #0]
	}
	return retVal;
 8000274:	79fb      	ldrb	r3, [r7, #7]
}
 8000276:	4618      	mov	r0, r3
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	20000266 	.word	0x20000266
 8000284:	200004a0 	.word	0x200004a0
 8000288:	20000271 	.word	0x20000271

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b090      	sub	sp, #64	; 0x40
 8000290:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000292:	f000 ff15 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000296:	f000 faaf 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029a:	f000 fc33 	bl	8000b04 <MX_GPIO_Init>
  MX_DMA_Init();
 800029e:	f000 fc0b 	bl	8000ab8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80002a2:	f006 fb0d 	bl	80068c0 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 80002a6:	f000 fbdd 	bl	8000a64 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80002aa:	f000 fbb1 	bl	8000a10 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80002ae:	f000 fb55 	bl	800095c <MX_TIM3_Init>
  MX_TIM2_Init();
 80002b2:	f000 fafb 	bl	80008ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, pData1, BUFF_SIZE);
 80002b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002ba:	4996      	ldr	r1, [pc, #600]	; (8000514 <main+0x288>)
 80002bc:	4896      	ldr	r0, [pc, #600]	; (8000518 <main+0x28c>)
 80002be:	f003 fc53 	bl	8003b68 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart3, pData2, BUFF_SIZE);
 80002c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002c6:	4995      	ldr	r1, [pc, #596]	; (800051c <main+0x290>)
 80002c8:	4895      	ldr	r0, [pc, #596]	; (8000520 <main+0x294>)
 80002ca:	f003 fc4d 	bl	8003b68 <HAL_UART_Receive_DMA>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80002ce:	2104      	movs	r1, #4
 80002d0:	4894      	ldr	r0, [pc, #592]	; (8000524 <main+0x298>)
 80002d2:	f003 f8a1 	bl	8003418 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80002d6:	2104      	movs	r1, #4
 80002d8:	4893      	ldr	r0, [pc, #588]	; (8000528 <main+0x29c>)
 80002da:	f003 f89d 	bl	8003418 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80002de:	4b91      	ldr	r3, [pc, #580]	; (8000524 <main+0x298>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	3334      	adds	r3, #52	; 0x34
 80002e4:	3304      	adds	r3, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80002ea:	4b8f      	ldr	r3, [pc, #572]	; (8000528 <main+0x29c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	3334      	adds	r3, #52	; 0x34
 80002f0:	3304      	adds	r3, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
		  llen = sprintf(tt, "#|2|%u|%u|%u|\n\r", poorQuality2, attention2, meditation2);
		  CDC_Transmit_FS((uint8_t *)tt, llen);
		  HAL_Delay(1000);
	  }*/

	  while(isDataRead1 == 0 && isDataRead2 == 0);
 80002f6:	bf00      	nop
 80002f8:	4b8c      	ldr	r3, [pc, #560]	; (800052c <main+0x2a0>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d103      	bne.n	8000308 <main+0x7c>
 8000300:	4b8b      	ldr	r3, [pc, #556]	; (8000530 <main+0x2a4>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d0f7      	beq.n	80002f8 <main+0x6c>

	  if(isDataRead1 == 1)
 8000308:	4b88      	ldr	r3, [pc, #544]	; (800052c <main+0x2a0>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b01      	cmp	r3, #1
 800030e:	f040 8138 	bne.w	8000582 <main+0x2f6>
	  {
		  if(ReadOneByteFromBuff1() == 170)
 8000312:	f7ff ff6f 	bl	80001f4 <ReadOneByteFromBuff1>
 8000316:	4603      	mov	r3, r0
 8000318:	2baa      	cmp	r3, #170	; 0xaa
 800031a:	f040 8132 	bne.w	8000582 <main+0x2f6>
		  {
			  if(ReadOneByteFromBuff1() == 170)
 800031e:	f7ff ff69 	bl	80001f4 <ReadOneByteFromBuff1>
 8000322:	4603      	mov	r3, r0
 8000324:	2baa      	cmp	r3, #170	; 0xaa
 8000326:	f040 812c 	bne.w	8000582 <main+0x2f6>
			  {
				  uint8_t payLen = ReadOneByteFromBuff1();
 800032a:	f7ff ff63 	bl	80001f4 <ReadOneByteFromBuff1>
 800032e:	4603      	mov	r3, r0
 8000330:	713b      	strb	r3, [r7, #4]
				  uint8_t mCheckSum = 0, genCheckSum = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	70fb      	strb	r3, [r7, #3]
 8000336:	2300      	movs	r3, #0
 8000338:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				  if(payLen > 169)
 800033c:	793b      	ldrb	r3, [r7, #4]
 800033e:	2ba9      	cmp	r3, #169	; 0xa9
 8000340:	f200 8231 	bhi.w	80007a6 <main+0x51a>
					  break;

				  for(int i = 0; i < payLen; i++)
 8000344:	2300      	movs	r3, #0
 8000346:	633b      	str	r3, [r7, #48]	; 0x30
 8000348:	e014      	b.n	8000374 <main+0xe8>
				  {
					  payloadData1[i] = ReadOneByteFromBuff1();
 800034a:	f7ff ff53 	bl	80001f4 <ReadOneByteFromBuff1>
 800034e:	4603      	mov	r3, r0
 8000350:	4619      	mov	r1, r3
 8000352:	4a78      	ldr	r2, [pc, #480]	; (8000534 <main+0x2a8>)
 8000354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000356:	4413      	add	r3, r2
 8000358:	460a      	mov	r2, r1
 800035a:	701a      	strb	r2, [r3, #0]
					  genCheckSum += payloadData1[i];
 800035c:	4a75      	ldr	r2, [pc, #468]	; (8000534 <main+0x2a8>)
 800035e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000360:	4413      	add	r3, r2
 8000362:	781a      	ldrb	r2, [r3, #0]
 8000364:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000368:	4413      	add	r3, r2
 800036a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				  for(int i = 0; i < payLen; i++)
 800036e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000370:	3301      	adds	r3, #1
 8000372:	633b      	str	r3, [r7, #48]	; 0x30
 8000374:	793a      	ldrb	r2, [r7, #4]
 8000376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000378:	429a      	cmp	r2, r3
 800037a:	dce6      	bgt.n	800034a <main+0xbe>
				  }

				  mCheckSum = ReadOneByteFromBuff1();
 800037c:	f7ff ff3a 	bl	80001f4 <ReadOneByteFromBuff1>
 8000380:	4603      	mov	r3, r0
 8000382:	70fb      	strb	r3, [r7, #3]
				  genCheckSum = 255 - genCheckSum;
 8000384:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000388:	43db      	mvns	r3, r3
 800038a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				  if(mCheckSum == genCheckSum)
 800038e:	78fa      	ldrb	r2, [r7, #3]
 8000390:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000394:	429a      	cmp	r2, r3
 8000396:	f040 80f4 	bne.w	8000582 <main+0x2f6>
				  {
					  poorQuality1 = 200;
 800039a:	4b67      	ldr	r3, [pc, #412]	; (8000538 <main+0x2ac>)
 800039c:	22c8      	movs	r2, #200	; 0xc8
 800039e:	701a      	strb	r2, [r3, #0]
					  attention1 = 0;
 80003a0:	4b66      	ldr	r3, [pc, #408]	; (800053c <main+0x2b0>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]
					  meditation1 = 0;
 80003a6:	4b66      	ldr	r3, [pc, #408]	; (8000540 <main+0x2b4>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]
					  bigPacket1 = 0;
 80003ac:	4b65      	ldr	r3, [pc, #404]	; (8000544 <main+0x2b8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]

					  for(int i = 0; i < payLen; i++)
 80003b2:	2300      	movs	r3, #0
 80003b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003b6:	e043      	b.n	8000440 <main+0x1b4>
					  {
						  switch(payloadData1[i])
 80003b8:	4a5e      	ldr	r2, [pc, #376]	; (8000534 <main+0x2a8>)
 80003ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003bc:	4413      	add	r3, r2
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b04      	cmp	r3, #4
 80003c2:	d01e      	beq.n	8000402 <main+0x176>
 80003c4:	2b04      	cmp	r3, #4
 80003c6:	dc04      	bgt.n	80003d2 <main+0x146>
 80003c8:	2b02      	cmp	r3, #2
 80003ca:	d009      	beq.n	80003e0 <main+0x154>
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	d014      	beq.n	80003fa <main+0x16e>
							  break;
						  case 0x83:
							  i = i + 25;
							  break;
						  default:
							  break;
 80003d0:	e033      	b.n	800043a <main+0x1ae>
						  switch(payloadData1[i])
 80003d2:	2b80      	cmp	r3, #128	; 0x80
 80003d4:	d029      	beq.n	800042a <main+0x19e>
 80003d6:	2b83      	cmp	r3, #131	; 0x83
 80003d8:	d02b      	beq.n	8000432 <main+0x1a6>
 80003da:	2b05      	cmp	r3, #5
 80003dc:	d01b      	beq.n	8000416 <main+0x18a>
							  break;
 80003de:	e02c      	b.n	800043a <main+0x1ae>
							  i++;
 80003e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003e2:	3301      	adds	r3, #1
 80003e4:	62fb      	str	r3, [r7, #44]	; 0x2c
							  poorQuality1 = payloadData1[i];
 80003e6:	4a53      	ldr	r2, [pc, #332]	; (8000534 <main+0x2a8>)
 80003e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003ea:	4413      	add	r3, r2
 80003ec:	781a      	ldrb	r2, [r3, #0]
 80003ee:	4b52      	ldr	r3, [pc, #328]	; (8000538 <main+0x2ac>)
 80003f0:	701a      	strb	r2, [r3, #0]
							  bigPacket1 = 1;
 80003f2:	4b54      	ldr	r3, [pc, #336]	; (8000544 <main+0x2b8>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
							  break;
 80003f8:	e01f      	b.n	800043a <main+0x1ae>
							  i++;
 80003fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003fc:	3301      	adds	r3, #1
 80003fe:	62fb      	str	r3, [r7, #44]	; 0x2c
							  break;
 8000400:	e01b      	b.n	800043a <main+0x1ae>
							  i++;
 8000402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000404:	3301      	adds	r3, #1
 8000406:	62fb      	str	r3, [r7, #44]	; 0x2c
							  attention1 = payloadData1[i];
 8000408:	4a4a      	ldr	r2, [pc, #296]	; (8000534 <main+0x2a8>)
 800040a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800040c:	4413      	add	r3, r2
 800040e:	781a      	ldrb	r2, [r3, #0]
 8000410:	4b4a      	ldr	r3, [pc, #296]	; (800053c <main+0x2b0>)
 8000412:	701a      	strb	r2, [r3, #0]
							  break;
 8000414:	e011      	b.n	800043a <main+0x1ae>
							  i++;
 8000416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000418:	3301      	adds	r3, #1
 800041a:	62fb      	str	r3, [r7, #44]	; 0x2c
							  meditation1 = payloadData1[i];
 800041c:	4a45      	ldr	r2, [pc, #276]	; (8000534 <main+0x2a8>)
 800041e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000420:	4413      	add	r3, r2
 8000422:	781a      	ldrb	r2, [r3, #0]
 8000424:	4b46      	ldr	r3, [pc, #280]	; (8000540 <main+0x2b4>)
 8000426:	701a      	strb	r2, [r3, #0]
							  break;
 8000428:	e007      	b.n	800043a <main+0x1ae>
							  i = i + 23;
 800042a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800042c:	3317      	adds	r3, #23
 800042e:	62fb      	str	r3, [r7, #44]	; 0x2c
							  break;
 8000430:	e003      	b.n	800043a <main+0x1ae>
							  i = i + 25;
 8000432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000434:	3319      	adds	r3, #25
 8000436:	62fb      	str	r3, [r7, #44]	; 0x2c
							  break;
 8000438:	bf00      	nop
					  for(int i = 0; i < payLen; i++)
 800043a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800043c:	3301      	adds	r3, #1
 800043e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000440:	793a      	ldrb	r2, [r7, #4]
 8000442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000444:	429a      	cmp	r2, r3
 8000446:	dcb7      	bgt.n	80003b8 <main+0x12c>
						  }
					  }

					  if(bigPacket1 == 1)
 8000448:	4b3e      	ldr	r3, [pc, #248]	; (8000544 <main+0x2b8>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b01      	cmp	r3, #1
 800044e:	f040 8098 	bne.w	8000582 <main+0x2f6>
					  {
						  //isDataRead = 0;
						  //llen = sprintf(tt, "1 Poor: %u, Att: %u, Med: %u\n\r", poorQuality1, attention1, meditation1);
						  llen = sprintf(tt, "#|1|%u|%u|%u|\n\r", poorQuality1, attention1, meditation1);
 8000452:	4b39      	ldr	r3, [pc, #228]	; (8000538 <main+0x2ac>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	461a      	mov	r2, r3
 8000458:	4b38      	ldr	r3, [pc, #224]	; (800053c <main+0x2b0>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	4619      	mov	r1, r3
 800045e:	4b38      	ldr	r3, [pc, #224]	; (8000540 <main+0x2b4>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	460b      	mov	r3, r1
 8000466:	4938      	ldr	r1, [pc, #224]	; (8000548 <main+0x2bc>)
 8000468:	4838      	ldr	r0, [pc, #224]	; (800054c <main+0x2c0>)
 800046a:	f006 ff2d 	bl	80072c8 <siprintf>
 800046e:	4603      	mov	r3, r0
 8000470:	b2da      	uxtb	r2, r3
 8000472:	4b37      	ldr	r3, [pc, #220]	; (8000550 <main+0x2c4>)
 8000474:	701a      	strb	r2, [r3, #0]
						  CDC_Transmit_FS((uint8_t *)tt, llen);
 8000476:	4b36      	ldr	r3, [pc, #216]	; (8000550 <main+0x2c4>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	b29b      	uxth	r3, r3
 800047c:	4619      	mov	r1, r3
 800047e:	4833      	ldr	r0, [pc, #204]	; (800054c <main+0x2c0>)
 8000480:	f006 fac8 	bl	8006a14 <CDC_Transmit_FS>

						  if(poorQuality1 == 0)
 8000484:	4b2c      	ldr	r3, [pc, #176]	; (8000538 <main+0x2ac>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d139      	bne.n	8000500 <main+0x274>
						  {
							  uint8_t max_lvl = attention1 / 10;
 800048c:	4b2b      	ldr	r3, [pc, #172]	; (800053c <main+0x2b0>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	4a30      	ldr	r2, [pc, #192]	; (8000554 <main+0x2c8>)
 8000492:	fba2 2303 	umull	r2, r3, r2, r3
 8000496:	08db      	lsrs	r3, r3, #3
 8000498:	70bb      	strb	r3, [r7, #2]
							  max_lvl = max_lvl > 10 ? 10 : max_lvl;
 800049a:	78bb      	ldrb	r3, [r7, #2]
 800049c:	2b0a      	cmp	r3, #10
 800049e:	bf28      	it	cs
 80004a0:	230a      	movcs	r3, #10
 80004a2:	70bb      	strb	r3, [r7, #2]
							  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_lvl[max_lvl]);
 80004a4:	4b1f      	ldr	r3, [pc, #124]	; (8000524 <main+0x298>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	3334      	adds	r3, #52	; 0x34
 80004aa:	3304      	adds	r3, #4
 80004ac:	78ba      	ldrb	r2, [r7, #2]
 80004ae:	492a      	ldr	r1, [pc, #168]	; (8000558 <main+0x2cc>)
 80004b0:	5c8a      	ldrb	r2, [r1, r2]
 80004b2:	601a      	str	r2, [r3, #0]

							  for(int i = 0; i < max_lvl; i++)
 80004b4:	2300      	movs	r3, #0
 80004b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80004b8:	e00b      	b.n	80004d2 <main+0x246>
							  {
								  LED_PORT1_NAMES[i]->BSRR = LED_PINS_1[i];
 80004ba:	4a28      	ldr	r2, [pc, #160]	; (800055c <main+0x2d0>)
 80004bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c2:	4927      	ldr	r1, [pc, #156]	; (8000560 <main+0x2d4>)
 80004c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004c6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80004ca:	611a      	str	r2, [r3, #16]
							  for(int i = 0; i < max_lvl; i++)
 80004cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004ce:	3301      	adds	r3, #1
 80004d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80004d2:	78ba      	ldrb	r2, [r7, #2]
 80004d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004d6:	429a      	cmp	r2, r3
 80004d8:	dcef      	bgt.n	80004ba <main+0x22e>
							  }

							  for(int i = max_lvl; i < LED_COUNT; i++)
 80004da:	78bb      	ldrb	r3, [r7, #2]
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
 80004de:	e00b      	b.n	80004f8 <main+0x26c>
							  {
								  LED_PORT1_NAMES[i]->BRR = LED_PINS_1[i];
 80004e0:	4a1e      	ldr	r2, [pc, #120]	; (800055c <main+0x2d0>)
 80004e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004e8:	491d      	ldr	r1, [pc, #116]	; (8000560 <main+0x2d4>)
 80004ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004ec:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80004f0:	615a      	str	r2, [r3, #20]
							  for(int i = max_lvl; i < LED_COUNT; i++)
 80004f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f4:	3301      	adds	r3, #1
 80004f6:	627b      	str	r3, [r7, #36]	; 0x24
 80004f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004fa:	2b09      	cmp	r3, #9
 80004fc:	ddf0      	ble.n	80004e0 <main+0x254>
 80004fe:	e040      	b.n	8000582 <main+0x2f6>
							  }

						  }else
						  {
							  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <main+0x298>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	3334      	adds	r3, #52	; 0x34
 8000506:	3304      	adds	r3, #4
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]

							  for(int i = 0; i < LED_COUNT; i++)
 800050c:	2300      	movs	r3, #0
 800050e:	623b      	str	r3, [r7, #32]
 8000510:	e034      	b.n	800057c <main+0x2f0>
 8000512:	bf00      	nop
 8000514:	200005e4 	.word	0x200005e4
 8000518:	20000c6c 	.word	0x20000c6c
 800051c:	20000b6c 	.word	0x20000b6c
 8000520:	20000728 	.word	0x20000728
 8000524:	20000b2c 	.word	0x20000b2c
 8000528:	20000868 	.word	0x20000868
 800052c:	2000026c 	.word	0x2000026c
 8000530:	20000271 	.word	0x20000271
 8000534:	20000a2c 	.word	0x20000a2c
 8000538:	20000268 	.word	0x20000268
 800053c:	20000269 	.word	0x20000269
 8000540:	2000026a 	.word	0x2000026a
 8000544:	2000026b 	.word	0x2000026b
 8000548:	08007b54 	.word	0x08007b54
 800054c:	200008ac 	.word	0x200008ac
 8000550:	200008a8 	.word	0x200008a8
 8000554:	cccccccd 	.word	0xcccccccd
 8000558:	20000078 	.word	0x20000078
 800055c:	2000003c 	.word	0x2000003c
 8000560:	20000064 	.word	0x20000064
							  {
								  LED_PORT1_NAMES[i]->BRR = LED_PINS_1[i];
 8000564:	4a94      	ldr	r2, [pc, #592]	; (80007b8 <main+0x52c>)
 8000566:	6a3b      	ldr	r3, [r7, #32]
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	4993      	ldr	r1, [pc, #588]	; (80007bc <main+0x530>)
 800056e:	6a3a      	ldr	r2, [r7, #32]
 8000570:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000574:	615a      	str	r2, [r3, #20]
							  for(int i = 0; i < LED_COUNT; i++)
 8000576:	6a3b      	ldr	r3, [r7, #32]
 8000578:	3301      	adds	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
 800057c:	6a3b      	ldr	r3, [r7, #32]
 800057e:	2b09      	cmp	r3, #9
 8000580:	ddf0      	ble.n	8000564 <main+0x2d8>
			  }
		  }

	  }

	  if(isDataRead2 == 1)
 8000582:	4b8f      	ldr	r3, [pc, #572]	; (80007c0 <main+0x534>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b01      	cmp	r3, #1
 8000588:	f47f aeb5 	bne.w	80002f6 <main+0x6a>
	  {
		  if(ReadOneByteFromBuff2() == 170)
 800058c:	f7ff fe58 	bl	8000240 <ReadOneByteFromBuff2>
 8000590:	4603      	mov	r3, r0
 8000592:	2baa      	cmp	r3, #170	; 0xaa
 8000594:	f47f aeaf 	bne.w	80002f6 <main+0x6a>
		  {
			  if(ReadOneByteFromBuff2() == 170)
 8000598:	f7ff fe52 	bl	8000240 <ReadOneByteFromBuff2>
 800059c:	4603      	mov	r3, r0
 800059e:	2baa      	cmp	r3, #170	; 0xaa
 80005a0:	f47f aea9 	bne.w	80002f6 <main+0x6a>
			  {
				  uint8_t payLen = ReadOneByteFromBuff2();
 80005a4:	f7ff fe4c 	bl	8000240 <ReadOneByteFromBuff2>
 80005a8:	4603      	mov	r3, r0
 80005aa:	71fb      	strb	r3, [r7, #7]
				  uint8_t mCheckSum = 0, genCheckSum = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	71bb      	strb	r3, [r7, #6]
 80005b0:	2300      	movs	r3, #0
 80005b2:	77fb      	strb	r3, [r7, #31]
				  if(payLen > 169)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	2ba9      	cmp	r3, #169	; 0xa9
 80005b8:	f200 80f7 	bhi.w	80007aa <main+0x51e>
					  break;

				  for(int i = 0; i < payLen; i++)
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
 80005c0:	e012      	b.n	80005e8 <main+0x35c>
				  {
					  payloadData2[i] = ReadOneByteFromBuff2();
 80005c2:	f7ff fe3d 	bl	8000240 <ReadOneByteFromBuff2>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4619      	mov	r1, r3
 80005ca:	4a7e      	ldr	r2, [pc, #504]	; (80007c4 <main+0x538>)
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	4413      	add	r3, r2
 80005d0:	460a      	mov	r2, r1
 80005d2:	701a      	strb	r2, [r3, #0]
					  genCheckSum += payloadData2[i];
 80005d4:	4a7b      	ldr	r2, [pc, #492]	; (80007c4 <main+0x538>)
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	4413      	add	r3, r2
 80005da:	781a      	ldrb	r2, [r3, #0]
 80005dc:	7ffb      	ldrb	r3, [r7, #31]
 80005de:	4413      	add	r3, r2
 80005e0:	77fb      	strb	r3, [r7, #31]
				  for(int i = 0; i < payLen; i++)
 80005e2:	69bb      	ldr	r3, [r7, #24]
 80005e4:	3301      	adds	r3, #1
 80005e6:	61bb      	str	r3, [r7, #24]
 80005e8:	79fa      	ldrb	r2, [r7, #7]
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dce8      	bgt.n	80005c2 <main+0x336>
				  }

				  mCheckSum = ReadOneByteFromBuff2();
 80005f0:	f7ff fe26 	bl	8000240 <ReadOneByteFromBuff2>
 80005f4:	4603      	mov	r3, r0
 80005f6:	71bb      	strb	r3, [r7, #6]
				  genCheckSum = 255 - genCheckSum;
 80005f8:	7ffb      	ldrb	r3, [r7, #31]
 80005fa:	43db      	mvns	r3, r3
 80005fc:	77fb      	strb	r3, [r7, #31]

				  if(mCheckSum == genCheckSum)
 80005fe:	79ba      	ldrb	r2, [r7, #6]
 8000600:	7ffb      	ldrb	r3, [r7, #31]
 8000602:	429a      	cmp	r2, r3
 8000604:	f47f ae77 	bne.w	80002f6 <main+0x6a>
				  {
					  poorQuality2 = 200;
 8000608:	4b6f      	ldr	r3, [pc, #444]	; (80007c8 <main+0x53c>)
 800060a:	22c8      	movs	r2, #200	; 0xc8
 800060c:	701a      	strb	r2, [r3, #0]
					  attention2 = 0;
 800060e:	4b6f      	ldr	r3, [pc, #444]	; (80007cc <main+0x540>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
					  meditation2 = 0;
 8000614:	4b6e      	ldr	r3, [pc, #440]	; (80007d0 <main+0x544>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
					  bigPacket2 = 0;
 800061a:	4b6e      	ldr	r3, [pc, #440]	; (80007d4 <main+0x548>)
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]

					  for(int i = 0; i < payLen; i++)
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	e043      	b.n	80006ae <main+0x422>
					  {
						  switch(payloadData2[i])
 8000626:	4a67      	ldr	r2, [pc, #412]	; (80007c4 <main+0x538>)
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	4413      	add	r3, r2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b04      	cmp	r3, #4
 8000630:	d01e      	beq.n	8000670 <main+0x3e4>
 8000632:	2b04      	cmp	r3, #4
 8000634:	dc04      	bgt.n	8000640 <main+0x3b4>
 8000636:	2b02      	cmp	r3, #2
 8000638:	d009      	beq.n	800064e <main+0x3c2>
 800063a:	2b03      	cmp	r3, #3
 800063c:	d014      	beq.n	8000668 <main+0x3dc>
							  break;
						  case 0x83:
							  i = i + 25;
							  break;
						  default:
							  break;
 800063e:	e033      	b.n	80006a8 <main+0x41c>
						  switch(payloadData2[i])
 8000640:	2b80      	cmp	r3, #128	; 0x80
 8000642:	d029      	beq.n	8000698 <main+0x40c>
 8000644:	2b83      	cmp	r3, #131	; 0x83
 8000646:	d02b      	beq.n	80006a0 <main+0x414>
 8000648:	2b05      	cmp	r3, #5
 800064a:	d01b      	beq.n	8000684 <main+0x3f8>
							  break;
 800064c:	e02c      	b.n	80006a8 <main+0x41c>
							  i++;
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
							  poorQuality2 = payloadData2[i];
 8000654:	4a5b      	ldr	r2, [pc, #364]	; (80007c4 <main+0x538>)
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	4413      	add	r3, r2
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	4b5a      	ldr	r3, [pc, #360]	; (80007c8 <main+0x53c>)
 800065e:	701a      	strb	r2, [r3, #0]
							  bigPacket2 = 1;
 8000660:	4b5c      	ldr	r3, [pc, #368]	; (80007d4 <main+0x548>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
							  break;
 8000666:	e01f      	b.n	80006a8 <main+0x41c>
							  i++;
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	3301      	adds	r3, #1
 800066c:	617b      	str	r3, [r7, #20]
							  break;
 800066e:	e01b      	b.n	80006a8 <main+0x41c>
							  i++;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	3301      	adds	r3, #1
 8000674:	617b      	str	r3, [r7, #20]
							  attention2 = payloadData2[i];
 8000676:	4a53      	ldr	r2, [pc, #332]	; (80007c4 <main+0x538>)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	4413      	add	r3, r2
 800067c:	781a      	ldrb	r2, [r3, #0]
 800067e:	4b53      	ldr	r3, [pc, #332]	; (80007cc <main+0x540>)
 8000680:	701a      	strb	r2, [r3, #0]
							  break;
 8000682:	e011      	b.n	80006a8 <main+0x41c>
							  i++;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	3301      	adds	r3, #1
 8000688:	617b      	str	r3, [r7, #20]
							  meditation2 = payloadData2[i];
 800068a:	4a4e      	ldr	r2, [pc, #312]	; (80007c4 <main+0x538>)
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	4413      	add	r3, r2
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	4b4f      	ldr	r3, [pc, #316]	; (80007d0 <main+0x544>)
 8000694:	701a      	strb	r2, [r3, #0]
							  break;
 8000696:	e007      	b.n	80006a8 <main+0x41c>
							  i = i + 23;
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	3317      	adds	r3, #23
 800069c:	617b      	str	r3, [r7, #20]
							  break;
 800069e:	e003      	b.n	80006a8 <main+0x41c>
							  i = i + 25;
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	3319      	adds	r3, #25
 80006a4:	617b      	str	r3, [r7, #20]
							  break;
 80006a6:	bf00      	nop
					  for(int i = 0; i < payLen; i++)
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	3301      	adds	r3, #1
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	79fa      	ldrb	r2, [r7, #7]
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	dcb7      	bgt.n	8000626 <main+0x39a>
						  }
					  }

					  if(bigPacket2 == 1)
 80006b6:	4b47      	ldr	r3, [pc, #284]	; (80007d4 <main+0x548>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	f47f ae1b 	bne.w	80002f6 <main+0x6a>
					  {
						  //isDataRead = 0;
						  //llen = sprintf(tt, "2 Poor: %u, Att: %u, Med: %u\n\r", poorQuality2, attention2, meditation2);
						  llen = sprintf(tt, "#|2|%u|%u|%u|\n\r", poorQuality2, attention2, meditation2);
 80006c0:	4b41      	ldr	r3, [pc, #260]	; (80007c8 <main+0x53c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b41      	ldr	r3, [pc, #260]	; (80007cc <main+0x540>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	4619      	mov	r1, r3
 80006cc:	4b40      	ldr	r3, [pc, #256]	; (80007d0 <main+0x544>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	460b      	mov	r3, r1
 80006d4:	4940      	ldr	r1, [pc, #256]	; (80007d8 <main+0x54c>)
 80006d6:	4841      	ldr	r0, [pc, #260]	; (80007dc <main+0x550>)
 80006d8:	f006 fdf6 	bl	80072c8 <siprintf>
 80006dc:	4603      	mov	r3, r0
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b3f      	ldr	r3, [pc, #252]	; (80007e0 <main+0x554>)
 80006e2:	701a      	strb	r2, [r3, #0]
						  CDC_Transmit_FS((uint8_t *)tt, llen);
 80006e4:	4b3e      	ldr	r3, [pc, #248]	; (80007e0 <main+0x554>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	4619      	mov	r1, r3
 80006ec:	483b      	ldr	r0, [pc, #236]	; (80007dc <main+0x550>)
 80006ee:	f006 f991 	bl	8006a14 <CDC_Transmit_FS>

						  if(poorQuality2 == 0)
 80006f2:	4b35      	ldr	r3, [pc, #212]	; (80007c8 <main+0x53c>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d139      	bne.n	800076e <main+0x4e2>
						  {
							  uint8_t max_lvl = attention2 / 10;
 80006fa:	4b34      	ldr	r3, [pc, #208]	; (80007cc <main+0x540>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4a39      	ldr	r2, [pc, #228]	; (80007e4 <main+0x558>)
 8000700:	fba2 2303 	umull	r2, r3, r2, r3
 8000704:	08db      	lsrs	r3, r3, #3
 8000706:	717b      	strb	r3, [r7, #5]
							  max_lvl = max_lvl > 10 ? 10 : max_lvl;
 8000708:	797b      	ldrb	r3, [r7, #5]
 800070a:	2b0a      	cmp	r3, #10
 800070c:	bf28      	it	cs
 800070e:	230a      	movcs	r3, #10
 8000710:	717b      	strb	r3, [r7, #5]
							  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_lvl[max_lvl]);
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <main+0x55c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3334      	adds	r3, #52	; 0x34
 8000718:	3304      	adds	r3, #4
 800071a:	797a      	ldrb	r2, [r7, #5]
 800071c:	4933      	ldr	r1, [pc, #204]	; (80007ec <main+0x560>)
 800071e:	5c8a      	ldrb	r2, [r1, r2]
 8000720:	601a      	str	r2, [r3, #0]

							  for(int i = 0; i < max_lvl; i++)
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	e00b      	b.n	8000740 <main+0x4b4>
							  {
								  LED_PORT2_NAMES[i]->BSRR = LED_PINS_2[i];
 8000728:	4a31      	ldr	r2, [pc, #196]	; (80007f0 <main+0x564>)
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000730:	4930      	ldr	r1, [pc, #192]	; (80007f4 <main+0x568>)
 8000732:	693a      	ldr	r2, [r7, #16]
 8000734:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000738:	611a      	str	r2, [r3, #16]
							  for(int i = 0; i < max_lvl; i++)
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	3301      	adds	r3, #1
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	797a      	ldrb	r2, [r7, #5]
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	429a      	cmp	r2, r3
 8000746:	dcef      	bgt.n	8000728 <main+0x49c>
							  }

							  for(int i = max_lvl; i < LED_COUNT; i++)
 8000748:	797b      	ldrb	r3, [r7, #5]
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	e00b      	b.n	8000766 <main+0x4da>
							  {
								  LED_PORT2_NAMES[i]->BRR = LED_PINS_2[i];
 800074e:	4a28      	ldr	r2, [pc, #160]	; (80007f0 <main+0x564>)
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000756:	4927      	ldr	r1, [pc, #156]	; (80007f4 <main+0x568>)
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800075e:	615a      	str	r2, [r3, #20]
							  for(int i = max_lvl; i < LED_COUNT; i++)
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3301      	adds	r3, #1
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2b09      	cmp	r3, #9
 800076a:	ddf0      	ble.n	800074e <main+0x4c2>
 800076c:	e017      	b.n	800079e <main+0x512>
							  }
						  }else{
							  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <main+0x55c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	3334      	adds	r3, #52	; 0x34
 8000774:	3304      	adds	r3, #4
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]

							  for(int i = 0; i < LED_COUNT; i++)
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	e00b      	b.n	8000798 <main+0x50c>
							  {
								  LED_PORT2_NAMES[i]->BRR = LED_PINS_2[i];
 8000780:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <main+0x564>)
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000788:	491a      	ldr	r1, [pc, #104]	; (80007f4 <main+0x568>)
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000790:	615a      	str	r2, [r3, #20]
							  for(int i = 0; i < LED_COUNT; i++)
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	3301      	adds	r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	2b09      	cmp	r3, #9
 800079c:	ddf0      	ble.n	8000780 <main+0x4f4>
							  }
						  }

						  bigPacket2 = 0;
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <main+0x548>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
	  while(isDataRead1 == 0 && isDataRead2 == 0);
 80007a4:	e5a7      	b.n	80002f6 <main+0x6a>
					  break;
 80007a6:	bf00      	nop
 80007a8:	e000      	b.n	80007ac <main+0x520>
					  break;
 80007aa:	bf00      	nop
 80007ac:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3738      	adds	r7, #56	; 0x38
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000003c 	.word	0x2000003c
 80007bc:	20000064 	.word	0x20000064
 80007c0:	20000271 	.word	0x20000271
 80007c4:	20000768 	.word	0x20000768
 80007c8:	2000026d 	.word	0x2000026d
 80007cc:	2000026e 	.word	0x2000026e
 80007d0:	2000026f 	.word	0x2000026f
 80007d4:	20000270 	.word	0x20000270
 80007d8:	08007b64 	.word	0x08007b64
 80007dc:	200008ac 	.word	0x200008ac
 80007e0:	200008a8 	.word	0x200008a8
 80007e4:	cccccccd 	.word	0xcccccccd
 80007e8:	20000868 	.word	0x20000868
 80007ec:	20000078 	.word	0x20000078
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000028 	.word	0x20000028

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b094      	sub	sp, #80	; 0x50
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000802:	2228      	movs	r2, #40	; 0x28
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f006 fd56 	bl	80072b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000828:	2301      	movs	r3, #1
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000836:	2301      	movs	r3, #1
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000842:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000844:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000848:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084e:	4618      	mov	r0, r3
 8000850:	f002 f8de 	bl	8002a10 <HAL_RCC_OscConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800085a:	f000 f9d9 	bl	8000c10 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	230f      	movs	r3, #15
 8000860:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	2302      	movs	r3, #2
 8000864:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800086a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2102      	movs	r1, #2
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fb2c 	bl	8002ed8 <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000886:	f000 f9c3 	bl	8000c10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800088a:	2310      	movs	r3, #16
 800088c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4618      	mov	r0, r3
 8000896:	f002 fcdd 	bl	8003254 <HAL_RCCEx_PeriphCLKConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80008a0:	f000 f9b6 	bl	8000c10 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3750      	adds	r7, #80	; 0x50
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b2:	f107 0320 	add.w	r3, r7, #32
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
 80008ca:	615a      	str	r2, [r3, #20]
 80008cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <MX_TIM2_Init+0xac>)
 80008d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 281;
 80008d6:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_TIM2_Init+0xac>)
 80008d8:	f240 1219 	movw	r2, #281	; 0x119
 80008dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_TIM2_Init+0xac>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80008e4:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_TIM2_Init+0xac>)
 80008e6:	22ff      	movs	r2, #255	; 0xff
 80008e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_TIM2_Init+0xac>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_TIM2_Init+0xac>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008f6:	4818      	ldr	r0, [pc, #96]	; (8000958 <MX_TIM2_Init+0xac>)
 80008f8:	f002 fd62 	bl	80033c0 <HAL_TIM_PWM_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000902:	f000 f985 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800090e:	f107 0320 	add.w	r3, r7, #32
 8000912:	4619      	mov	r1, r3
 8000914:	4810      	ldr	r0, [pc, #64]	; (8000958 <MX_TIM2_Init+0xac>)
 8000916:	f003 f895 	bl	8003a44 <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000920:	f000 f976 	bl	8000c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000924:	2360      	movs	r3, #96	; 0x60
 8000926:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 8000928:	23ff      	movs	r3, #255	; 0xff
 800092a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2204      	movs	r2, #4
 8000938:	4619      	mov	r1, r3
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <MX_TIM2_Init+0xac>)
 800093c:	f002 fd94 	bl	8003468 <HAL_TIM_PWM_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000946:	f000 f963 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800094a:	4803      	ldr	r0, [pc, #12]	; (8000958 <MX_TIM2_Init+0xac>)
 800094c:	f000 f9c8 	bl	8000ce0 <HAL_TIM_MspPostInit>

}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000b2c 	.word	0x20000b2c

0800095c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000962:	f107 0320 	add.w	r3, r7, #32
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800097e:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_TIM3_Init+0xac>)
 8000980:	4a22      	ldr	r2, [pc, #136]	; (8000a0c <MX_TIM3_Init+0xb0>)
 8000982:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 281;
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_TIM3_Init+0xac>)
 8000986:	f240 1219 	movw	r2, #281	; 0x119
 800098a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_TIM3_Init+0xac>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_TIM3_Init+0xac>)
 8000994:	22ff      	movs	r2, #255	; 0xff
 8000996:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_TIM3_Init+0xac>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_TIM3_Init+0xac>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009a4:	4818      	ldr	r0, [pc, #96]	; (8000a08 <MX_TIM3_Init+0xac>)
 80009a6:	f002 fd0b 	bl	80033c0 <HAL_TIM_PWM_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80009b0:	f000 f92e 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009bc:	f107 0320 	add.w	r3, r7, #32
 80009c0:	4619      	mov	r1, r3
 80009c2:	4811      	ldr	r0, [pc, #68]	; (8000a08 <MX_TIM3_Init+0xac>)
 80009c4:	f003 f83e 	bl	8003a44 <HAL_TIMEx_MasterConfigSynchronization>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80009ce:	f000 f91f 	bl	8000c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d2:	2360      	movs	r3, #96	; 0x60
 80009d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 80009d6:	23ff      	movs	r3, #255	; 0xff
 80009d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2204      	movs	r2, #4
 80009e6:	4619      	mov	r1, r3
 80009e8:	4807      	ldr	r0, [pc, #28]	; (8000a08 <MX_TIM3_Init+0xac>)
 80009ea:	f002 fd3d 	bl	8003468 <HAL_TIM_PWM_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80009f4:	f000 f90c 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <MX_TIM3_Init+0xac>)
 80009fa:	f000 f971 	bl	8000ce0 <HAL_TIM_MspPostInit>

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000868 	.word	0x20000868
 8000a0c:	40000400 	.word	0x40000400

08000a10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <MX_USART2_UART_Init+0x50>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a1c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a48:	f003 f840 	bl	8003acc <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a52:	f000 f8dd 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000c6c 	.word	0x20000c6c
 8000a60:	40004400 	.word	0x40004400

08000a64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_USART3_UART_Init+0x50>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a70:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000a74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a9c:	f003 f816 	bl	8003acc <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000aa6:	f000 f8b3 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000728 	.word	0x20000728
 8000ab4:	40004800 	.word	0x40004800

08000ab8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000abe:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <MX_DMA_Init+0x48>)
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_DMA_Init+0x48>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6153      	str	r3, [r2, #20]
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <MX_DMA_Init+0x48>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	200d      	movs	r0, #13
 8000adc:	f000 fc23 	bl	8001326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ae0:	200d      	movs	r0, #13
 8000ae2:	f000 fc3c 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2010      	movs	r0, #16
 8000aec:	f000 fc1b 	bl	8001326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000af0:	2010      	movs	r0, #16
 8000af2:	f000 fc34 	bl	800135e <HAL_NVIC_EnableIRQ>

}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b18:	4a39      	ldr	r2, [pc, #228]	; (8000c00 <MX_GPIO_Init+0xfc>)
 8000b1a:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <MX_GPIO_Init+0xfc>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <MX_GPIO_Init+0xfc>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0310 	and.w	r3, r3, #16
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b30:	4a33      	ldr	r2, [pc, #204]	; (8000c00 <MX_GPIO_Init+0xfc>)
 8000b32:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <MX_GPIO_Init+0xfc>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	f043 0320 	orr.w	r3, r3, #32
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <MX_GPIO_Init+0xfc>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0320 	and.w	r3, r3, #32
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b48:	4a2d      	ldr	r2, [pc, #180]	; (8000c00 <MX_GPIO_Init+0xfc>)
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <MX_GPIO_Init+0xfc>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <MX_GPIO_Init+0xfc>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b60:	4a27      	ldr	r2, [pc, #156]	; (8000c00 <MX_GPIO_Init+0xfc>)
 8000b62:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <MX_GPIO_Init+0xfc>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	f043 0308 	orr.w	r3, r3, #8
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <MX_GPIO_Init+0xfc>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0308 	and.w	r3, r3, #8
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED20_Pin|LED19_Pin|LED18_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000b7e:	4821      	ldr	r0, [pc, #132]	; (8000c04 <MX_GPIO_Init+0x100>)
 8000b80:	f000 ffdc 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED17_Pin|LED16_Pin|LED15_Pin|LED14_Pin 
 8000b84:	2200      	movs	r2, #0
 8000b86:	f248 71f3 	movw	r1, #34803	; 0x87f3
 8000b8a:	481f      	ldr	r0, [pc, #124]	; (8000c08 <MX_GPIO_Init+0x104>)
 8000b8c:	f000 ffd6 	bl	8001b3c <HAL_GPIO_WritePin>
                          |LED13_Pin|LED12_Pin|LED6_Pin|LED5_Pin 
                          |LED4_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED11_Pin|LED10_Pin|LED9_Pin|LED8_Pin 
 8000b90:	2200      	movs	r2, #0
 8000b92:	f24f 3101 	movw	r1, #62209	; 0xf301
 8000b96:	481d      	ldr	r0, [pc, #116]	; (8000c0c <MX_GPIO_Init+0x108>)
 8000b98:	f000 ffd0 	bl	8001b3c <HAL_GPIO_WritePin>
                          |LED7_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED20_Pin LED19_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED20_Pin|LED19_Pin|LED18_Pin;
 8000b9c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ba0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4813      	ldr	r0, [pc, #76]	; (8000c04 <MX_GPIO_Init+0x100>)
 8000bb6:	f000 fe63 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED17_Pin LED16_Pin LED15_Pin LED14_Pin 
                           LED13_Pin LED12_Pin LED6_Pin LED5_Pin 
                           LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED17_Pin|LED16_Pin|LED15_Pin|LED14_Pin 
 8000bba:	f248 73f3 	movw	r3, #34803	; 0x87f3
 8000bbe:	613b      	str	r3, [r7, #16]
                          |LED13_Pin|LED12_Pin|LED6_Pin|LED5_Pin 
                          |LED4_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_GPIO_Init+0x104>)
 8000bd4:	f000 fe54 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED11_Pin LED10_Pin LED9_Pin LED8_Pin 
                           LED7_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED11_Pin|LED10_Pin|LED9_Pin|LED8_Pin 
 8000bd8:	f24f 3301 	movw	r3, #62209	; 0xf301
 8000bdc:	613b      	str	r3, [r7, #16]
                          |LED7_Pin|LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4806      	ldr	r0, [pc, #24]	; (8000c0c <MX_GPIO_Init+0x108>)
 8000bf2:	f000 fe45 	bl	8001880 <HAL_GPIO_Init>

}
 8000bf6:	bf00      	nop
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40011000 	.word	0x40011000
 8000c08:	40010800 	.word	0x40010800
 8000c0c:	40010c00 	.word	0x40010c00

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c22:	4a15      	ldr	r2, [pc, #84]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	61d3      	str	r3, [r2, #28]
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_MspInit+0x60>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_MspInit+0x60>)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010000 	.word	0x40010000

08000c80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c90:	d10c      	bne.n	8000cac <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c92:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <HAL_TIM_PWM_MspInit+0x58>)
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_TIM_PWM_MspInit+0x58>)
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	61d3      	str	r3, [r2, #28]
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_TIM_PWM_MspInit+0x58>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000caa:	e010      	b.n	8000cce <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_TIM_PWM_MspInit+0x5c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d10b      	bne.n	8000cce <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_TIM_PWM_MspInit+0x58>)
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <HAL_TIM_PWM_MspInit+0x58>)
 8000cba:	69db      	ldr	r3, [r3, #28]
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	61d3      	str	r3, [r2, #28]
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_TIM_PWM_MspInit+0x58>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40000400 	.word	0x40000400

08000ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cfe:	d12a      	bne.n	8000d56 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4a2e      	ldr	r2, [pc, #184]	; (8000dbc <HAL_TIM_MspPostInit+0xdc>)
 8000d02:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <HAL_TIM_MspPostInit+0xdc>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <HAL_TIM_MspPostInit+0xdc>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4825      	ldr	r0, [pc, #148]	; (8000dc0 <HAL_TIM_MspPostInit+0xe0>)
 8000d2c:	f000 fda8 	bl	8001880 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000d30:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <HAL_TIM_MspPostInit+0xe4>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d4e:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <HAL_TIM_MspPostInit+0xe4>)
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d54:	e02e      	b.n	8000db4 <HAL_TIM_MspPostInit+0xd4>
  else if(htim->Instance==TIM3)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1b      	ldr	r2, [pc, #108]	; (8000dc8 <HAL_TIM_MspPostInit+0xe8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d129      	bne.n	8000db4 <HAL_TIM_MspPostInit+0xd4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4a16      	ldr	r2, [pc, #88]	; (8000dbc <HAL_TIM_MspPostInit+0xdc>)
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_TIM_MspPostInit+0xdc>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_TIM_MspPostInit+0xdc>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0308 	and.w	r3, r3, #8
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d78:	2320      	movs	r3, #32
 8000d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <HAL_TIM_MspPostInit+0xe0>)
 8000d8c:	f000 fd78 	bl	8001880 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_TIM_MspPostInit+0xe4>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	623b      	str	r3, [r7, #32]
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000d9c:	623b      	str	r3, [r7, #32]
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000da4:	623b      	str	r3, [r7, #32]
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dac:	623b      	str	r3, [r7, #32]
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <HAL_TIM_MspPostInit+0xe4>)
 8000db0:	6a3b      	ldr	r3, [r7, #32]
 8000db2:	6053      	str	r3, [r2, #4]
}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010c00 	.word	0x40010c00
 8000dc4:	40010000 	.word	0x40010000
 8000dc8:	40000400 	.word	0x40000400

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0318 	add.w	r3, r7, #24
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a65      	ldr	r2, [pc, #404]	; (8000f7c <HAL_UART_MspInit+0x1b0>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d15e      	bne.n	8000eaa <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dec:	4a64      	ldr	r2, [pc, #400]	; (8000f80 <HAL_UART_MspInit+0x1b4>)
 8000dee:	4b64      	ldr	r3, [pc, #400]	; (8000f80 <HAL_UART_MspInit+0x1b4>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df6:	61d3      	str	r3, [r2, #28]
 8000df8:	4b61      	ldr	r3, [pc, #388]	; (8000f80 <HAL_UART_MspInit+0x1b4>)
 8000dfa:	69db      	ldr	r3, [r3, #28]
 8000dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	4a5e      	ldr	r2, [pc, #376]	; (8000f80 <HAL_UART_MspInit+0x1b4>)
 8000e06:	4b5e      	ldr	r3, [pc, #376]	; (8000f80 <HAL_UART_MspInit+0x1b4>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b5b      	ldr	r3, [pc, #364]	; (8000f80 <HAL_UART_MspInit+0x1b4>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 0318 	add.w	r3, r7, #24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4855      	ldr	r0, [pc, #340]	; (8000f84 <HAL_UART_MspInit+0x1b8>)
 8000e30:	f000 fd26 	bl	8001880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e34:	2308      	movs	r3, #8
 8000e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0318 	add.w	r3, r7, #24
 8000e44:	4619      	mov	r1, r3
 8000e46:	484f      	ldr	r0, [pc, #316]	; (8000f84 <HAL_UART_MspInit+0x1b8>)
 8000e48:	f000 fd1a 	bl	8001880 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000e4c:	4b4e      	ldr	r3, [pc, #312]	; (8000f88 <HAL_UART_MspInit+0x1bc>)
 8000e4e:	4a4f      	ldr	r2, [pc, #316]	; (8000f8c <HAL_UART_MspInit+0x1c0>)
 8000e50:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e52:	4b4d      	ldr	r3, [pc, #308]	; (8000f88 <HAL_UART_MspInit+0x1bc>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e58:	4b4b      	ldr	r3, [pc, #300]	; (8000f88 <HAL_UART_MspInit+0x1bc>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e5e:	4b4a      	ldr	r3, [pc, #296]	; (8000f88 <HAL_UART_MspInit+0x1bc>)
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e64:	4b48      	ldr	r3, [pc, #288]	; (8000f88 <HAL_UART_MspInit+0x1bc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e6a:	4b47      	ldr	r3, [pc, #284]	; (8000f88 <HAL_UART_MspInit+0x1bc>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000e70:	4b45      	ldr	r3, [pc, #276]	; (8000f88 <HAL_UART_MspInit+0x1bc>)
 8000e72:	2220      	movs	r2, #32
 8000e74:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e76:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <HAL_UART_MspInit+0x1bc>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e7c:	4842      	ldr	r0, [pc, #264]	; (8000f88 <HAL_UART_MspInit+0x1bc>)
 8000e7e:	f000 fa89 	bl	8001394 <HAL_DMA_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000e88:	f7ff fec2 	bl	8000c10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a3e      	ldr	r2, [pc, #248]	; (8000f88 <HAL_UART_MspInit+0x1bc>)
 8000e90:	635a      	str	r2, [r3, #52]	; 0x34
 8000e92:	4a3d      	ldr	r2, [pc, #244]	; (8000f88 <HAL_UART_MspInit+0x1bc>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2026      	movs	r0, #38	; 0x26
 8000e9e:	f000 fa42 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ea2:	2026      	movs	r0, #38	; 0x26
 8000ea4:	f000 fa5b 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ea8:	e064      	b.n	8000f74 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART3)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a38      	ldr	r2, [pc, #224]	; (8000f90 <HAL_UART_MspInit+0x1c4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d15f      	bne.n	8000f74 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eb4:	4a32      	ldr	r2, [pc, #200]	; (8000f80 <HAL_UART_MspInit+0x1b4>)
 8000eb6:	4b32      	ldr	r3, [pc, #200]	; (8000f80 <HAL_UART_MspInit+0x1b4>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ebe:	61d3      	str	r3, [r2, #28]
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <HAL_UART_MspInit+0x1b4>)
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ecc:	4a2c      	ldr	r2, [pc, #176]	; (8000f80 <HAL_UART_MspInit+0x1b4>)
 8000ece:	4b2c      	ldr	r3, [pc, #176]	; (8000f80 <HAL_UART_MspInit+0x1b4>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <HAL_UART_MspInit+0x1b4>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4826      	ldr	r0, [pc, #152]	; (8000f94 <HAL_UART_MspInit+0x1c8>)
 8000efa:	f000 fcc1 	bl	8001880 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000efe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	4619      	mov	r1, r3
 8000f12:	4820      	ldr	r0, [pc, #128]	; (8000f94 <HAL_UART_MspInit+0x1c8>)
 8000f14:	f000 fcb4 	bl	8001880 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <HAL_UART_MspInit+0x1cc>)
 8000f1a:	4a20      	ldr	r2, [pc, #128]	; (8000f9c <HAL_UART_MspInit+0x1d0>)
 8000f1c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <HAL_UART_MspInit+0x1cc>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <HAL_UART_MspInit+0x1cc>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_UART_MspInit+0x1cc>)
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <HAL_UART_MspInit+0x1cc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_UART_MspInit+0x1cc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <HAL_UART_MspInit+0x1cc>)
 8000f3e:	2220      	movs	r2, #32
 8000f40:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_UART_MspInit+0x1cc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f48:	4813      	ldr	r0, [pc, #76]	; (8000f98 <HAL_UART_MspInit+0x1cc>)
 8000f4a:	f000 fa23 	bl	8001394 <HAL_DMA_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8000f54:	f7ff fe5c 	bl	8000c10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <HAL_UART_MspInit+0x1cc>)
 8000f5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_UART_MspInit+0x1cc>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2100      	movs	r1, #0
 8000f68:	2027      	movs	r0, #39	; 0x27
 8000f6a:	f000 f9dc 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f6e:	2027      	movs	r0, #39	; 0x27
 8000f70:	f000 f9f5 	bl	800135e <HAL_NVIC_EnableIRQ>
}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	; 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40004400 	.word	0x40004400
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40010800 	.word	0x40010800
 8000f88:	200005a0 	.word	0x200005a0
 8000f8c:	4002006c 	.word	0x4002006c
 8000f90:	40004800 	.word	0x40004800
 8000f94:	40010c00 	.word	0x40010c00
 8000f98:	200006e4 	.word	0x200006e4
 8000f9c:	40020030 	.word	0x40020030

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <HardFault_Handler+0x4>

08000fb2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <MemManage_Handler+0x4>

08000fb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <BusFault_Handler+0x4>

08000fbe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <UsageFault_Handler+0x4>

08000fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fec:	f000 f8ae 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <DMA1_Channel3_IRQHandler+0x10>)
 8000ffa:	f000 fb01 	bl	8001600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200006e4 	.word	0x200006e4

08001008 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <DMA1_Channel6_IRQHandler+0x10>)
 800100e:	f000 faf7 	bl	8001600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200005a0 	.word	0x200005a0

0800101c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001022:	f000 fea3 	bl	8001d6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200018a4 	.word	0x200018a4

08001030 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <USART2_IRQHandler+0x10>)
 8001036:	f002 fe17 	bl	8003c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000c6c 	.word	0x20000c6c

08001044 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <USART3_IRQHandler+0x10>)
 800104a:	f002 fe0d 	bl	8003c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000728 	.word	0x20000728

08001058 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800105c:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <SystemInit+0x5c>)
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <SystemInit+0x5c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001068:	4912      	ldr	r1, [pc, #72]	; (80010b4 <SystemInit+0x5c>)
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <SystemInit+0x5c>)
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <SystemInit+0x60>)
 8001070:	4013      	ands	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001074:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <SystemInit+0x5c>)
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <SystemInit+0x5c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800107e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001082:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001084:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <SystemInit+0x5c>)
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <SystemInit+0x5c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001090:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <SystemInit+0x5c>)
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <SystemInit+0x5c>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800109a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SystemInit+0x5c>)
 800109e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80010a2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SystemInit+0x64>)
 80010a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010aa:	609a      	str	r2, [r3, #8]
#endif 
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	40021000 	.word	0x40021000
 80010b8:	f8ff0000 	.word	0xf8ff0000
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <HAL_Init+0x28>)
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_Init+0x28>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f043 0310 	orr.w	r3, r3, #16
 80010ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 f91d 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fd9e 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40022000 	.word	0x40022000

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f935 	bl	800137a <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f000 f8fd 	bl	8001326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000084 	.word	0x20000084
 8001144:	2000008c 	.word	0x2000008c
 8001148:	20000088 	.word	0x20000088

0800114c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_IncTick+0x1c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_IncTick+0x20>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a03      	ldr	r2, [pc, #12]	; (800116c <HAL_IncTick+0x20>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	2000008c 	.word	0x2000008c
 800116c:	20000cac 	.word	0x20000cac

08001170 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b02      	ldr	r3, [pc, #8]	; (8001180 <HAL_GetTick+0x10>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	20000cac 	.word	0x20000cac

08001184 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011f2:	4908      	ldr	r1, [pc, #32]	; (8001214 <NVIC_EnableIRQ+0x2c>)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	095b      	lsrs	r3, r3, #5
 80011fa:	79fa      	ldrb	r2, [r7, #7]
 80011fc:	f002 021f 	and.w	r2, r2, #31
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100

08001218 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	da0b      	bge.n	8001244 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	490d      	ldr	r1, [pc, #52]	; (8001264 <NVIC_SetPriority+0x4c>)
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	3b04      	subs	r3, #4
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001242:	e009      	b.n	8001258 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	4908      	ldr	r1, [pc, #32]	; (8001268 <NVIC_SetPriority+0x50>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	e000e100 	.word	0xe000e100

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	2201      	movs	r2, #1
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	401a      	ands	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b2:	2101      	movs	r1, #1
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	1e59      	subs	r1, r3, #1
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	4313      	orrs	r3, r2
         );
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3724      	adds	r7, #36	; 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012dc:	d301      	bcc.n	80012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012de:	2301      	movs	r3, #1
 80012e0:	e00f      	b.n	8001302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <SysTick_Config+0x40>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ea:	210f      	movs	r1, #15
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f7ff ff92 	bl	8001218 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <SysTick_Config+0x40>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <SysTick_Config+0x40>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff33 	bl	8001184 <NVIC_SetPriorityGrouping>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001338:	f7ff ff48 	bl	80011cc <NVIC_GetPriorityGrouping>
 800133c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff ff92 	bl	800126c <NVIC_EncodePriority>
 8001348:	4602      	mov	r2, r0
 800134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff61 	bl	8001218 <NVIC_SetPriority>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff3b 	bl	80011e8 <NVIC_EnableIRQ>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa2 	bl	80012cc <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e043      	b.n	8001432 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b22      	ldr	r3, [pc, #136]	; (800143c <HAL_DMA_Init+0xa8>)
 80013b2:	4413      	add	r3, r2
 80013b4:	4a22      	ldr	r2, [pc, #136]	; (8001440 <HAL_DMA_Init+0xac>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	009a      	lsls	r2, r3, #2
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a1f      	ldr	r2, [pc, #124]	; (8001444 <HAL_DMA_Init+0xb0>)
 80013c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2202      	movs	r2, #2
 80013cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80013de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80013e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	bffdfff8 	.word	0xbffdfff8
 8001440:	cccccccd 	.word	0xcccccccd
 8001444:	40020000 	.word	0x40020000

08001448 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <HAL_DMA_Start_IT+0x20>
 8001464:	2302      	movs	r3, #2
 8001466:	e04a      	b.n	80014fe <HAL_DMA_Start_IT+0xb6>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001476:	2b01      	cmp	r3, #1
 8001478:	d13a      	bne.n	80014f0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2202      	movs	r2, #2
 800147e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 f9c0 	bl	8001824 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d008      	beq.n	80014be <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	f042 020e 	orr.w	r2, r2, #14
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	e00f      	b.n	80014de <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	f022 0204 	bic.w	r2, r2, #4
 80014cc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	f042 020a 	orr.w	r2, r2, #10
 80014dc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	f042 0201 	orr.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	e005      	b.n	80014fc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014f8:	2302      	movs	r3, #2
 80014fa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800151a:	2b02      	cmp	r3, #2
 800151c:	d005      	beq.n	800152a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2204      	movs	r2, #4
 8001522:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	e057      	b.n	80015da <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	f022 020e 	bic.w	r2, r2, #14
 8001538:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	f022 0201 	bic.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800154a:	4a26      	ldr	r2, [pc, #152]	; (80015e4 <HAL_DMA_Abort_IT+0xdc>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <HAL_DMA_Abort_IT+0xe0>)
 8001554:	4299      	cmp	r1, r3
 8001556:	d02e      	beq.n	80015b6 <HAL_DMA_Abort_IT+0xae>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	4b23      	ldr	r3, [pc, #140]	; (80015ec <HAL_DMA_Abort_IT+0xe4>)
 8001560:	4299      	cmp	r1, r3
 8001562:	d026      	beq.n	80015b2 <HAL_DMA_Abort_IT+0xaa>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <HAL_DMA_Abort_IT+0xe8>)
 800156c:	4299      	cmp	r1, r3
 800156e:	d01d      	beq.n	80015ac <HAL_DMA_Abort_IT+0xa4>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <HAL_DMA_Abort_IT+0xec>)
 8001578:	4299      	cmp	r1, r3
 800157a:	d014      	beq.n	80015a6 <HAL_DMA_Abort_IT+0x9e>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_DMA_Abort_IT+0xf0>)
 8001584:	4299      	cmp	r1, r3
 8001586:	d00b      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x98>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_DMA_Abort_IT+0xf4>)
 8001590:	4299      	cmp	r1, r3
 8001592:	d102      	bne.n	800159a <HAL_DMA_Abort_IT+0x92>
 8001594:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001598:	e00e      	b.n	80015b8 <HAL_DMA_Abort_IT+0xb0>
 800159a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800159e:	e00b      	b.n	80015b8 <HAL_DMA_Abort_IT+0xb0>
 80015a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a4:	e008      	b.n	80015b8 <HAL_DMA_Abort_IT+0xb0>
 80015a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015aa:	e005      	b.n	80015b8 <HAL_DMA_Abort_IT+0xb0>
 80015ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b0:	e002      	b.n	80015b8 <HAL_DMA_Abort_IT+0xb0>
 80015b2:	2310      	movs	r3, #16
 80015b4:	e000      	b.n	80015b8 <HAL_DMA_Abort_IT+0xb0>
 80015b6:	2301      	movs	r3, #1
 80015b8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	4798      	blx	r3
    } 
  }
  return status;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40020008 	.word	0x40020008
 80015ec:	4002001c 	.word	0x4002001c
 80015f0:	40020030 	.word	0x40020030
 80015f4:	40020044 	.word	0x40020044
 80015f8:	40020058 	.word	0x40020058
 80015fc:	4002006c 	.word	0x4002006c

08001600 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	2204      	movs	r2, #4
 800161e:	409a      	lsls	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d055      	beq.n	80016d4 <HAL_DMA_IRQHandler+0xd4>
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	2b00      	cmp	r3, #0
 8001630:	d050      	beq.n	80016d4 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0320 	and.w	r3, r3, #32
 800163c:	2b00      	cmp	r3, #0
 800163e:	d107      	bne.n	8001650 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	f022 0204 	bic.w	r2, r2, #4
 800164e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001650:	4a6d      	ldr	r2, [pc, #436]	; (8001808 <HAL_DMA_IRQHandler+0x208>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4619      	mov	r1, r3
 8001658:	4b6c      	ldr	r3, [pc, #432]	; (800180c <HAL_DMA_IRQHandler+0x20c>)
 800165a:	4299      	cmp	r1, r3
 800165c:	d02e      	beq.n	80016bc <HAL_DMA_IRQHandler+0xbc>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4619      	mov	r1, r3
 8001664:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <HAL_DMA_IRQHandler+0x210>)
 8001666:	4299      	cmp	r1, r3
 8001668:	d026      	beq.n	80016b8 <HAL_DMA_IRQHandler+0xb8>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4619      	mov	r1, r3
 8001670:	4b68      	ldr	r3, [pc, #416]	; (8001814 <HAL_DMA_IRQHandler+0x214>)
 8001672:	4299      	cmp	r1, r3
 8001674:	d01d      	beq.n	80016b2 <HAL_DMA_IRQHandler+0xb2>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4619      	mov	r1, r3
 800167c:	4b66      	ldr	r3, [pc, #408]	; (8001818 <HAL_DMA_IRQHandler+0x218>)
 800167e:	4299      	cmp	r1, r3
 8001680:	d014      	beq.n	80016ac <HAL_DMA_IRQHandler+0xac>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4619      	mov	r1, r3
 8001688:	4b64      	ldr	r3, [pc, #400]	; (800181c <HAL_DMA_IRQHandler+0x21c>)
 800168a:	4299      	cmp	r1, r3
 800168c:	d00b      	beq.n	80016a6 <HAL_DMA_IRQHandler+0xa6>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4619      	mov	r1, r3
 8001694:	4b62      	ldr	r3, [pc, #392]	; (8001820 <HAL_DMA_IRQHandler+0x220>)
 8001696:	4299      	cmp	r1, r3
 8001698:	d102      	bne.n	80016a0 <HAL_DMA_IRQHandler+0xa0>
 800169a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800169e:	e00e      	b.n	80016be <HAL_DMA_IRQHandler+0xbe>
 80016a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016a4:	e00b      	b.n	80016be <HAL_DMA_IRQHandler+0xbe>
 80016a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016aa:	e008      	b.n	80016be <HAL_DMA_IRQHandler+0xbe>
 80016ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016b0:	e005      	b.n	80016be <HAL_DMA_IRQHandler+0xbe>
 80016b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016b6:	e002      	b.n	80016be <HAL_DMA_IRQHandler+0xbe>
 80016b8:	2340      	movs	r3, #64	; 0x40
 80016ba:	e000      	b.n	80016be <HAL_DMA_IRQHandler+0xbe>
 80016bc:	2304      	movs	r3, #4
 80016be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 809a 	beq.w	80017fe <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80016d2:	e094      	b.n	80017fe <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	2202      	movs	r2, #2
 80016da:	409a      	lsls	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d05c      	beq.n	800179e <HAL_DMA_IRQHandler+0x19e>
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d057      	beq.n	800179e <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0320 	and.w	r3, r3, #32
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10b      	bne.n	8001714 <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	f022 020a 	bic.w	r2, r2, #10
 800170a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001714:	4a3c      	ldr	r2, [pc, #240]	; (8001808 <HAL_DMA_IRQHandler+0x208>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4619      	mov	r1, r3
 800171c:	4b3b      	ldr	r3, [pc, #236]	; (800180c <HAL_DMA_IRQHandler+0x20c>)
 800171e:	4299      	cmp	r1, r3
 8001720:	d02e      	beq.n	8001780 <HAL_DMA_IRQHandler+0x180>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4619      	mov	r1, r3
 8001728:	4b39      	ldr	r3, [pc, #228]	; (8001810 <HAL_DMA_IRQHandler+0x210>)
 800172a:	4299      	cmp	r1, r3
 800172c:	d026      	beq.n	800177c <HAL_DMA_IRQHandler+0x17c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4619      	mov	r1, r3
 8001734:	4b37      	ldr	r3, [pc, #220]	; (8001814 <HAL_DMA_IRQHandler+0x214>)
 8001736:	4299      	cmp	r1, r3
 8001738:	d01d      	beq.n	8001776 <HAL_DMA_IRQHandler+0x176>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4619      	mov	r1, r3
 8001740:	4b35      	ldr	r3, [pc, #212]	; (8001818 <HAL_DMA_IRQHandler+0x218>)
 8001742:	4299      	cmp	r1, r3
 8001744:	d014      	beq.n	8001770 <HAL_DMA_IRQHandler+0x170>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4619      	mov	r1, r3
 800174c:	4b33      	ldr	r3, [pc, #204]	; (800181c <HAL_DMA_IRQHandler+0x21c>)
 800174e:	4299      	cmp	r1, r3
 8001750:	d00b      	beq.n	800176a <HAL_DMA_IRQHandler+0x16a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4619      	mov	r1, r3
 8001758:	4b31      	ldr	r3, [pc, #196]	; (8001820 <HAL_DMA_IRQHandler+0x220>)
 800175a:	4299      	cmp	r1, r3
 800175c:	d102      	bne.n	8001764 <HAL_DMA_IRQHandler+0x164>
 800175e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001762:	e00e      	b.n	8001782 <HAL_DMA_IRQHandler+0x182>
 8001764:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001768:	e00b      	b.n	8001782 <HAL_DMA_IRQHandler+0x182>
 800176a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800176e:	e008      	b.n	8001782 <HAL_DMA_IRQHandler+0x182>
 8001770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001774:	e005      	b.n	8001782 <HAL_DMA_IRQHandler+0x182>
 8001776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800177a:	e002      	b.n	8001782 <HAL_DMA_IRQHandler+0x182>
 800177c:	2320      	movs	r3, #32
 800177e:	e000      	b.n	8001782 <HAL_DMA_IRQHandler+0x182>
 8001780:	2302      	movs	r3, #2
 8001782:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	2b00      	cmp	r3, #0
 8001792:	d034      	beq.n	80017fe <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800179c:	e02f      	b.n	80017fe <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	2208      	movs	r2, #8
 80017a4:	409a      	lsls	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d028      	beq.n	8001800 <HAL_DMA_IRQHandler+0x200>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d023      	beq.n	8001800 <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	f022 020e 	bic.w	r2, r2, #14
 80017c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017d0:	2101      	movs	r1, #1
 80017d2:	fa01 f202 	lsl.w	r2, r1, r2
 80017d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d004      	beq.n	8001800 <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	4798      	blx	r3
    }
  }
  return;
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
}
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40020000 	.word	0x40020000
 800180c:	40020008 	.word	0x40020008
 8001810:	4002001c 	.word	0x4002001c
 8001814:	40020030 	.word	0x40020030
 8001818:	40020044 	.word	0x40020044
 800181c:	40020058 	.word	0x40020058
 8001820:	4002006c 	.word	0x4002006c

08001824 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800183a:	2101      	movs	r1, #1
 800183c:	fa01 f202 	lsl.w	r2, r1, r2
 8001840:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b10      	cmp	r3, #16
 8001850:	d108      	bne.n	8001864 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001862:	e007      	b.n	8001874 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	60da      	str	r2, [r3, #12]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
	...

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b08b      	sub	sp, #44	; 0x2c
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
 80018a2:	e127      	b.n	8001af4 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80018a4:	2201      	movs	r2, #1
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	429a      	cmp	r2, r3
 80018be:	f040 8116 	bne.w	8001aee <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b12      	cmp	r3, #18
 80018c8:	d034      	beq.n	8001934 <HAL_GPIO_Init+0xb4>
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d80d      	bhi.n	80018ea <HAL_GPIO_Init+0x6a>
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d02b      	beq.n	800192a <HAL_GPIO_Init+0xaa>
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d804      	bhi.n	80018e0 <HAL_GPIO_Init+0x60>
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d031      	beq.n	800193e <HAL_GPIO_Init+0xbe>
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d01c      	beq.n	8001918 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018de:	e048      	b.n	8001972 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d043      	beq.n	800196c <HAL_GPIO_Init+0xec>
 80018e4:	2b11      	cmp	r3, #17
 80018e6:	d01b      	beq.n	8001920 <HAL_GPIO_Init+0xa0>
          break;
 80018e8:	e043      	b.n	8001972 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80018ea:	4a87      	ldr	r2, [pc, #540]	; (8001b08 <HAL_GPIO_Init+0x288>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d026      	beq.n	800193e <HAL_GPIO_Init+0xbe>
 80018f0:	4a85      	ldr	r2, [pc, #532]	; (8001b08 <HAL_GPIO_Init+0x288>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d806      	bhi.n	8001904 <HAL_GPIO_Init+0x84>
 80018f6:	4a85      	ldr	r2, [pc, #532]	; (8001b0c <HAL_GPIO_Init+0x28c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d020      	beq.n	800193e <HAL_GPIO_Init+0xbe>
 80018fc:	4a84      	ldr	r2, [pc, #528]	; (8001b10 <HAL_GPIO_Init+0x290>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d01d      	beq.n	800193e <HAL_GPIO_Init+0xbe>
          break;
 8001902:	e036      	b.n	8001972 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001904:	4a83      	ldr	r2, [pc, #524]	; (8001b14 <HAL_GPIO_Init+0x294>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d019      	beq.n	800193e <HAL_GPIO_Init+0xbe>
 800190a:	4a83      	ldr	r2, [pc, #524]	; (8001b18 <HAL_GPIO_Init+0x298>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d016      	beq.n	800193e <HAL_GPIO_Init+0xbe>
 8001910:	4a82      	ldr	r2, [pc, #520]	; (8001b1c <HAL_GPIO_Init+0x29c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d013      	beq.n	800193e <HAL_GPIO_Init+0xbe>
          break;
 8001916:	e02c      	b.n	8001972 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	623b      	str	r3, [r7, #32]
          break;
 800191e:	e028      	b.n	8001972 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	3304      	adds	r3, #4
 8001926:	623b      	str	r3, [r7, #32]
          break;
 8001928:	e023      	b.n	8001972 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	3308      	adds	r3, #8
 8001930:	623b      	str	r3, [r7, #32]
          break;
 8001932:	e01e      	b.n	8001972 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	330c      	adds	r3, #12
 800193a:	623b      	str	r3, [r7, #32]
          break;
 800193c:	e019      	b.n	8001972 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001946:	2304      	movs	r3, #4
 8001948:	623b      	str	r3, [r7, #32]
          break;
 800194a:	e012      	b.n	8001972 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001954:	2308      	movs	r3, #8
 8001956:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	611a      	str	r2, [r3, #16]
          break;
 800195e:	e008      	b.n	8001972 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001960:	2308      	movs	r3, #8
 8001962:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	615a      	str	r2, [r3, #20]
          break;
 800196a:	e002      	b.n	8001972 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
          break;
 8001970:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	2bff      	cmp	r3, #255	; 0xff
 8001976:	d801      	bhi.n	800197c <HAL_GPIO_Init+0xfc>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	e001      	b.n	8001980 <HAL_GPIO_Init+0x100>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3304      	adds	r3, #4
 8001980:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	2bff      	cmp	r3, #255	; 0xff
 8001986:	d802      	bhi.n	800198e <HAL_GPIO_Init+0x10e>
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	e002      	b.n	8001994 <HAL_GPIO_Init+0x114>
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	3b08      	subs	r3, #8
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	210f      	movs	r1, #15
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	401a      	ands	r2, r3
 80019a6:	6a39      	ldr	r1, [r7, #32]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	431a      	orrs	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 8096 	beq.w	8001aee <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019c2:	4a57      	ldr	r2, [pc, #348]	; (8001b20 <HAL_GPIO_Init+0x2a0>)
 80019c4:	4b56      	ldr	r3, [pc, #344]	; (8001b20 <HAL_GPIO_Init+0x2a0>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6193      	str	r3, [r2, #24]
 80019ce:	4b54      	ldr	r3, [pc, #336]	; (8001b20 <HAL_GPIO_Init+0x2a0>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80019da:	4a52      	ldr	r2, [pc, #328]	; (8001b24 <HAL_GPIO_Init+0x2a4>)
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e6:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	220f      	movs	r2, #15
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	4013      	ands	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a49      	ldr	r2, [pc, #292]	; (8001b28 <HAL_GPIO_Init+0x2a8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <HAL_GPIO_Init+0x1ae>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a48      	ldr	r2, [pc, #288]	; (8001b2c <HAL_GPIO_Init+0x2ac>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00d      	beq.n	8001a2a <HAL_GPIO_Init+0x1aa>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a47      	ldr	r2, [pc, #284]	; (8001b30 <HAL_GPIO_Init+0x2b0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d007      	beq.n	8001a26 <HAL_GPIO_Init+0x1a6>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a46      	ldr	r2, [pc, #280]	; (8001b34 <HAL_GPIO_Init+0x2b4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d101      	bne.n	8001a22 <HAL_GPIO_Init+0x1a2>
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x1b0>
 8001a22:	2304      	movs	r3, #4
 8001a24:	e004      	b.n	8001a30 <HAL_GPIO_Init+0x1b0>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e002      	b.n	8001a30 <HAL_GPIO_Init+0x1b0>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_GPIO_Init+0x1b0>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a32:	f002 0203 	and.w	r2, r2, #3
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	4093      	lsls	r3, r2
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001a40:	4938      	ldr	r1, [pc, #224]	; (8001b24 <HAL_GPIO_Init+0x2a4>)
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d006      	beq.n	8001a68 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a5a:	4937      	ldr	r1, [pc, #220]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a5c:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
 8001a66:	e006      	b.n	8001a76 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a68:	4933      	ldr	r1, [pc, #204]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a6a:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4013      	ands	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d006      	beq.n	8001a90 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a82:	492d      	ldr	r1, [pc, #180]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a84:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
 8001a8e:	e006      	b.n	8001a9e <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a90:	4929      	ldr	r1, [pc, #164]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d006      	beq.n	8001ab8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aaa:	4923      	ldr	r1, [pc, #140]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
 8001ab6:	e006      	b.n	8001ac6 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ab8:	491f      	ldr	r1, [pc, #124]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001aba:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d006      	beq.n	8001ae0 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ad2:	4919      	ldr	r1, [pc, #100]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60cb      	str	r3, [r1, #12]
 8001ade:	e006      	b.n	8001aee <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ae0:	4915      	ldr	r1, [pc, #84]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4013      	ands	r3, r2
 8001aec:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	3301      	adds	r3, #1
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	2b0f      	cmp	r3, #15
 8001af8:	f67f aed4 	bls.w	80018a4 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001afc:	bf00      	nop
 8001afe:	372c      	adds	r7, #44	; 0x2c
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	10210000 	.word	0x10210000
 8001b0c:	10110000 	.word	0x10110000
 8001b10:	10120000 	.word	0x10120000
 8001b14:	10310000 	.word	0x10310000
 8001b18:	10320000 	.word	0x10320000
 8001b1c:	10220000 	.word	0x10220000
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010000 	.word	0x40010000
 8001b28:	40010800 	.word	0x40010800
 8001b2c:	40010c00 	.word	0x40010c00
 8001b30:	40011000 	.word	0x40011000
 8001b34:	40011400 	.word	0x40011400
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b4c:	787b      	ldrb	r3, [r7, #1]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b58:	e003      	b.n	8001b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	041a      	lsls	r2, r3, #16
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	611a      	str	r2, [r3, #16]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b6e:	b08b      	sub	sp, #44	; 0x2c
 8001b70:	af06      	add	r7, sp, #24
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0ca      	b.n	8001d18 <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f005 f812 	bl	8006bc0 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f002 fc75 	bl	8004498 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	687e      	ldr	r6, [r7, #4]
 8001bb6:	466d      	mov	r5, sp
 8001bb8:	f106 0410 	add.w	r4, r6, #16
 8001bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	602b      	str	r3, [r5, #0]
 8001bc4:	1d33      	adds	r3, r6, #4
 8001bc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bc8:	6838      	ldr	r0, [r7, #0]
 8001bca:	f002 fc3b 	bl	8004444 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f002 fc7b 	bl	80044d0 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	e037      	b.n	8001c50 <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	015b      	lsls	r3, r3, #5
 8001be6:	4413      	add	r3, r2
 8001be8:	3329      	adds	r3, #41	; 0x29
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	b2d9      	uxtb	r1, r3
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	015b      	lsls	r3, r3, #5
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3328      	adds	r3, #40	; 0x28
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	b299      	uxth	r1, r3
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	015b      	lsls	r3, r3, #5
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3334      	adds	r3, #52	; 0x34
 8001c0e:	460a      	mov	r2, r1
 8001c10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	015b      	lsls	r3, r3, #5
 8001c18:	4413      	add	r3, r2
 8001c1a:	332b      	adds	r3, #43	; 0x2b
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	015b      	lsls	r3, r3, #5
 8001c26:	4413      	add	r3, r2
 8001c28:	3338      	adds	r3, #56	; 0x38
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	015b      	lsls	r3, r3, #5
 8001c34:	4413      	add	r3, r2
 8001c36:	333c      	adds	r3, #60	; 0x3c
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3302      	adds	r3, #2
 8001c42:	015b      	lsls	r3, r3, #5
 8001c44:	4413      	add	r3, r2
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b0e      	cmp	r3, #14
 8001c54:	d9c4      	bls.n	8001be0 <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	e03c      	b.n	8001cd6 <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	015b      	lsls	r3, r3, #5
 8001c62:	4413      	add	r3, r2
 8001c64:	f203 2329 	addw	r3, r3, #553	; 0x229
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	b2d9      	uxtb	r1, r3
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	015b      	lsls	r3, r3, #5
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	b299      	uxth	r1, r3
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	015b      	lsls	r3, r3, #5
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3334      	adds	r3, #52	; 0x34
 8001c8e:	460a      	mov	r2, r1
 8001c90:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	015b      	lsls	r3, r3, #5
 8001c98:	4413      	add	r3, r2
 8001c9a:	f203 232b 	addw	r3, r3, #555	; 0x22b
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	015b      	lsls	r3, r3, #5
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	015b      	lsls	r3, r3, #5
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3312      	adds	r3, #18
 8001cc8:	015b      	lsls	r3, r3, #5
 8001cca:	4413      	add	r3, r2
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b0e      	cmp	r3, #14
 8001cda:	d9bf      	bls.n	8001c5c <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	687e      	ldr	r6, [r7, #4]
 8001ce4:	466d      	mov	r5, sp
 8001ce6:	f106 0410 	add.w	r4, r6, #16
 8001cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	602b      	str	r3, [r5, #0]
 8001cf2:	1d33      	adds	r3, r6, #4
 8001cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf6:	6838      	ldr	r0, [r7, #0]
 8001cf8:	f002 fbf6 	bl	80044e8 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f003 fbe0 	bl	80054d6 <USB_DevDisconnect>
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d20 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_PCD_Start+0x16>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e016      	b.n	8001d64 <HAL_PCD_Start+0x44>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8001d3e:	2101      	movs	r1, #1
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f005 fa64 	bl	800720e <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 fbb9 	bl	80054c2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f002 fb85 	bl	8004464 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 fbb6 	bl	80054ea <USB_ReadInterrupts>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d88:	d102      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fad8 	bl	8002340 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 fba8 	bl	80054ea <USB_ReadInterrupts>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da4:	d112      	bne.n	8001dcc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001db2:	b292      	uxth	r2, r2
 8001db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001db8:	b292      	uxth	r2, r2
 8001dba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f004 ff73 	bl	8006caa <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8d2 	bl	8001f70 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 fb8a 	bl	80054ea <USB_ReadInterrupts>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001de0:	d10b      	bne.n	8001dfa <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001dee:	b292      	uxth	r2, r2
 8001df0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001df4:	b292      	uxth	r2, r2
 8001df6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 fb73 	bl	80054ea <USB_ReadInterrupts>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e0e:	d10b      	bne.n	8001e28 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001e1c:	b292      	uxth	r2, r2
 8001e1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e22:	b292      	uxth	r2, r2
 8001e24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 fb5c 	bl	80054ea <USB_ReadInterrupts>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3c:	d126      	bne.n	8001e8c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001e4a:	b292      	uxth	r2, r2
 8001e4c:	f022 0204 	bic.w	r2, r2, #4
 8001e50:	b292      	uxth	r2, r2
 8001e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001e62:	b292      	uxth	r2, r2
 8001e64:	f022 0208 	bic.w	r2, r2, #8
 8001e68:	b292      	uxth	r2, r2
 8001e6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f004 ff58 	bl	8006d24 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001e80:	b292      	uxth	r2, r2
 8001e82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e86:	b292      	uxth	r2, r2
 8001e88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fb2a 	bl	80054ea <USB_ReadInterrupts>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ea0:	d131      	bne.n	8001f06 <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001eae:	b292      	uxth	r2, r2
 8001eb0:	f042 0208 	orr.w	r2, r2, #8
 8001eb4:	b292      	uxth	r2, r2
 8001eb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001ec6:	b292      	uxth	r2, r2
 8001ec8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ecc:	b292      	uxth	r2, r2
 8001ece:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001ede:	b292      	uxth	r2, r2
 8001ee0:	f042 0204 	orr.w	r2, r2, #4
 8001ee4:	b292      	uxth	r2, r2
 8001ee6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 fafb 	bl	80054ea <USB_ReadInterrupts>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001efe:	d002      	beq.n	8001f06 <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f004 fef5 	bl	8006cf0 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f003 faed 	bl	80054ea <USB_ReadInterrupts>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f1a:	d10e      	bne.n	8001f3a <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001f28:	b292      	uxth	r2, r2
 8001f2a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f2e:	b292      	uxth	r2, r2
 8001f30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f004 feaa 	bl	8006c8e <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 fad3 	bl	80054ea <USB_ReadInterrupts>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f4e:	d10b      	bne.n	8001f68 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001f5c:	b292      	uxth	r2, r2
 8001f5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f62:	b292      	uxth	r2, r2
 8001f64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_PCD_SetAddress+0x1a>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e013      	b.n	8001fb2 <HAL_PCD_SetAddress+0x42>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	78fa      	ldrb	r2, [r7, #3]
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 fa7a 	bl	800549c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	4608      	mov	r0, r1
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4603      	mov	r3, r0
 8001fca:	70fb      	strb	r3, [r7, #3]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	803b      	strh	r3, [r7, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	da08      	bge.n	8001ff6 <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fea:	015b      	lsls	r3, r3, #5
 8001fec:	3328      	adds	r3, #40	; 0x28
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	e008      	b.n	8002008 <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ffc:	015b      	lsls	r3, r3, #5
 8001ffe:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200e:	b2da      	uxtb	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8002014:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	09db      	lsrs	r3, r3, #7
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8002024:	883a      	ldrh	r2, [r7, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	78ba      	ldrb	r2, [r7, #2]
 800202e:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_PCD_EP_Open+0x84>
 800203a:	2302      	movs	r3, #2
 800203c:	e00e      	b.n	800205c <HAL_PCD_EP_Open+0xa2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68f9      	ldr	r1, [r7, #12]
 800204c:	4618      	mov	r0, r3
 800204e:	f002 fa6f 	bl	8004530 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 800205a:	7afb      	ldrb	r3, [r7, #11]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8002074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002078:	2b00      	cmp	r3, #0
 800207a:	da08      	bge.n	800208e <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002082:	015b      	lsls	r3, r3, #5
 8002084:	3328      	adds	r3, #40	; 0x28
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	e008      	b.n	80020a0 <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002094:	015b      	lsls	r3, r3, #5
 8002096:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80020ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	09db      	lsrs	r3, r3, #7
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_PCD_EP_Close+0x66>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e00e      	b.n	80020e8 <HAL_PCD_EP_Close+0x84>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68f9      	ldr	r1, [r7, #12]
 80020d8:	4618      	mov	r0, r3
 80020da:	f002 fceb 	bl	8004ab4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	460b      	mov	r3, r1
 80020fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002104:	7afb      	ldrb	r3, [r7, #11]
 8002106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800210a:	015b      	lsls	r3, r3, #5
 800210c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2200      	movs	r2, #0
 8002126:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2200      	movs	r2, #0
 800212c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 800212e:	7afb      	ldrb	r3, [r7, #11]
 8002130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002134:	b2da      	uxtb	r2, r3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 800213a:	7afb      	ldrb	r3, [r7, #11]
 800213c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002140:	2b00      	cmp	r3, #0
 8002142:	d106      	bne.n	8002152 <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6979      	ldr	r1, [r7, #20]
 800214a:	4618      	mov	r0, r3
 800214c:	f002 fe3a 	bl	8004dc4 <USB_EPStartXfer>
 8002150:	e005      	b.n	800215e <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6979      	ldr	r1, [r7, #20]
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fe33 	bl	8004dc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	3312      	adds	r3, #18
 800217e:	015b      	lsls	r3, r3, #5
 8002180:	4413      	add	r3, r2
 8002182:	3304      	adds	r3, #4
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	460b      	mov	r3, r1
 80021a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80021a6:	7afb      	ldrb	r3, [r7, #11]
 80021a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ac:	015b      	lsls	r3, r3, #5
 80021ae:	3328      	adds	r3, #40	; 0x28
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2200      	movs	r2, #0
 80021c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2201      	movs	r2, #1
 80021cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 80021ce:	7afb      	ldrb	r3, [r7, #11]
 80021d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 80021da:	7afb      	ldrb	r3, [r7, #11]
 80021dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6979      	ldr	r1, [r7, #20]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f002 fdea 	bl	8004dc4 <USB_EPStartXfer>
 80021f0:	e005      	b.n	80021fe <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6979      	ldr	r1, [r7, #20]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f002 fde3 	bl	8004dc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8002218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800221c:	2b00      	cmp	r3, #0
 800221e:	da08      	bge.n	8002232 <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002226:	015b      	lsls	r3, r3, #5
 8002228:	3328      	adds	r3, #40	; 0x28
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e006      	b.n	8002240 <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	015b      	lsls	r3, r3, #5
 8002236:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800224c:	b2da      	uxtb	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	09db      	lsrs	r3, r3, #7
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_PCD_EP_SetStall+0x68>
 800226c:	2302      	movs	r3, #2
 800226e:	e01c      	b.n	80022aa <HAL_PCD_EP_SetStall+0xa2>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68f9      	ldr	r1, [r7, #12]
 800227e:	4618      	mov	r0, r3
 8002280:	f003 f822 	bl	80052c8 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800228a:	2b00      	cmp	r3, #0
 800228c:	d108      	bne.n	80022a0 <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8002298:	4619      	mov	r1, r3
 800229a:	4610      	mov	r0, r2
 800229c:	f003 f936 	bl	800550c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 80022c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	da08      	bge.n	80022dc <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022d0:	015b      	lsls	r3, r3, #5
 80022d2:	3328      	adds	r3, #40	; 0x28
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4413      	add	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	e006      	b.n	80022ea <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	015b      	lsls	r3, r3, #5
 80022e0:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	4413      	add	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80022fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	09db      	lsrs	r3, r3, #7
 8002304:	b2db      	uxtb	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_PCD_EP_ClrStall+0x68>
 8002316:	2302      	movs	r3, #2
 8002318:	e00e      	b.n	8002338 <HAL_PCD_EP_ClrStall+0x86>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68f9      	ldr	r1, [r7, #12]
 8002328:	4618      	mov	r0, r3
 800232a:	f003 f82d 	bl	8005388 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
  uint16_t count = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	83fb      	strh	r3, [r7, #30]
  uint8_t epindex = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	75fb      	strb	r3, [r7, #23]
  __IO uint16_t wIstr = 0;  
 8002354:	2300      	movs	r3, #0
 8002356:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800235c:	e308      	b.n	8002970 <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800235e:	89fb      	ldrh	r3, [r7, #14]
 8002360:	b29b      	uxth	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	75fb      	strb	r3, [r7, #23]
    
    if (epindex == 0)
 800236a:	7dfb      	ldrb	r3, [r7, #23]
 800236c:	2b00      	cmp	r3, #0
 800236e:	f040 812a 	bne.w	80025c6 <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8002372:	89fb      	ldrh	r3, [r7, #14]
 8002374:	b29b      	uxth	r3, r3
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	d14d      	bne.n	800241a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800238e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002392:	b29b      	uxth	r3, r3
 8002394:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3328      	adds	r3, #40	; 0x28
 800239a:	61bb      	str	r3, [r7, #24]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	3302      	adds	r3, #2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	441a      	add	r2, r3
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80023d8:	2100      	movs	r1, #0
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f004 fc40 	bl	8006c60 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 82c1 	beq.w	8002970 <PCD_EP_ISR_Handler+0x630>
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 82bc 	bne.w	8002970 <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	b292      	uxth	r2, r2
 800240c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002418:	e2aa      	b.n	8002970 <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002420:	61bb      	str	r3, [r7, #24]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800242c:	89bb      	ldrh	r3, [r7, #12]
 800242e:	b29b      	uxth	r3, r3
 8002430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002434:	2b00      	cmp	r3, #0
 8002436:	d031      	beq.n	800249c <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002440:	b29b      	uxth	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	3306      	adds	r3, #6
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	4413      	add	r3, r2
 8002456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	889a      	ldrh	r2, [r3, #4]
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	b29b      	uxth	r3, r3
 800247a:	f003 f898 	bl	80055ae <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b299      	uxth	r1, r3
 800248a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800248e:	400b      	ands	r3, r1
 8002490:	b29b      	uxth	r3, r3
 8002492:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f004 fbb9 	bl	8006c0c <HAL_PCD_SetupStageCallback>
 800249a:	e269      	b.n	8002970 <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800249c:	89bb      	ldrh	r3, [r7, #12]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f280 8264 	bge.w	8002970 <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	b299      	uxth	r1, r3
 80024b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024b8:	400b      	ands	r3, r1
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	3306      	adds	r3, #6
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d011      	beq.n	8002518 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	6959      	ldr	r1, [r3, #20]
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	889a      	ldrh	r2, [r3, #4]
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	b29b      	uxth	r3, r3
 8002506:	f003 f852 	bl	80055ae <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	441a      	add	r2, r3
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002518:	2100      	movs	r1, #0
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f004 fb88 	bl	8006c30 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002528:	b29b      	uxth	r3, r3
 800252a:	3306      	adds	r3, #6
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b3e      	cmp	r3, #62	; 0x3e
 8002540:	d918      	bls.n	8002574 <PCD_EP_ISR_Handler+0x234>
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	83bb      	strh	r3, [r7, #28]
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <PCD_EP_ISR_Handler+0x21c>
 8002556:	8bbb      	ldrh	r3, [r7, #28]
 8002558:	3b01      	subs	r3, #1
 800255a:	83bb      	strh	r3, [r7, #28]
 800255c:	8bbb      	ldrh	r3, [r7, #28]
 800255e:	029b      	lsls	r3, r3, #10
 8002560:	b29b      	uxth	r3, r3
 8002562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800256a:	b29b      	uxth	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e012      	b.n	800259a <PCD_EP_ISR_Handler+0x25a>
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	085b      	lsrs	r3, r3, #1
 800257a:	83bb      	strh	r3, [r7, #28]
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <PCD_EP_ISR_Handler+0x24e>
 8002588:	8bbb      	ldrh	r3, [r7, #28]
 800258a:	3301      	adds	r3, #1
 800258c:	83bb      	strh	r3, [r7, #28]
 800258e:	8bbb      	ldrh	r3, [r7, #28]
 8002590:	029b      	lsls	r3, r3, #10
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025aa:	b29c      	uxth	r4, r3
 80025ac:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80025b0:	b29c      	uxth	r4, r3
 80025b2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80025b6:	b29c      	uxth	r4, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b98      	ldr	r3, [pc, #608]	; (8002820 <PCD_EP_ISR_Handler+0x4e0>)
 80025be:	4323      	orrs	r3, r4
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	8013      	strh	r3, [r2, #0]
 80025c4:	e1d4      	b.n	8002970 <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025d8:	89bb      	ldrh	r3, [r7, #12]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	b21b      	sxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f280 80d0 	bge.w	8002784 <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	441a      	add	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b299      	uxth	r1, r3
 8002600:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002604:	400b      	ands	r3, r1
 8002606:	b29b      	uxth	r3, r3
 8002608:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 800260a:	7dfb      	ldrb	r3, [r7, #23]
 800260c:	015b      	lsls	r3, r3, #5
 800260e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	7a9b      	ldrb	r3, [r3, #10]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d122      	bne.n	8002666 <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002628:	b29b      	uxth	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	3306      	adds	r3, #6
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	4413      	add	r3, r2
 800263e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	b29b      	uxth	r3, r3
 8002646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800264a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800264c:	8bfb      	ldrh	r3, [r7, #30]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d073      	beq.n	800273a <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	6959      	ldr	r1, [r3, #20]
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	889a      	ldrh	r2, [r3, #4]
 800265e:	8bfb      	ldrh	r3, [r7, #30]
 8002660:	f002 ffa5 	bl	80055ae <USB_ReadPMA>
 8002664:	e069      	b.n	800273a <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d022      	beq.n	80026c6 <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002688:	b29b      	uxth	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	3302      	adds	r3, #2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026aa:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80026ac:	8bfb      	ldrh	r3, [r7, #30]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d02b      	beq.n	800270a <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	6959      	ldr	r1, [r3, #20]
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	88da      	ldrh	r2, [r3, #6]
 80026be:	8bfb      	ldrh	r3, [r7, #30]
 80026c0:	f002 ff75 	bl	80055ae <USB_ReadPMA>
 80026c4:	e021      	b.n	800270a <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	3306      	adds	r3, #6
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80026f2:	8bfb      	ldrh	r3, [r7, #30]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6959      	ldr	r1, [r3, #20]
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	891a      	ldrh	r2, [r3, #8]
 8002704:	8bfb      	ldrh	r3, [r7, #30]
 8002706:	f002 ff52 	bl	80055ae <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	441a      	add	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b299      	uxth	r1, r3
 800272a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800272e:	400b      	ands	r3, r1
 8002730:	b299      	uxth	r1, r3
 8002732:	4b3c      	ldr	r3, [pc, #240]	; (8002824 <PCD_EP_ISR_Handler+0x4e4>)
 8002734:	430b      	orrs	r3, r1
 8002736:	b29b      	uxth	r3, r3
 8002738:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	69da      	ldr	r2, [r3, #28]
 800273e:	8bfb      	ldrh	r3, [r7, #30]
 8002740:	441a      	add	r2, r3
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	8bfb      	ldrh	r3, [r7, #30]
 800274c:	441a      	add	r2, r3
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d004      	beq.n	8002764 <PCD_EP_ISR_Handler+0x424>
 800275a:	8bfa      	ldrh	r2, [r7, #30]
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	429a      	cmp	r2, r3
 8002762:	d206      	bcs.n	8002772 <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f004 fa60 	bl	8006c30 <HAL_PCD_DataOutStageCallback>
 8002770:	e008      	b.n	8002784 <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	7819      	ldrb	r1, [r3, #0]
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff fcb6 	bl	80020f0 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002784:	89bb      	ldrh	r3, [r7, #12]
 8002786:	b29b      	uxth	r3, r3
 8002788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80ef 	beq.w	8002970 <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	015b      	lsls	r3, r3, #5
 8002796:	3328      	adds	r3, #40	; 0x28
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	441a      	add	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4619      	mov	r1, r3
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80027be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	7a9b      	ldrb	r3, [r3, #10]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d12c      	bne.n	8002828 <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4413      	add	r3, r2
 80027e2:	3302      	adds	r3, #2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8083 	beq.w	800290c <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	6959      	ldr	r1, [r3, #20]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	889a      	ldrh	r2, [r3, #4]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	b29b      	uxth	r3, r3
 8002818:	f002 fe83 	bl	8005522 <USB_WritePMA>
 800281c:	e076      	b.n	800290c <PCD_EP_ISR_Handler+0x5cc>
 800281e:	bf00      	nop
 8002820:	ffff8080 	.word	0xffff8080
 8002824:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d026      	beq.n	8002890 <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	3302      	adds	r3, #2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d031      	beq.n	80028dc <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6959      	ldr	r1, [r3, #20]
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	88da      	ldrh	r2, [r3, #6]
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	b29b      	uxth	r3, r3
 800288a:	f002 fe4a 	bl	8005522 <USB_WritePMA>
 800288e:	e025      	b.n	80028dc <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002898:	b29b      	uxth	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	3306      	adds	r3, #6
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	6959      	ldr	r1, [r3, #20]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	891a      	ldrh	r2, [r3, #8]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	f002 fe23 	bl	8005522 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	441a      	add	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4619      	mov	r1, r3
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	b299      	uxth	r1, r3
 80028fc:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002900:	400b      	ands	r3, r1
 8002902:	b299      	uxth	r1, r3
 8002904:	4b22      	ldr	r3, [pc, #136]	; (8002990 <PCD_EP_ISR_Handler+0x650>)
 8002906:	430b      	orrs	r3, r1
 8002908:	b29b      	uxth	r3, r3
 800290a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002914:	b29b      	uxth	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	3302      	adds	r3, #2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	4413      	add	r3, r2
 800292a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	441a      	add	r2, r3
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d106      	bne.n	800295e <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	4619      	mov	r1, r3
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f004 f982 	bl	8006c60 <HAL_PCD_DataInStageCallback>
 800295c:	e008      	b.n	8002970 <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	7819      	ldrb	r1, [r3, #0]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff fc11 	bl	8002192 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002978:	b29b      	uxth	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	81fa      	strh	r2, [r7, #14]
 800297e:	b21b      	sxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	f6ff acec 	blt.w	800235e <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3724      	adds	r7, #36	; 0x24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd90      	pop	{r4, r7, pc}
 8002990:	ffffc080 	.word	0xffffc080

08002994 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	817b      	strh	r3, [r7, #10]
 80029a2:	4613      	mov	r3, r2
 80029a4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 80029aa:	897b      	ldrh	r3, [r7, #10]
 80029ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80029b4:	897b      	ldrh	r3, [r7, #10]
 80029b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029ba:	015b      	lsls	r3, r3, #5
 80029bc:	3328      	adds	r3, #40	; 0x28
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4413      	add	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	e006      	b.n	80029d4 <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029c6:	897b      	ldrh	r3, [r7, #10]
 80029c8:	015b      	lsls	r3, r3, #5
 80029ca:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4413      	add	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029d4:	893b      	ldrh	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d107      	bne.n	80029ea <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2200      	movs	r2, #0
 80029de:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	809a      	strh	r2, [r3, #4]
 80029e8:	e00b      	b.n	8002a02 <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2201      	movs	r2, #1
 80029ee:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0c1b      	lsrs	r3, r3, #16
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
	...

08002a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 8087 	beq.w	8002b38 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a2a:	4b92      	ldr	r3, [pc, #584]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d00c      	beq.n	8002a50 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a36:	4b8f      	ldr	r3, [pc, #572]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d112      	bne.n	8002a68 <HAL_RCC_OscConfig+0x58>
 8002a42:	4b8c      	ldr	r3, [pc, #560]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4e:	d10b      	bne.n	8002a68 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	4b88      	ldr	r3, [pc, #544]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d06c      	beq.n	8002b36 <HAL_RCC_OscConfig+0x126>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d168      	bne.n	8002b36 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e22d      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a70:	d106      	bne.n	8002a80 <HAL_RCC_OscConfig+0x70>
 8002a72:	4a80      	ldr	r2, [pc, #512]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002a74:	4b7f      	ldr	r3, [pc, #508]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e02e      	b.n	8002ade <HAL_RCC_OscConfig+0xce>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10c      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x92>
 8002a88:	4a7a      	ldr	r2, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002a8a:	4b7a      	ldr	r3, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	4a77      	ldr	r2, [pc, #476]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002a96:	4b77      	ldr	r3, [pc, #476]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	e01d      	b.n	8002ade <HAL_RCC_OscConfig+0xce>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aaa:	d10c      	bne.n	8002ac6 <HAL_RCC_OscConfig+0xb6>
 8002aac:	4a71      	ldr	r2, [pc, #452]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002aae:	4b71      	ldr	r3, [pc, #452]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4a6e      	ldr	r2, [pc, #440]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002aba:	4b6e      	ldr	r3, [pc, #440]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	e00b      	b.n	8002ade <HAL_RCC_OscConfig+0xce>
 8002ac6:	4a6b      	ldr	r2, [pc, #428]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002ac8:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4a68      	ldr	r2, [pc, #416]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002ad4:	4b67      	ldr	r3, [pc, #412]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002adc:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d013      	beq.n	8002b0e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fb43 	bl	8001170 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aee:	f7fe fb3f 	bl	8001170 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b64      	cmp	r3, #100	; 0x64
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e1e1      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b00:	4b5c      	ldr	r3, [pc, #368]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0xde>
 8002b0c:	e014      	b.n	8002b38 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fb2f 	bl	8001170 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b16:	f7fe fb2b 	bl	8001170 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b64      	cmp	r3, #100	; 0x64
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e1cd      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b28:	4b52      	ldr	r3, [pc, #328]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f0      	bne.n	8002b16 <HAL_RCC_OscConfig+0x106>
 8002b34:	e000      	b.n	8002b38 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b36:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d063      	beq.n	8002c0c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b44:	4b4b      	ldr	r3, [pc, #300]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b50:	4b48      	ldr	r3, [pc, #288]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d11c      	bne.n	8002b96 <HAL_RCC_OscConfig+0x186>
 8002b5c:	4b45      	ldr	r3, [pc, #276]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d116      	bne.n	8002b96 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b68:	4b42      	ldr	r3, [pc, #264]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_OscConfig+0x170>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e1a1      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b80:	493c      	ldr	r1, [pc, #240]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002b82:	4b3c      	ldr	r3, [pc, #240]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b94:	e03a      	b.n	8002c0c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d020      	beq.n	8002be0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9e:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <HAL_RCC_OscConfig+0x268>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fae4 	bl	8001170 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bac:	f7fe fae0 	bl	8001170 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e182      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbe:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bca:	492a      	ldr	r1, [pc, #168]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002bcc:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]
 8002bde:	e015      	b.n	8002c0c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be0:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <HAL_RCC_OscConfig+0x268>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7fe fac3 	bl	8001170 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bee:	f7fe fabf 	bl	8001170 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e161      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c00:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d039      	beq.n	8002c8c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d019      	beq.n	8002c54 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c20:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c26:	f7fe faa3 	bl	8001170 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2e:	f7fe fa9f 	bl	8001170 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e141      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_RCC_OscConfig+0x264>)
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	f000 fae3 	bl	8003218 <RCC_Delay>
 8002c52:	e01b      	b.n	8002c8c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c54:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5a:	f7fe fa89 	bl	8001170 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c60:	e00e      	b.n	8002c80 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c62:	f7fe fa85 	bl	8001170 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d907      	bls.n	8002c80 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e127      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4b4>
 8002c74:	40021000 	.word	0x40021000
 8002c78:	42420000 	.word	0x42420000
 8002c7c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c80:	4b92      	ldr	r3, [pc, #584]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ea      	bne.n	8002c62 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80a6 	beq.w	8002de6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9e:	4b8b      	ldr	r3, [pc, #556]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10d      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002caa:	4a88      	ldr	r2, [pc, #544]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002cac:	4b87      	ldr	r3, [pc, #540]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	61d3      	str	r3, [r2, #28]
 8002cb6:	4b85      	ldr	r3, [pc, #532]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	4b82      	ldr	r3, [pc, #520]	; (8002ed0 <HAL_RCC_OscConfig+0x4c0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d118      	bne.n	8002d04 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd2:	4a7f      	ldr	r2, [pc, #508]	; (8002ed0 <HAL_RCC_OscConfig+0x4c0>)
 8002cd4:	4b7e      	ldr	r3, [pc, #504]	; (8002ed0 <HAL_RCC_OscConfig+0x4c0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cde:	f7fe fa47 	bl	8001170 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce6:	f7fe fa43 	bl	8001170 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b64      	cmp	r3, #100	; 0x64
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0e5      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	4b75      	ldr	r3, [pc, #468]	; (8002ed0 <HAL_RCC_OscConfig+0x4c0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x30a>
 8002d0c:	4a6f      	ldr	r2, [pc, #444]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002d0e:	4b6f      	ldr	r3, [pc, #444]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6213      	str	r3, [r2, #32]
 8002d18:	e02d      	b.n	8002d76 <HAL_RCC_OscConfig+0x366>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x32c>
 8002d22:	4a6a      	ldr	r2, [pc, #424]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002d24:	4b69      	ldr	r3, [pc, #420]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6213      	str	r3, [r2, #32]
 8002d2e:	4a67      	ldr	r2, [pc, #412]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002d30:	4b66      	ldr	r3, [pc, #408]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	e01c      	b.n	8002d76 <HAL_RCC_OscConfig+0x366>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCC_OscConfig+0x34e>
 8002d44:	4a61      	ldr	r2, [pc, #388]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002d46:	4b61      	ldr	r3, [pc, #388]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	6213      	str	r3, [r2, #32]
 8002d50:	4a5e      	ldr	r2, [pc, #376]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002d52:	4b5e      	ldr	r3, [pc, #376]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6213      	str	r3, [r2, #32]
 8002d5c:	e00b      	b.n	8002d76 <HAL_RCC_OscConfig+0x366>
 8002d5e:	4a5b      	ldr	r2, [pc, #364]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002d60:	4b5a      	ldr	r3, [pc, #360]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6213      	str	r3, [r2, #32]
 8002d6a:	4a58      	ldr	r2, [pc, #352]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002d6c:	4b57      	ldr	r3, [pc, #348]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d015      	beq.n	8002daa <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe f9f7 	bl	8001170 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fe f9f3 	bl	8001170 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e093      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ee      	beq.n	8002d86 <HAL_RCC_OscConfig+0x376>
 8002da8:	e014      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7fe f9e1 	bl	8001170 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe f9dd 	bl	8001170 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e07d      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc8:	4b40      	ldr	r3, [pc, #256]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ee      	bne.n	8002db2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d105      	bne.n	8002de6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dda:	4a3c      	ldr	r2, [pc, #240]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002ddc:	4b3b      	ldr	r3, [pc, #236]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d069      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dee:	4b37      	ldr	r3, [pc, #220]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d061      	beq.n	8002ebe <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d146      	bne.n	8002e90 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b34      	ldr	r3, [pc, #208]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe f9b2 	bl	8001170 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe f9ae 	bl	8001170 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e050      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e22:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e36:	d108      	bne.n	8002e4a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e38:	4924      	ldr	r1, [pc, #144]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e4a:	4820      	ldr	r0, [pc, #128]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002e4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a19      	ldr	r1, [r3, #32]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e62:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe f982 	bl	8001170 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe f97e 	bl	8001170 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e020      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x460>
 8002e8e:	e018      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e90:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7fe f96b 	bl	8001170 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fe f967 	bl	8001170 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e009      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_RCC_OscConfig+0x4bc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f0      	bne.n	8002e9e <HAL_RCC_OscConfig+0x48e>
 8002ebc:	e001      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	42420060 	.word	0x42420060

08002ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ee6:	4b7e      	ldr	r3, [pc, #504]	; (80030e0 <HAL_RCC_ClockConfig+0x208>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0207 	and.w	r2, r3, #7
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d210      	bcs.n	8002f16 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef4:	497a      	ldr	r1, [pc, #488]	; (80030e0 <HAL_RCC_ClockConfig+0x208>)
 8002ef6:	4b7a      	ldr	r3, [pc, #488]	; (80030e0 <HAL_RCC_ClockConfig+0x208>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 0207 	bic.w	r2, r3, #7
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f04:	4b76      	ldr	r3, [pc, #472]	; (80030e0 <HAL_RCC_ClockConfig+0x208>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0207 	and.w	r2, r3, #7
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d001      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e0e0      	b.n	80030d8 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d020      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f2e:	4a6d      	ldr	r2, [pc, #436]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 8002f30:	4b6c      	ldr	r3, [pc, #432]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f38:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f46:	4a67      	ldr	r2, [pc, #412]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 8002f48:	4b66      	ldr	r3, [pc, #408]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f50:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f52:	4964      	ldr	r1, [pc, #400]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 8002f54:	4b63      	ldr	r3, [pc, #396]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d06a      	beq.n	8003046 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f78:	4b5a      	ldr	r3, [pc, #360]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d115      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0a7      	b.n	80030d8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f90:	4b54      	ldr	r3, [pc, #336]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e09b      	b.n	80030d8 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	4b50      	ldr	r3, [pc, #320]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e093      	b.n	80030d8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb0:	494c      	ldr	r1, [pc, #304]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 8002fb2:	4b4c      	ldr	r3, [pc, #304]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f023 0203 	bic.w	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc2:	f7fe f8d5 	bl	8001170 <HAL_GetTick>
 8002fc6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d112      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd2:	f7fe f8cd 	bl	8001170 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e077      	b.n	80030d8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fe8:	4b3e      	ldr	r3, [pc, #248]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 030c 	and.w	r3, r3, #12
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d1ee      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xfa>
 8002ff4:	e027      	b.n	8003046 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d11d      	bne.n	800303a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003000:	f7fe f8b6 	bl	8001170 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e060      	b.n	80030d8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003016:	4b33      	ldr	r3, [pc, #204]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	2b08      	cmp	r3, #8
 8003020:	d1ee      	bne.n	8003000 <HAL_RCC_ClockConfig+0x128>
 8003022:	e010      	b.n	8003046 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003024:	f7fe f8a4 	bl	8001170 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e04e      	b.n	80030d8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800303a:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1ee      	bne.n	8003024 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_RCC_ClockConfig+0x208>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0207 	and.w	r2, r3, #7
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d910      	bls.n	8003076 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003054:	4922      	ldr	r1, [pc, #136]	; (80030e0 <HAL_RCC_ClockConfig+0x208>)
 8003056:	4b22      	ldr	r3, [pc, #136]	; (80030e0 <HAL_RCC_ClockConfig+0x208>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 0207 	bic.w	r2, r3, #7
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	4313      	orrs	r3, r2
 8003062:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003064:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <HAL_RCC_ClockConfig+0x208>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0207 	and.w	r2, r3, #7
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d001      	beq.n	8003076 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e030      	b.n	80030d8 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003082:	4918      	ldr	r1, [pc, #96]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 8003084:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d009      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030a0:	4910      	ldr	r1, [pc, #64]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030b4:	f000 f81c 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 80030b8:	4601      	mov	r1, r0
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_RCC_ClockConfig+0x20c>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	4a08      	ldr	r2, [pc, #32]	; (80030e8 <HAL_RCC_ClockConfig+0x210>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	fa21 f303 	lsr.w	r3, r1, r3
 80030cc:	4a07      	ldr	r2, [pc, #28]	; (80030ec <HAL_RCC_ClockConfig+0x214>)
 80030ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80030d0:	2000      	movs	r0, #0
 80030d2:	f7fe f80b 	bl	80010ec <HAL_InitTick>
  
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40022000 	.word	0x40022000
 80030e4:	40021000 	.word	0x40021000
 80030e8:	08007be0 	.word	0x08007be0
 80030ec:	20000084 	.word	0x20000084

080030f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f0:	b490      	push	{r4, r7}
 80030f2:	b08a      	sub	sp, #40	; 0x28
 80030f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030f6:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030f8:	1d3c      	adds	r4, r7, #4
 80030fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003100:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	2300      	movs	r3, #0
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800311a:	4b23      	ldr	r3, [pc, #140]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b04      	cmp	r3, #4
 8003128:	d002      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x40>
 800312a:	2b08      	cmp	r3, #8
 800312c:	d003      	beq.n	8003136 <HAL_RCC_GetSysClockFreq+0x46>
 800312e:	e02d      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003130:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003132:	623b      	str	r3, [r7, #32]
      break;
 8003134:	e02d      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	0c9b      	lsrs	r3, r3, #18
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003142:	4413      	add	r3, r2
 8003144:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003148:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003154:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	0c5b      	lsrs	r3, r3, #17
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003162:	4413      	add	r3, r2
 8003164:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003168:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	4a0f      	ldr	r2, [pc, #60]	; (80031ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800316e:	fb02 f203 	mul.w	r2, r2, r3
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	fbb2 f3f3 	udiv	r3, r2, r3
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
 800317a:	e004      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003180:	fb02 f303 	mul.w	r3, r2, r3
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	623b      	str	r3, [r7, #32]
      break;
 800318a:	e002      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800318c:	4b07      	ldr	r3, [pc, #28]	; (80031ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800318e:	623b      	str	r3, [r7, #32]
      break;
 8003190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003192:	6a3b      	ldr	r3, [r7, #32]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3728      	adds	r7, #40	; 0x28
 8003198:	46bd      	mov	sp, r7
 800319a:	bc90      	pop	{r4, r7}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	08007b74 	.word	0x08007b74
 80031a4:	08007b84 	.word	0x08007b84
 80031a8:	40021000 	.word	0x40021000
 80031ac:	007a1200 	.word	0x007a1200
 80031b0:	003d0900 	.word	0x003d0900

080031b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b8:	4b02      	ldr	r3, [pc, #8]	; (80031c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr
 80031c4:	20000084 	.word	0x20000084

080031c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031cc:	f7ff fff2 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031d0:	4601      	mov	r1, r0
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4a03      	ldr	r2, [pc, #12]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80031de:	5cd3      	ldrb	r3, [r2, r3]
 80031e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	08007bf0 	.word	0x08007bf0

080031f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031f4:	f7ff ffde 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031f8:	4601      	mov	r1, r0
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	0adb      	lsrs	r3, r3, #11
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	4a03      	ldr	r2, [pc, #12]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003206:	5cd3      	ldrb	r3, [r2, r3]
 8003208:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	08007bf0 	.word	0x08007bf0

08003218 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <RCC_Delay+0x34>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <RCC_Delay+0x38>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	0a5b      	lsrs	r3, r3, #9
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8003234:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1e5a      	subs	r2, r3, #1
 800323a:	60fa      	str	r2, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f9      	bne.n	8003234 <RCC_Delay+0x1c>
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000084 	.word	0x20000084
 8003250:	10624dd3 	.word	0x10624dd3

08003254 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d07d      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003270:	2300      	movs	r3, #0
 8003272:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003274:	4b4f      	ldr	r3, [pc, #316]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10d      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003280:	4a4c      	ldr	r2, [pc, #304]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003282:	4b4c      	ldr	r3, [pc, #304]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328a:	61d3      	str	r3, [r2, #28]
 800328c:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003298:	2301      	movs	r3, #1
 800329a:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	4b46      	ldr	r3, [pc, #280]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d118      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a8:	4a43      	ldr	r2, [pc, #268]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032aa:	4b43      	ldr	r3, [pc, #268]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b4:	f7fd ff5c 	bl	8001170 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ba:	e008      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032bc:	f7fd ff58 	bl	8001170 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	; 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e06d      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ce:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032da:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d02e      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d027      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032f8:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003300:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003302:	4b2e      	ldr	r3, [pc, #184]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003308:	4b2c      	ldr	r3, [pc, #176]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800330e:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d014      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331e:	f7fd ff27 	bl	8001170 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003324:	e00a      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003326:	f7fd ff23 	bl	8001170 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	f241 3288 	movw	r2, #5000	; 0x1388
 8003334:	4293      	cmp	r3, r2
 8003336:	d901      	bls.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e036      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0ee      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003348:	491a      	ldr	r1, [pc, #104]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334a:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	4313      	orrs	r3, r2
 8003358:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d105      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003360:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003362:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800336a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003378:	490e      	ldr	r1, [pc, #56]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337a:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003396:	4907      	ldr	r1, [pc, #28]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40007000 	.word	0x40007000
 80033bc:	42420440 	.word	0x42420440

080033c0 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e01d      	b.n	800340e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd fc4a 	bl	8000c80 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	4619      	mov	r1, r3
 80033fe:	4610      	mov	r0, r2
 8003400:	f000 f8f8 	bl	80035f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2201      	movs	r2, #1
 8003428:	6839      	ldr	r1, [r7, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fae8 	bl	8003a00 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a0b      	ldr	r2, [pc, #44]	; (8003464 <HAL_TIM_PWM_Start+0x4c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d107      	bne.n	800344a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003444:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003448:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	f042 0201 	orr.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40012c00 	.word	0x40012c00

08003468 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800347e:	2302      	movs	r3, #2
 8003480:	e0b4      	b.n	80035ec <HAL_TIM_PWM_ConfigChannel+0x184>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2202      	movs	r2, #2
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b0c      	cmp	r3, #12
 8003496:	f200 809f 	bhi.w	80035d8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800349a:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034d5 	.word	0x080034d5
 80034a4:	080035d9 	.word	0x080035d9
 80034a8:	080035d9 	.word	0x080035d9
 80034ac:	080035d9 	.word	0x080035d9
 80034b0:	08003515 	.word	0x08003515
 80034b4:	080035d9 	.word	0x080035d9
 80034b8:	080035d9 	.word	0x080035d9
 80034bc:	080035d9 	.word	0x080035d9
 80034c0:	08003557 	.word	0x08003557
 80034c4:	080035d9 	.word	0x080035d9
 80034c8:	080035d9 	.word	0x080035d9
 80034cc:	080035d9 	.word	0x080035d9
 80034d0:	08003597 	.word	0x08003597
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 f8f0 	bl	80036c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	6992      	ldr	r2, [r2, #24]
 80034ea:	f042 0208 	orr.w	r2, r2, #8
 80034ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	6992      	ldr	r2, [r2, #24]
 80034fa:	f022 0204 	bic.w	r2, r2, #4
 80034fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	6991      	ldr	r1, [r2, #24]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	6912      	ldr	r2, [r2, #16]
 800350e:	430a      	orrs	r2, r1
 8003510:	619a      	str	r2, [r3, #24]
    }
    break;
 8003512:	e062      	b.n	80035da <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 f93c 	bl	8003798 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	6992      	ldr	r2, [r2, #24]
 800352a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800352e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	6992      	ldr	r2, [r2, #24]
 800353a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	6991      	ldr	r1, [r2, #24]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	6912      	ldr	r2, [r2, #16]
 800354e:	0212      	lsls	r2, r2, #8
 8003550:	430a      	orrs	r2, r1
 8003552:	619a      	str	r2, [r3, #24]
    }
    break;
 8003554:	e041      	b.n	80035da <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	4618      	mov	r0, r3
 800355e:	f000 f98b 	bl	8003878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	69d2      	ldr	r2, [r2, #28]
 800356c:	f042 0208 	orr.w	r2, r2, #8
 8003570:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	69d2      	ldr	r2, [r2, #28]
 800357c:	f022 0204 	bic.w	r2, r2, #4
 8003580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	69d1      	ldr	r1, [r2, #28]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	6912      	ldr	r2, [r2, #16]
 8003590:	430a      	orrs	r2, r1
 8003592:	61da      	str	r2, [r3, #28]
    }
    break;
 8003594:	e021      	b.n	80035da <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f9db 	bl	8003958 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	69d2      	ldr	r2, [r2, #28]
 80035ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035b0:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	69d2      	ldr	r2, [r2, #28]
 80035bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	69d1      	ldr	r1, [r2, #28]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	6912      	ldr	r2, [r2, #16]
 80035d0:	0212      	lsls	r2, r2, #8
 80035d2:	430a      	orrs	r2, r1
 80035d4:	61da      	str	r2, [r3, #28]
    }
    break;
 80035d6:	e000      	b.n	80035da <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 80035d8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a2a      	ldr	r2, [pc, #168]	; (80036b4 <TIM_Base_SetConfig+0xc0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00b      	beq.n	8003628 <TIM_Base_SetConfig+0x34>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003616:	d007      	beq.n	8003628 <TIM_Base_SetConfig+0x34>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a27      	ldr	r2, [pc, #156]	; (80036b8 <TIM_Base_SetConfig+0xc4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_Base_SetConfig+0x34>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a26      	ldr	r2, [pc, #152]	; (80036bc <TIM_Base_SetConfig+0xc8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d108      	bne.n	800363a <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <TIM_Base_SetConfig+0xc0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00b      	beq.n	800365a <TIM_Base_SetConfig+0x66>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003648:	d007      	beq.n	800365a <TIM_Base_SetConfig+0x66>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a1a      	ldr	r2, [pc, #104]	; (80036b8 <TIM_Base_SetConfig+0xc4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_Base_SetConfig+0x66>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a19      	ldr	r2, [pc, #100]	; (80036bc <TIM_Base_SetConfig+0xc8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d108      	bne.n	800366c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003672:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <TIM_Base_SetConfig+0xc0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d103      	bne.n	80036a4 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	615a      	str	r2, [r3, #20]
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800

080036c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	f023 0201 	bic.w	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f023 0302 	bic.w	r3, r3, #2
 8003714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <TIM_OC1_SetConfig+0xd4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d10c      	bne.n	8003742 <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f023 0308 	bic.w	r3, r3, #8
 800372e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f023 0304 	bic.w	r3, r3, #4
 8003740:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a13      	ldr	r2, [pc, #76]	; (8003794 <TIM_OC1_SetConfig+0xd4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d111      	bne.n	800376e <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	621a      	str	r2, [r3, #32]
}
 8003788:	bf00      	nop
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40012c00 	.word	0x40012c00

08003798 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	f023 0210 	bic.w	r2, r3, #16
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f023 0320 	bic.w	r3, r3, #32
 80037ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <TIM_OC2_SetConfig+0xdc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d10d      	bne.n	8003820 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800380a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381e:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a14      	ldr	r2, [pc, #80]	; (8003874 <TIM_OC2_SetConfig+0xdc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d113      	bne.n	8003850 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800382e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	621a      	str	r2, [r3, #32]
}
 800386a:	bf00      	nop
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr
 8003874:	40012c00 	.word	0x40012c00

08003878 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0303 	bic.w	r3, r3, #3
 80038ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <TIM_OC3_SetConfig+0xdc>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d10d      	bne.n	80038fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038fc:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a14      	ldr	r2, [pc, #80]	; (8003954 <TIM_OC3_SetConfig+0xdc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d113      	bne.n	800392e <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800390c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	621a      	str	r2, [r3, #32]
}
 8003948:	bf00      	nop
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40012c00 	.word	0x40012c00

08003958 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003992:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399a:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039ae:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	031b      	lsls	r3, r3, #12
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a0f      	ldr	r2, [pc, #60]	; (80039fc <TIM_OC4_SetConfig+0xa4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d109      	bne.n	80039d8 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	019b      	lsls	r3, r3, #6
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr
 80039fc:	40012c00 	.word	0x40012c00

08003a00 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003a10:	2201      	movs	r2, #1
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a1a      	ldr	r2, [r3, #32]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	401a      	ands	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a1a      	ldr	r2, [r3, #32]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	621a      	str	r2, [r3, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e032      	b.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	6852      	ldr	r2, [r2, #4]
 8003a76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a7a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	6851      	ldr	r1, [r2, #4]
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	6892      	ldr	r2, [r2, #8]
 8003a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a9c:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	6891      	ldr	r1, [r2, #8]
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	6852      	ldr	r2, [r2, #4]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e03f      	b.n	8003b5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd f96a 	bl	8000dcc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	; 0x24
 8003afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	68d2      	ldr	r2, [r2, #12]
 8003b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b0e:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fb7f 	bl	8004214 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	6912      	ldr	r2, [r2, #16]
 8003b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	6952      	ldr	r2, [r2, #20]
 8003b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b34:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	68d2      	ldr	r2, [r2, #12]
 8003b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b44:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	4613      	mov	r3, r2
 8003b74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d166      	bne.n	8003c50 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL) || (Size == 0U))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_UART_Receive_DMA+0x26>
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e05f      	b.n	8003c52 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_UART_Receive_DMA+0x38>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e058      	b.n	8003c52 <HAL_UART_Receive_DMA+0xea>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	88fa      	ldrh	r2, [r7, #6]
 8003bb2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2222      	movs	r2, #34	; 0x22
 8003bbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc6:	4a25      	ldr	r2, [pc, #148]	; (8003c5c <HAL_UART_Receive_DMA+0xf4>)
 8003bc8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bce:	4a24      	ldr	r2, [pc, #144]	; (8003c60 <HAL_UART_Receive_DMA+0xf8>)
 8003bd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd6:	4a23      	ldr	r2, [pc, #140]	; (8003c64 <HAL_UART_Receive_DMA+0xfc>)
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bde:	2200      	movs	r2, #0
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
 8003be2:	f107 0308 	add.w	r3, r7, #8
 8003be6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	f7fd fc25 	bl	8001448 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	6812      	ldr	r2, [r2, #0]
 8003c24:	68d2      	ldr	r2, [r2, #12]
 8003c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c2a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	6952      	ldr	r2, [r2, #20]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	6952      	ldr	r2, [r2, #20]
 8003c46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c4a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
  }
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	08003e97 	.word	0x08003e97
 8003c60:	08003eff 	.word	0x08003eff
 8003c64:	08003f1b 	.word	0x08003f1b

08003c68 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10d      	bne.n	8003cba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_UART_IRQHandler+0x52>
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fa2d 	bl	8004112 <UART_Receive_IT>
      return;
 8003cb8:	e0cc      	b.n	8003e54 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80ab 	beq.w	8003e18 <HAL_UART_IRQHandler+0x1b0>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d105      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x70>
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80a0 	beq.w	8003e18 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x90>
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf0:	f043 0201 	orr.w	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_UART_IRQHandler+0xb0>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d10:	f043 0202 	orr.w	r2, r3, #2
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_UART_IRQHandler+0xd0>
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d30:	f043 0204 	orr.w	r2, r3, #4
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_UART_IRQHandler+0xf0>
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	f043 0208 	orr.w	r2, r3, #8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d078      	beq.n	8003e52 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <HAL_UART_IRQHandler+0x112>
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f9cc 	bl	8004112 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf14      	ite	ne
 8003d88:	2301      	movne	r3, #1
 8003d8a:	2300      	moveq	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d102      	bne.n	8003da2 <HAL_UART_IRQHandler+0x13a>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d031      	beq.n	8003e06 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f918 	bl	8003fd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d023      	beq.n	8003dfe <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	6952      	ldr	r2, [r2, #20]
 8003dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d013      	beq.n	8003df6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	4a22      	ldr	r2, [pc, #136]	; (8003e5c <HAL_UART_IRQHandler+0x1f4>)
 8003dd4:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fd fb94 	bl	8001508 <HAL_DMA_Abort_IT>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d016      	beq.n	8003e14 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003df0:	4610      	mov	r0, r2
 8003df2:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df4:	e00e      	b.n	8003e14 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f844 	bl	8003e84 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfc:	e00a      	b.n	8003e14 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f840 	bl	8003e84 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	e006      	b.n	8003e14 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f83c 	bl	8003e84 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003e12:	e01e      	b.n	8003e52 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e14:	bf00      	nop
    return;
 8003e16:	e01c      	b.n	8003e52 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_UART_IRQHandler+0x1cc>
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f904 	bl	800403a <UART_Transmit_IT>
    return;
 8003e32:	e00f      	b.n	8003e54 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_UART_IRQHandler+0x1ec>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f94a 	bl	80040e2 <UART_EndTransmit_IT>
    return;
 8003e4e:	bf00      	nop
 8003e50:	e000      	b.n	8003e54 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003e52:	bf00      	nop
  }
}
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	08004013 	.word	0x08004013

08003e60 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr

08003e72 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr

08003e96 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d11e      	bne.n	8003ef0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	6812      	ldr	r2, [r2, #0]
 8003ec0:	68d2      	ldr	r2, [r2, #12]
 8003ec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ec6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	6952      	ldr	r2, [r2, #20]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	6952      	ldr	r2, [r2, #20]
 8003ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f7fc f92b 	bl	800014c <HAL_UART_RxCpltCallback>
}
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	60fb      	str	r3, [r7, #12]
  HAL_UART_RxHalfCpltCallback(huart); 
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7ff ffb0 	bl	8003e72 <HAL_UART_RxHalfCpltCallback>
}
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bf14      	ite	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	2300      	moveq	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b21      	cmp	r3, #33	; 0x21
 8003f4c:	d108      	bne.n	8003f60 <UART_DMAError+0x46>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2200      	movs	r2, #0
 8003f58:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f5a:	68b8      	ldr	r0, [r7, #8]
 8003f5c:	f000 f827 	bl	8003fae <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bf14      	ite	ne
 8003f6e:	2301      	movne	r3, #1
 8003f70:	2300      	moveq	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b22      	cmp	r3, #34	; 0x22
 8003f80:	d108      	bne.n	8003f94 <UART_DMAError+0x7a>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f8e:	68b8      	ldr	r0, [r7, #8]
 8003f90:	f000 f822 	bl	8003fd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f98:	f043 0210 	orr.w	r2, r3, #16
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8003fa0:	68b8      	ldr	r0, [r7, #8]
 8003fa2:	f7ff ff6f 	bl	8003e84 <HAL_UART_ErrorCallback>
}
 8003fa6:	bf00      	nop
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	68d2      	ldr	r2, [r2, #12]
 8003fc0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003fc4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	68d2      	ldr	r2, [r2, #12]
 8003fea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	6952      	ldr	r2, [r2, #20]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f7ff ff29 	bl	8003e84 <HAL_UART_ErrorCallback>
}
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800403a:	b480      	push	{r7}
 800403c:	b085      	sub	sp, #20
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b21      	cmp	r3, #33	; 0x21
 800404c:	d143      	bne.n	80040d6 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004056:	d119      	bne.n	800408c <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	8812      	ldrh	r2, [r2, #0]
 8004066:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800406a:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d105      	bne.n	8004080 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	1c9a      	adds	r2, r3, #2
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	621a      	str	r2, [r3, #32]
 800407e:	e00e      	b.n	800409e <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	621a      	str	r2, [r3, #32]
 800408a:	e008      	b.n	800409e <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	1c58      	adds	r0, r3, #1
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	6208      	str	r0, [r1, #32]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4619      	mov	r1, r3
 80040ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10f      	bne.n	80040d2 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	68d2      	ldr	r2, [r2, #12]
 80040bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	68d2      	ldr	r2, [r2, #12]
 80040cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e000      	b.n	80040d8 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80040d6:	2302      	movs	r3, #2
  }
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr

080040e2 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	68d2      	ldr	r2, [r2, #12]
 80040f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f8:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff feac 	bl	8003e60 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b22      	cmp	r3, #34	; 0x22
 8004124:	d171      	bne.n	800420a <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412e:	d123      	bne.n	8004178 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004134:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10e      	bne.n	800415c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	b29b      	uxth	r3, r3
 8004146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	1c9a      	adds	r2, r3, #2
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	629a      	str	r2, [r3, #40]	; 0x28
 800415a:	e029      	b.n	80041b0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	b29b      	uxth	r3, r3
 8004164:	b2db      	uxtb	r3, r3
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	629a      	str	r2, [r3, #40]	; 0x28
 8004176:	e01b      	b.n	80041b0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	1c59      	adds	r1, r3, #1
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6291      	str	r1, [r2, #40]	; 0x28
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	6852      	ldr	r2, [r2, #4]
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	e00c      	b.n	80041b0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	1c59      	adds	r1, r3, #1
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6291      	str	r1, [r2, #40]	; 0x28
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	6852      	ldr	r2, [r2, #4]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	4619      	mov	r1, r3
 80041be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d120      	bne.n	8004206 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	68d2      	ldr	r2, [r2, #12]
 80041ce:	f022 0220 	bic.w	r2, r2, #32
 80041d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	68d2      	ldr	r2, [r2, #12]
 80041de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041e2:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	6952      	ldr	r2, [r2, #20]
 80041ee:	f022 0201 	bic.w	r2, r2, #1
 80041f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7fb ffa5 	bl	800014c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e002      	b.n	800420c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	e000      	b.n	800420c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800420a:	2302      	movs	r3, #2
  }
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	6912      	ldr	r2, [r2, #16]
 800422a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68d2      	ldr	r2, [r2, #12]
 8004232:	430a      	orrs	r2, r1
 8004234:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800425a:	f023 030c 	bic.w	r3, r3, #12
 800425e:	68f9      	ldr	r1, [r7, #12]
 8004260:	430b      	orrs	r3, r1
 8004262:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	6952      	ldr	r2, [r2, #20]
 800426e:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6992      	ldr	r2, [r2, #24]
 8004276:	430a      	orrs	r2, r1
 8004278:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a6f      	ldr	r2, [pc, #444]	; (800443c <UART_SetConfig+0x228>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d16b      	bne.n	800435c <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681c      	ldr	r4, [r3, #0]
 8004288:	f7fe ffb2 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 800428c:	4602      	mov	r2, r0
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	009a      	lsls	r2, r3, #2
 8004296:	441a      	add	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	4a67      	ldr	r2, [pc, #412]	; (8004440 <UART_SetConfig+0x22c>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	011d      	lsls	r5, r3, #4
 80042ac:	f7fe ffa0 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	009a      	lsls	r2, r3, #2
 80042ba:	441a      	add	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80042c6:	f7fe ff93 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 80042ca:	4602      	mov	r2, r0
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009a      	lsls	r2, r3, #2
 80042d4:	441a      	add	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	4a57      	ldr	r2, [pc, #348]	; (8004440 <UART_SetConfig+0x22c>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	2264      	movs	r2, #100	; 0x64
 80042ea:	fb02 f303 	mul.w	r3, r2, r3
 80042ee:	1af3      	subs	r3, r6, r3
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	3332      	adds	r3, #50	; 0x32
 80042f4:	4a52      	ldr	r2, [pc, #328]	; (8004440 <UART_SetConfig+0x22c>)
 80042f6:	fba2 2303 	umull	r2, r3, r2, r3
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004300:	441d      	add	r5, r3
 8004302:	f7fe ff75 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 8004306:	4602      	mov	r2, r0
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	009a      	lsls	r2, r3, #2
 8004310:	441a      	add	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	fbb2 f6f3 	udiv	r6, r2, r3
 800431c:	f7fe ff68 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 8004320:	4602      	mov	r2, r0
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	009a      	lsls	r2, r3, #2
 800432a:	441a      	add	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	4a42      	ldr	r2, [pc, #264]	; (8004440 <UART_SetConfig+0x22c>)
 8004338:	fba2 2303 	umull	r2, r3, r2, r3
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	2264      	movs	r2, #100	; 0x64
 8004340:	fb02 f303 	mul.w	r3, r2, r3
 8004344:	1af3      	subs	r3, r6, r3
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	3332      	adds	r3, #50	; 0x32
 800434a:	4a3d      	ldr	r2, [pc, #244]	; (8004440 <UART_SetConfig+0x22c>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	442b      	add	r3, r5
 8004358:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800435a:	e06a      	b.n	8004432 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681c      	ldr	r4, [r3, #0]
 8004360:	f7fe ff32 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 8004364:	4602      	mov	r2, r0
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	009a      	lsls	r2, r3, #2
 800436e:	441a      	add	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	fbb2 f3f3 	udiv	r3, r2, r3
 800437a:	4a31      	ldr	r2, [pc, #196]	; (8004440 <UART_SetConfig+0x22c>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	011d      	lsls	r5, r3, #4
 8004384:	f7fe ff20 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 8004388:	4602      	mov	r2, r0
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	009a      	lsls	r2, r3, #2
 8004392:	441a      	add	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	fbb2 f6f3 	udiv	r6, r2, r3
 800439e:	f7fe ff13 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 80043a2:	4602      	mov	r2, r0
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	009a      	lsls	r2, r3, #2
 80043ac:	441a      	add	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	4a21      	ldr	r2, [pc, #132]	; (8004440 <UART_SetConfig+0x22c>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	2264      	movs	r2, #100	; 0x64
 80043c2:	fb02 f303 	mul.w	r3, r2, r3
 80043c6:	1af3      	subs	r3, r6, r3
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	3332      	adds	r3, #50	; 0x32
 80043cc:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <UART_SetConfig+0x22c>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d8:	441d      	add	r5, r3
 80043da:	f7fe fef5 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 80043de:	4602      	mov	r2, r0
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	009a      	lsls	r2, r3, #2
 80043e8:	441a      	add	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80043f4:	f7fe fee8 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 80043f8:	4602      	mov	r2, r0
 80043fa:	4613      	mov	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	009a      	lsls	r2, r3, #2
 8004402:	441a      	add	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	4a0c      	ldr	r2, [pc, #48]	; (8004440 <UART_SetConfig+0x22c>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	2264      	movs	r2, #100	; 0x64
 8004418:	fb02 f303 	mul.w	r3, r2, r3
 800441c:	1af3      	subs	r3, r6, r3
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	3332      	adds	r3, #50	; 0x32
 8004422:	4a07      	ldr	r2, [pc, #28]	; (8004440 <UART_SetConfig+0x22c>)
 8004424:	fba2 2303 	umull	r2, r3, r2, r3
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	442b      	add	r3, r5
 8004430:	60a3      	str	r3, [r4, #8]
}
 8004432:	bf00      	nop
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800443a:	bf00      	nop
 800443c:	40013800 	.word	0x40013800
 8004440:	51eb851f 	.word	0x51eb851f

08004444 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004444:	b084      	sub	sp, #16
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	f107 0014 	add.w	r0, r7, #20
 8004452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	b004      	add	sp, #16
 8004462:	4770      	bx	lr

08004464 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8004470:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004474:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	b29b      	uxth	r3, r3
 8004482:	4313      	orrs	r3, r2
 8004484:	b29a      	uxth	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 80044a4:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 80044a8:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	43db      	mvns	r3, r3
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	4013      	ands	r3, r2
 80044bc:	b29a      	uxth	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044e8:	b084      	sub	sp, #16
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	f107 0014 	add.w	r0, r7, #20
 80044f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7ff ffa2 	bl	8004464 <USB_EnableGlobalInt>
    
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800452c:	b004      	add	sp, #16
 800452e:	4770      	bx	lr

08004530 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004530:	b490      	push	{r4, r7}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	78db      	ldrb	r3, [r3, #3]
 800453e:	2b03      	cmp	r3, #3
 8004540:	d85f      	bhi.n	8004602 <USB_ActivateEndpoint+0xd2>
 8004542:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <USB_ActivateEndpoint+0x18>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	08004559 	.word	0x08004559
 800454c:	080045d7 	.word	0x080045d7
 8004550:	08004585 	.word	0x08004585
 8004554:	080045ab 	.word	0x080045ab
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	441a      	add	r2, r3
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	b29b      	uxth	r3, r3
 8004570:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004578:	b29b      	uxth	r3, r3
 800457a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800457e:	b29b      	uxth	r3, r3
 8004580:	8013      	strh	r3, [r2, #0]
    break;
 8004582:	e03f      	b.n	8004604 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	441a      	add	r2, r3
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	8013      	strh	r3, [r2, #0]
    break;
 80045a8:	e02c      	b.n	8004604 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	441a      	add	r2, r3
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	8013      	strh	r3, [r2, #0]
    break;
 80045d4:	e016      	b.n	8004604 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	441a      	add	r2, r3
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	8013      	strh	r3, [r2, #0]
    break;
 8004600:	e000      	b.n	8004604 <USB_ActivateEndpoint+0xd4>
  default:
      break;
 8004602:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	441a      	add	r2, r3
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b299      	uxth	r1, r3
 800461c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004620:	400b      	ands	r3, r1
 8004622:	b299      	uxth	r1, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	430b      	orrs	r3, r1
 800462c:	b299      	uxth	r1, r3
 800462e:	4b75      	ldr	r3, [pc, #468]	; (8004804 <USB_ActivateEndpoint+0x2d4>)
 8004630:	430b      	orrs	r3, r1
 8004632:	b29b      	uxth	r3, r3
 8004634:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	7a9b      	ldrb	r3, [r3, #10]
 800463a:	2b00      	cmp	r3, #0
 800463c:	f040 80e8 	bne.w	8004810 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	785b      	ldrb	r3, [r3, #1]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d04c      	beq.n	80046e2 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800464e:	b29b      	uxth	r3, r3
 8004650:	461a      	mov	r2, r3
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4413      	add	r3, r2
 800465a:	005a      	lsls	r2, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004664:	461a      	mov	r2, r3
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	889b      	ldrh	r3, [r3, #4]
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	b29b      	uxth	r3, r3
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d013      	beq.n	80046b0 <USB_ActivateEndpoint+0x180>
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	441a      	add	r2, r3
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	b299      	uxth	r1, r3
 80046a0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80046a4:	400b      	ands	r3, r1
 80046a6:	b299      	uxth	r1, r3
 80046a8:	4b57      	ldr	r3, [pc, #348]	; (8004808 <USB_ActivateEndpoint+0x2d8>)
 80046aa:	430b      	orrs	r3, r1
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c6:	b29c      	uxth	r4, r3
 80046c8:	f084 0320 	eor.w	r3, r4, #32
 80046cc:	b29c      	uxth	r4, r3
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	441a      	add	r2, r3
 80046d8:	4b4a      	ldr	r3, [pc, #296]	; (8004804 <USB_ActivateEndpoint+0x2d4>)
 80046da:	4323      	orrs	r3, r4
 80046dc:	b29b      	uxth	r3, r3
 80046de:	8013      	strh	r3, [r2, #0]
 80046e0:	e1d9      	b.n	8004a96 <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	461a      	mov	r2, r3
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4413      	add	r3, r2
 80046f4:	3304      	adds	r3, #4
 80046f6:	005a      	lsls	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004700:	461a      	mov	r2, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	889b      	ldrh	r3, [r3, #4]
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	b29b      	uxth	r3, r3
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	6013      	str	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004714:	b29b      	uxth	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4413      	add	r3, r2
 8004720:	3306      	adds	r3, #6
 8004722:	005a      	lsls	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b3e      	cmp	r3, #62	; 0x3e
 8004734:	d918      	bls.n	8004768 <USB_ActivateEndpoint+0x238>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	81fb      	strh	r3, [r7, #14]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <USB_ActivateEndpoint+0x220>
 800474a:	89fb      	ldrh	r3, [r7, #14]
 800474c:	3b01      	subs	r3, #1
 800474e:	81fb      	strh	r3, [r7, #14]
 8004750:	89fb      	ldrh	r3, [r7, #14]
 8004752:	029b      	lsls	r3, r3, #10
 8004754:	b29b      	uxth	r3, r3
 8004756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800475a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800475e:	b29b      	uxth	r3, r3
 8004760:	461a      	mov	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	e012      	b.n	800478e <USB_ActivateEndpoint+0x25e>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	085b      	lsrs	r3, r3, #1
 800476e:	81fb      	strh	r3, [r7, #14]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <USB_ActivateEndpoint+0x252>
 800477c:	89fb      	ldrh	r3, [r7, #14]
 800477e:	3301      	adds	r3, #1
 8004780:	81fb      	strh	r3, [r7, #14]
 8004782:	89fb      	ldrh	r3, [r7, #14]
 8004784:	029b      	lsls	r3, r3, #10
 8004786:	b29b      	uxth	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d013      	beq.n	80047cc <USB_ActivateEndpoint+0x29c>
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	441a      	add	r2, r3
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	b299      	uxth	r1, r3
 80047bc:	f640 730f 	movw	r3, #3855	; 0xf0f
 80047c0:	400b      	ands	r3, r1
 80047c2:	b299      	uxth	r1, r3
 80047c4:	4b11      	ldr	r3, [pc, #68]	; (800480c <USB_ActivateEndpoint+0x2dc>)
 80047c6:	430b      	orrs	r3, r1
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e2:	b29c      	uxth	r4, r3
 80047e4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80047e8:	b29c      	uxth	r4, r3
 80047ea:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80047ee:	b29c      	uxth	r4, r3
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	441a      	add	r2, r3
 80047fa:	4b02      	ldr	r3, [pc, #8]	; (8004804 <USB_ActivateEndpoint+0x2d4>)
 80047fc:	4323      	orrs	r3, r4
 80047fe:	b29b      	uxth	r3, r3
 8004800:	8013      	strh	r3, [r2, #0]
 8004802:	e148      	b.n	8004a96 <USB_ActivateEndpoint+0x566>
 8004804:	ffff8080 	.word	0xffff8080
 8004808:	ffff80c0 	.word	0xffff80c0
 800480c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	441a      	add	r2, r3
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b299      	uxth	r1, r3
 8004828:	f640 630f 	movw	r3, #3599	; 0xe0f
 800482c:	400b      	ands	r3, r1
 800482e:	b299      	uxth	r1, r3
 8004830:	4b9c      	ldr	r3, [pc, #624]	; (8004aa4 <USB_ActivateEndpoint+0x574>)
 8004832:	430b      	orrs	r3, r1
 8004834:	b29b      	uxth	r3, r3
 8004836:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800483e:	b29b      	uxth	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	4413      	add	r3, r2
 800484a:	005a      	lsls	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004854:	461a      	mov	r2, r3
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	88db      	ldrh	r3, [r3, #6]
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	b29b      	uxth	r3, r3
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004868:	b29b      	uxth	r3, r3
 800486a:	461a      	mov	r2, r3
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	4413      	add	r3, r2
 8004874:	3304      	adds	r3, #4
 8004876:	005a      	lsls	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004880:	461a      	mov	r2, r3
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	891b      	ldrh	r3, [r3, #8]
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	b29b      	uxth	r3, r3
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	6013      	str	r3, [r2, #0]
    
    if (ep->is_in==0)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	785b      	ldrb	r3, [r3, #1]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f040 8083 	bne.w	800499e <USB_ActivateEndpoint+0x46e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d013      	beq.n	80048d6 <USB_ActivateEndpoint+0x3a6>
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	441a      	add	r2, r3
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b299      	uxth	r1, r3
 80048c6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80048ca:	400b      	ands	r3, r1
 80048cc:	b299      	uxth	r1, r3
 80048ce:	4b76      	ldr	r3, [pc, #472]	; (8004aa8 <USB_ActivateEndpoint+0x578>)
 80048d0:	430b      	orrs	r3, r1
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d013      	beq.n	8004914 <USB_ActivateEndpoint+0x3e4>
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	441a      	add	r2, r3
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b299      	uxth	r1, r3
 8004904:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004908:	400b      	ands	r3, r1
 800490a:	b299      	uxth	r1, r3
 800490c:	4b67      	ldr	r3, [pc, #412]	; (8004aac <USB_ActivateEndpoint+0x57c>)
 800490e:	430b      	orrs	r3, r1
 8004910:	b29b      	uxth	r3, r3
 8004912:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	441a      	add	r2, r3
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b299      	uxth	r1, r3
 800492c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004930:	400b      	ands	r3, r1
 8004932:	b299      	uxth	r1, r3
 8004934:	4b5d      	ldr	r3, [pc, #372]	; (8004aac <USB_ActivateEndpoint+0x57c>)
 8004936:	430b      	orrs	r3, r1
 8004938:	b29b      	uxth	r3, r3
 800493a:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b29b      	uxth	r3, r3
 800494a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	b29c      	uxth	r4, r3
 8004954:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004958:	b29c      	uxth	r4, r3
 800495a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800495e:	b29c      	uxth	r4, r3
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	4b51      	ldr	r3, [pc, #324]	; (8004ab0 <USB_ActivateEndpoint+0x580>)
 800496c:	4323      	orrs	r3, r4
 800496e:	b29b      	uxth	r3, r3
 8004970:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	b29b      	uxth	r3, r3
 8004980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004988:	b29c      	uxth	r4, r3
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	441a      	add	r2, r3
 8004994:	4b46      	ldr	r3, [pc, #280]	; (8004ab0 <USB_ActivateEndpoint+0x580>)
 8004996:	4323      	orrs	r3, r4
 8004998:	b29b      	uxth	r3, r3
 800499a:	8013      	strh	r3, [r2, #0]
 800499c:	e07b      	b.n	8004a96 <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d013      	beq.n	80049dc <USB_ActivateEndpoint+0x4ac>
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	441a      	add	r2, r3
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b299      	uxth	r1, r3
 80049cc:	f640 730f 	movw	r3, #3855	; 0xf0f
 80049d0:	400b      	ands	r3, r1
 80049d2:	b299      	uxth	r1, r3
 80049d4:	4b34      	ldr	r3, [pc, #208]	; (8004aa8 <USB_ActivateEndpoint+0x578>)
 80049d6:	430b      	orrs	r3, r1
 80049d8:	b29b      	uxth	r3, r3
 80049da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d013      	beq.n	8004a1a <USB_ActivateEndpoint+0x4ea>
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	441a      	add	r2, r3
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	b299      	uxth	r1, r3
 8004a0a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004a0e:	400b      	ands	r3, r1
 8004a10:	b299      	uxth	r1, r3
 8004a12:	4b26      	ldr	r3, [pc, #152]	; (8004aac <USB_ActivateEndpoint+0x57c>)
 8004a14:	430b      	orrs	r3, r1
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	441a      	add	r2, r3
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	b299      	uxth	r1, r3
 8004a32:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004a36:	400b      	ands	r3, r1
 8004a38:	b299      	uxth	r1, r3
 8004a3a:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <USB_ActivateEndpoint+0x578>)
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a58:	b29c      	uxth	r4, r3
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	441a      	add	r2, r3
 8004a64:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <USB_ActivateEndpoint+0x580>)
 8004a66:	4323      	orrs	r3, r4
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a82:	b29c      	uxth	r4, r3
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	441a      	add	r2, r3
 8004a8e:	4b08      	ldr	r3, [pc, #32]	; (8004ab0 <USB_ActivateEndpoint+0x580>)
 8004a90:	4323      	orrs	r3, r4
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc90      	pop	{r4, r7}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	ffff8180 	.word	0xffff8180
 8004aa8:	ffffc080 	.word	0xffffc080
 8004aac:	ffff80c0 	.word	0xffff80c0
 8004ab0:	ffff8080 	.word	0xffff8080

08004ab4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ab4:	b490      	push	{r4, r7}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	7a9b      	ldrb	r3, [r3, #10]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d16d      	bne.n	8004ba2 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	785b      	ldrb	r3, [r3, #1]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d034      	beq.n	8004b38 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d013      	beq.n	8004b0c <USB_DeactivateEndpoint+0x58>
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	441a      	add	r2, r3
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b299      	uxth	r1, r3
 8004afc:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004b00:	400b      	ands	r3, r1
 8004b02:	b299      	uxth	r1, r3
 8004b04:	4b68      	ldr	r3, [pc, #416]	; (8004ca8 <USB_DeactivateEndpoint+0x1f4>)
 8004b06:	430b      	orrs	r3, r1
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b22:	b29c      	uxth	r4, r3
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	441a      	add	r2, r3
 8004b2e:	4b5f      	ldr	r3, [pc, #380]	; (8004cac <USB_DeactivateEndpoint+0x1f8>)
 8004b30:	4323      	orrs	r3, r4
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	8013      	strh	r3, [r2, #0]
 8004b36:	e139      	b.n	8004dac <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d013      	beq.n	8004b76 <USB_DeactivateEndpoint+0xc2>
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b299      	uxth	r1, r3
 8004b66:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004b6a:	400b      	ands	r3, r1
 8004b6c:	b299      	uxth	r1, r3
 8004b6e:	4b50      	ldr	r3, [pc, #320]	; (8004cb0 <USB_DeactivateEndpoint+0x1fc>)
 8004b70:	430b      	orrs	r3, r1
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8c:	b29c      	uxth	r4, r3
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	441a      	add	r2, r3
 8004b98:	4b44      	ldr	r3, [pc, #272]	; (8004cac <USB_DeactivateEndpoint+0x1f8>)
 8004b9a:	4323      	orrs	r3, r4
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	8013      	strh	r3, [r2, #0]
 8004ba0:	e104      	b.n	8004dac <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	785b      	ldrb	r3, [r3, #1]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f040 8084 	bne.w	8004cb4 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d013      	beq.n	8004bea <USB_DeactivateEndpoint+0x136>
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	441a      	add	r2, r3
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	b299      	uxth	r1, r3
 8004bda:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004bde:	400b      	ands	r3, r1
 8004be0:	b299      	uxth	r1, r3
 8004be2:	4b33      	ldr	r3, [pc, #204]	; (8004cb0 <USB_DeactivateEndpoint+0x1fc>)
 8004be4:	430b      	orrs	r3, r1
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d013      	beq.n	8004c28 <USB_DeactivateEndpoint+0x174>
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	441a      	add	r2, r3
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b299      	uxth	r1, r3
 8004c18:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004c1c:	400b      	ands	r3, r1
 8004c1e:	b299      	uxth	r1, r3
 8004c20:	4b21      	ldr	r3, [pc, #132]	; (8004ca8 <USB_DeactivateEndpoint+0x1f4>)
 8004c22:	430b      	orrs	r3, r1
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	441a      	add	r2, r3
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	b299      	uxth	r1, r3
 8004c40:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004c44:	400b      	ands	r3, r1
 8004c46:	b299      	uxth	r1, r3
 8004c48:	4b17      	ldr	r3, [pc, #92]	; (8004ca8 <USB_DeactivateEndpoint+0x1f4>)
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c66:	b29c      	uxth	r4, r3
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	441a      	add	r2, r3
 8004c72:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <USB_DeactivateEndpoint+0x1f8>)
 8004c74:	4323      	orrs	r3, r4
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c90:	b29c      	uxth	r4, r3
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	441a      	add	r2, r3
 8004c9c:	4b03      	ldr	r3, [pc, #12]	; (8004cac <USB_DeactivateEndpoint+0x1f8>)
 8004c9e:	4323      	orrs	r3, r4
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	8013      	strh	r3, [r2, #0]
 8004ca4:	e082      	b.n	8004dac <USB_DeactivateEndpoint+0x2f8>
 8004ca6:	bf00      	nop
 8004ca8:	ffff80c0 	.word	0xffff80c0
 8004cac:	ffff8080 	.word	0xffff8080
 8004cb0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d013      	beq.n	8004cf2 <USB_DeactivateEndpoint+0x23e>
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	441a      	add	r2, r3
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b299      	uxth	r1, r3
 8004ce2:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004ce6:	400b      	ands	r3, r1
 8004ce8:	b299      	uxth	r1, r3
 8004cea:	4b33      	ldr	r3, [pc, #204]	; (8004db8 <USB_DeactivateEndpoint+0x304>)
 8004cec:	430b      	orrs	r3, r1
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d013      	beq.n	8004d30 <USB_DeactivateEndpoint+0x27c>
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b299      	uxth	r1, r3
 8004d20:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004d24:	400b      	ands	r3, r1
 8004d26:	b299      	uxth	r1, r3
 8004d28:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <USB_DeactivateEndpoint+0x308>)
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	441a      	add	r2, r3
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	b299      	uxth	r1, r3
 8004d48:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004d4c:	400b      	ands	r3, r1
 8004d4e:	b299      	uxth	r1, r3
 8004d50:	4b19      	ldr	r3, [pc, #100]	; (8004db8 <USB_DeactivateEndpoint+0x304>)
 8004d52:	430b      	orrs	r3, r1
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d6e:	b29c      	uxth	r4, r3
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	441a      	add	r2, r3
 8004d7a:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <USB_DeactivateEndpoint+0x30c>)
 8004d7c:	4323      	orrs	r3, r4
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d98:	b29c      	uxth	r4, r3
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	441a      	add	r2, r3
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <USB_DeactivateEndpoint+0x30c>)
 8004da6:	4323      	orrs	r3, r4
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc90      	pop	{r4, r7}
 8004db6:	4770      	bx	lr
 8004db8:	ffffc080 	.word	0xffffc080
 8004dbc:	ffff80c0 	.word	0xffff80c0
 8004dc0:	ffff8080 	.word	0xffff8080

08004dc4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8004dc4:	b590      	push	{r4, r7, lr}
 8004dc6:	b08d      	sub	sp, #52	; 0x34
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	785b      	ldrb	r3, [r3, #1]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	f040 8149 	bne.w	8005074 <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d909      	bls.n	8004e02 <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	699a      	ldr	r2, [r3, #24]
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	1ad2      	subs	r2, r2, r3
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	619a      	str	r2, [r3, #24]
 8004e00:	e005      	b.n	8004e0e <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	7a9b      	ldrb	r3, [r3, #10]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d11b      	bne.n	8004e4e <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	6959      	ldr	r1, [r3, #20]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	889a      	ldrh	r2, [r3, #4]
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fb7d 	bl	8005522 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4413      	add	r3, r2
 8004e3a:	3302      	adds	r3, #2
 8004e3c:	005a      	lsls	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e46:	461a      	mov	r2, r3
 8004e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	e0f6      	b.n	800503c <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d059      	beq.n	8004f18 <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	785b      	ldrb	r3, [r3, #1]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d13b      	bne.n	8004ee4 <USB_EPStartXfer+0x120>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3306      	adds	r3, #6
 8004e80:	005a      	lsls	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e8a:	61bb      	str	r3, [r7, #24]
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	2b3e      	cmp	r3, #62	; 0x3e
 8004e90:	d916      	bls.n	8004ec0 <USB_EPStartXfer+0xfc>
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	f003 031f 	and.w	r3, r3, #31
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d102      	bne.n	8004ea8 <USB_EPStartXfer+0xe4>
 8004ea2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ea8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004eaa:	029b      	lsls	r3, r3, #10
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	e027      	b.n	8004f10 <USB_EPStartXfer+0x14c>
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <USB_EPStartXfer+0x112>
 8004ed0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ed6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ed8:	029b      	lsls	r3, r3, #10
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	e015      	b.n	8004f10 <USB_EPStartXfer+0x14c>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	785b      	ldrb	r3, [r3, #1]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d111      	bne.n	8004f10 <USB_EPStartXfer+0x14c>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	4413      	add	r3, r2
 8004efe:	3302      	adds	r3, #2
 8004f00:	005a      	lsls	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	891b      	ldrh	r3, [r3, #8]
 8004f14:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f16:	e058      	b.n	8004fca <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	785b      	ldrb	r3, [r3, #1]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d13b      	bne.n	8004f98 <USB_EPStartXfer+0x1d4>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	4413      	add	r3, r2
 8004f32:	3302      	adds	r3, #2
 8004f34:	005a      	lsls	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	2b3e      	cmp	r3, #62	; 0x3e
 8004f44:	d916      	bls.n	8004f74 <USB_EPStartXfer+0x1b0>
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <USB_EPStartXfer+0x198>
 8004f56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f5e:	029b      	lsls	r3, r3, #10
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	e027      	b.n	8004fc4 <USB_EPStartXfer+0x200>
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <USB_EPStartXfer+0x1c6>
 8004f84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f86:	3301      	adds	r3, #1
 8004f88:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f8c:	029b      	lsls	r3, r3, #10
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	e015      	b.n	8004fc4 <USB_EPStartXfer+0x200>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	785b      	ldrb	r3, [r3, #1]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d111      	bne.n	8004fc4 <USB_EPStartXfer+0x200>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3302      	adds	r3, #2
 8004fb4:	005a      	lsls	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc2:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	88db      	ldrh	r3, [r3, #6]
 8004fc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6959      	ldr	r1, [r3, #20]
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 faa4 	bl	8005522 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	785b      	ldrb	r3, [r3, #1]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d114      	bne.n	800500c <USB_EPStartXfer+0x248>
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	441a      	add	r2, r3
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b299      	uxth	r1, r3
 8004ffa:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004ffe:	400b      	ands	r3, r1
 8005000:	b299      	uxth	r1, r3
 8005002:	4b92      	ldr	r3, [pc, #584]	; (800524c <USB_EPStartXfer+0x488>)
 8005004:	430b      	orrs	r3, r1
 8005006:	b29b      	uxth	r3, r3
 8005008:	8013      	strh	r3, [r2, #0]
 800500a:	e017      	b.n	800503c <USB_EPStartXfer+0x278>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d113      	bne.n	800503c <USB_EPStartXfer+0x278>
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	441a      	add	r2, r3
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	b299      	uxth	r1, r3
 800502c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005030:	400b      	ands	r3, r1
 8005032:	b299      	uxth	r1, r3
 8005034:	4b86      	ldr	r3, [pc, #536]	; (8005250 <USB_EPStartXfer+0x48c>)
 8005036:	430b      	orrs	r3, r1
 8005038:	b29b      	uxth	r3, r3
 800503a:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005052:	b29c      	uxth	r4, r3
 8005054:	f084 0310 	eor.w	r3, r4, #16
 8005058:	b29c      	uxth	r4, r3
 800505a:	f084 0320 	eor.w	r3, r4, #32
 800505e:	b29c      	uxth	r4, r3
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	441a      	add	r2, r3
 800506a:	4b7a      	ldr	r3, [pc, #488]	; (8005254 <USB_EPStartXfer+0x490>)
 800506c:	4323      	orrs	r3, r4
 800506e:	b29b      	uxth	r3, r3
 8005070:	8013      	strh	r3, [r2, #0]
 8005072:	e122      	b.n	80052ba <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	699a      	ldr	r2, [r3, #24]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	429a      	cmp	r2, r3
 800507e:	d909      	bls.n	8005094 <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	699a      	ldr	r2, [r3, #24]
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	1ad2      	subs	r2, r2, r3
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	619a      	str	r2, [r3, #24]
 8005092:	e005      	b.n	80050a0 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2200      	movs	r2, #0
 800509e:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	7a9b      	ldrb	r3, [r3, #10]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d13b      	bne.n	8005120 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	461a      	mov	r2, r3
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	4413      	add	r3, r2
 80050ba:	3306      	adds	r3, #6
 80050bc:	005a      	lsls	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	2b3e      	cmp	r3, #62	; 0x3e
 80050cc:	d916      	bls.n	80050fc <USB_EPStartXfer+0x338>
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d102      	bne.n	80050e4 <USB_EPStartXfer+0x320>
 80050de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050e0:	3b01      	subs	r3, #1
 80050e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80050e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050e6:	029b      	lsls	r3, r3, #10
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	e0c3      	b.n	8005284 <USB_EPStartXfer+0x4c0>
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	847b      	strh	r3, [r7, #34]	; 0x22
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <USB_EPStartXfer+0x34e>
 800510c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800510e:	3301      	adds	r3, #1
 8005110:	847b      	strh	r3, [r7, #34]	; 0x22
 8005112:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005114:	029b      	lsls	r3, r3, #10
 8005116:	b29b      	uxth	r3, r3
 8005118:	461a      	mov	r2, r3
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e0b1      	b.n	8005284 <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d13b      	bne.n	80051a0 <USB_EPStartXfer+0x3dc>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800512e:	b29b      	uxth	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4413      	add	r3, r2
 800513a:	3302      	adds	r3, #2
 800513c:	005a      	lsls	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	2b3e      	cmp	r3, #62	; 0x3e
 800514c:	d916      	bls.n	800517c <USB_EPStartXfer+0x3b8>
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	843b      	strh	r3, [r7, #32]
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	f003 031f 	and.w	r3, r3, #31
 800515a:	2b00      	cmp	r3, #0
 800515c:	d102      	bne.n	8005164 <USB_EPStartXfer+0x3a0>
 800515e:	8c3b      	ldrh	r3, [r7, #32]
 8005160:	3b01      	subs	r3, #1
 8005162:	843b      	strh	r3, [r7, #32]
 8005164:	8c3b      	ldrh	r3, [r7, #32]
 8005166:	029b      	lsls	r3, r3, #10
 8005168:	b29b      	uxth	r3, r3
 800516a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800516e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005172:	b29b      	uxth	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	e027      	b.n	80051cc <USB_EPStartXfer+0x408>
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	085b      	lsrs	r3, r3, #1
 8005180:	843b      	strh	r3, [r7, #32]
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <USB_EPStartXfer+0x3ce>
 800518c:	8c3b      	ldrh	r3, [r7, #32]
 800518e:	3301      	adds	r3, #1
 8005190:	843b      	strh	r3, [r7, #32]
 8005192:	8c3b      	ldrh	r3, [r7, #32]
 8005194:	029b      	lsls	r3, r3, #10
 8005196:	b29b      	uxth	r3, r3
 8005198:	461a      	mov	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	e015      	b.n	80051cc <USB_EPStartXfer+0x408>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	785b      	ldrb	r3, [r3, #1]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d111      	bne.n	80051cc <USB_EPStartXfer+0x408>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	4413      	add	r3, r2
 80051ba:	3302      	adds	r3, #2
 80051bc:	005a      	lsls	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051c6:	461a      	mov	r2, r3
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	785b      	ldrb	r3, [r3, #1]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d141      	bne.n	8005258 <USB_EPStartXfer+0x494>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051da:	b29b      	uxth	r3, r3
 80051dc:	461a      	mov	r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4413      	add	r3, r2
 80051e6:	3306      	adds	r3, #6
 80051e8:	005a      	lsls	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	2b3e      	cmp	r3, #62	; 0x3e
 80051f8:	d916      	bls.n	8005228 <USB_EPStartXfer+0x464>
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	095b      	lsrs	r3, r3, #5
 80051fe:	83fb      	strh	r3, [r7, #30]
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	f003 031f 	and.w	r3, r3, #31
 8005206:	2b00      	cmp	r3, #0
 8005208:	d102      	bne.n	8005210 <USB_EPStartXfer+0x44c>
 800520a:	8bfb      	ldrh	r3, [r7, #30]
 800520c:	3b01      	subs	r3, #1
 800520e:	83fb      	strh	r3, [r7, #30]
 8005210:	8bfb      	ldrh	r3, [r7, #30]
 8005212:	029b      	lsls	r3, r3, #10
 8005214:	b29b      	uxth	r3, r3
 8005216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800521a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800521e:	b29b      	uxth	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e02d      	b.n	8005284 <USB_EPStartXfer+0x4c0>
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	83fb      	strh	r3, [r7, #30]
 800522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <USB_EPStartXfer+0x47a>
 8005238:	8bfb      	ldrh	r3, [r7, #30]
 800523a:	3301      	adds	r3, #1
 800523c:	83fb      	strh	r3, [r7, #30]
 800523e:	8bfb      	ldrh	r3, [r7, #30]
 8005240:	029b      	lsls	r3, r3, #10
 8005242:	b29b      	uxth	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	e01b      	b.n	8005284 <USB_EPStartXfer+0x4c0>
 800524c:	ffff80c0 	.word	0xffff80c0
 8005250:	ffffc080 	.word	0xffffc080
 8005254:	ffff8080 	.word	0xffff8080
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d111      	bne.n	8005284 <USB_EPStartXfer+0x4c0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005266:	b29b      	uxth	r3, r3
 8005268:	461a      	mov	r2, r3
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4413      	add	r3, r2
 8005272:	3302      	adds	r3, #2
 8005274:	005a      	lsls	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800527e:	461a      	mov	r2, r3
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	b29c      	uxth	r4, r3
 800529c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80052a0:	b29c      	uxth	r4, r3
 80052a2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80052a6:	b29c      	uxth	r4, r3
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	441a      	add	r2, r3
 80052b2:	4b04      	ldr	r3, [pc, #16]	; (80052c4 <USB_EPStartXfer+0x500>)
 80052b4:	4323      	orrs	r3, r4
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3734      	adds	r7, #52	; 0x34
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd90      	pop	{r4, r7, pc}
 80052c4:	ffff8080 	.word	0xffff8080

080052c8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 80052c8:	b490      	push	{r4, r7}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d118      	bne.n	800530c <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 80052ec:	401c      	ands	r4, r3
 80052ee:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 80052f2:	f084 0410 	eor.w	r4, r4, #16
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	441a      	add	r2, r3
 8005300:	b2a1      	uxth	r1, r4
 8005302:	4b20      	ldr	r3, [pc, #128]	; (8005384 <USB_EPSetStall+0xbc>)
 8005304:	430b      	orrs	r3, r1
 8005306:	b29b      	uxth	r3, r3
 8005308:	8013      	strh	r3, [r2, #0]
 800530a:	e034      	b.n	8005376 <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	785b      	ldrb	r3, [r3, #1]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d018      	beq.n	8005346 <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532a:	b29c      	uxth	r4, r3
 800532c:	f084 0310 	eor.w	r3, r4, #16
 8005330:	b29c      	uxth	r4, r3
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	441a      	add	r2, r3
 800533c:	4b11      	ldr	r3, [pc, #68]	; (8005384 <USB_EPSetStall+0xbc>)
 800533e:	4323      	orrs	r3, r4
 8005340:	b29b      	uxth	r3, r3
 8005342:	8013      	strh	r3, [r2, #0]
 8005344:	e017      	b.n	8005376 <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535c:	b29c      	uxth	r4, r3
 800535e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005362:	b29c      	uxth	r4, r3
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	441a      	add	r2, r3
 800536e:	4b05      	ldr	r3, [pc, #20]	; (8005384 <USB_EPSetStall+0xbc>)
 8005370:	4323      	orrs	r3, r4
 8005372:	b29b      	uxth	r3, r3
 8005374:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bc90      	pop	{r4, r7}
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	ffff8080 	.word	0xffff8080

08005388 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005388:	b490      	push	{r4, r7}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	785b      	ldrb	r3, [r3, #1]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d03a      	beq.n	8005410 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d013      	beq.n	80053d8 <USB_EPClearStall+0x50>
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	441a      	add	r2, r3
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b299      	uxth	r1, r3
 80053c8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80053cc:	400b      	ands	r3, r1
 80053ce:	b299      	uxth	r1, r3
 80053d0:	4b2f      	ldr	r3, [pc, #188]	; (8005490 <USB_EPClearStall+0x108>)
 80053d2:	430b      	orrs	r3, r1
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ee:	b29c      	uxth	r4, r3
 80053f0:	f084 0310 	eor.w	r3, r4, #16
 80053f4:	b29c      	uxth	r4, r3
 80053f6:	f084 0320 	eor.w	r3, r4, #32
 80053fa:	b29c      	uxth	r4, r3
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	441a      	add	r2, r3
 8005406:	4b23      	ldr	r3, [pc, #140]	; (8005494 <USB_EPClearStall+0x10c>)
 8005408:	4323      	orrs	r3, r4
 800540a:	b29b      	uxth	r3, r3
 800540c:	8013      	strh	r3, [r2, #0]
 800540e:	e039      	b.n	8005484 <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29b      	uxth	r3, r3
 800541e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d013      	beq.n	800544e <USB_EPClearStall+0xc6>
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	441a      	add	r2, r3
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b299      	uxth	r1, r3
 800543e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005442:	400b      	ands	r3, r1
 8005444:	b299      	uxth	r1, r3
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <USB_EPClearStall+0x110>)
 8005448:	430b      	orrs	r3, r1
 800544a:	b29b      	uxth	r3, r3
 800544c:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b29b      	uxth	r3, r3
 800545c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005464:	b29c      	uxth	r4, r3
 8005466:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800546a:	b29c      	uxth	r4, r3
 800546c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005470:	b29c      	uxth	r4, r3
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	441a      	add	r2, r3
 800547c:	4b05      	ldr	r3, [pc, #20]	; (8005494 <USB_EPClearStall+0x10c>)
 800547e:	4323      	orrs	r3, r4
 8005480:	b29b      	uxth	r3, r3
 8005482:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bc90      	pop	{r4, r7}
 800548e:	4770      	bx	lr
 8005490:	ffff80c0 	.word	0xffff80c0
 8005494:	ffff8080 	.word	0xffff8080
 8005498:	ffffc080 	.word	0xffffc080

0800549c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d103      	bne.n	80054b6 <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2280      	movs	r2, #128	; 0x80
 80054b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr

080054c2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr

080054d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bc80      	pop	{r7}
 80054e8:	4770      	bx	lr

080054ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005500:	68fb      	ldr	r3, [r7, #12]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	bc80      	pop	{r7}
 800550a:	4770      	bx	lr

0800550c <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr

08005522 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005522:	b480      	push	{r7}
 8005524:	b08b      	sub	sp, #44	; 0x2c
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	4611      	mov	r1, r2
 800552e:	461a      	mov	r2, r3
 8005530:	460b      	mov	r3, r1
 8005532:	80fb      	strh	r3, [r7, #6]
 8005534:	4613      	mov	r3, r2
 8005536:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8005538:	88bb      	ldrh	r3, [r7, #4]
 800553a:	3301      	adds	r3, #1
 800553c:	105b      	asrs	r3, r3, #1
 800553e:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
 8005544:	2300      	movs	r3, #0
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 800554c:	2300      	movs	r3, #0
 800554e:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8005550:	88fb      	ldrh	r3, [r7, #6]
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	461a      	mov	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800555e:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
 8005564:	e01b      	b.n	800559e <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	3301      	adds	r3, #1
 8005570:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	021b      	lsls	r3, r3, #8
 8005578:	461a      	mov	r2, r3
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	1c9a      	adds	r2, r3, #2
 8005584:	623a      	str	r2, [r7, #32]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	b292      	uxth	r2, r2
 800558a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	3302      	adds	r3, #2
 8005590:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	3301      	adds	r3, #1
 8005596:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	3b01      	subs	r3, #1
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1e0      	bne.n	8005566 <USB_WritePMA+0x44>
  }
}
 80055a4:	bf00      	nop
 80055a6:	372c      	adds	r7, #44	; 0x2c
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bc80      	pop	{r7}
 80055ac:	4770      	bx	lr

080055ae <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b089      	sub	sp, #36	; 0x24
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	4611      	mov	r1, r2
 80055ba:	461a      	mov	r2, r3
 80055bc:	460b      	mov	r3, r1
 80055be:	80fb      	strh	r3, [r7, #6]
 80055c0:	4613      	mov	r3, r2
 80055c2:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80055c4:	88bb      	ldrh	r3, [r7, #4]
 80055c6:	3301      	adds	r3, #1
 80055c8:	105b      	asrs	r3, r3, #1
 80055ca:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80055d4:	88fb      	ldrh	r3, [r7, #6]
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	461a      	mov	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055e2:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	e00e      	b.n	8005608 <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	60ba      	str	r2, [r7, #8]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	1d11      	adds	r1, r2, #4
 80055f4:	61b9      	str	r1, [r7, #24]
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	b292      	uxth	r2, r2
 80055fa:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	3301      	adds	r3, #1
 8005600:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	3b01      	subs	r3, #1
 8005606:	61fb      	str	r3, [r7, #28]
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1ed      	bne.n	80055ea <USB_ReadPMA+0x3c>
  }
}
 800560e:	bf00      	nop
 8005610:	3724      	adds	r7, #36	; 0x24
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8005624:	2300      	movs	r3, #0
 8005626:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	7c1b      	ldrb	r3, [r3, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10e      	bne.n	800564e <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005634:	2202      	movs	r2, #2
 8005636:	2181      	movs	r1, #129	; 0x81
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 fc0f 	bl	8006e5c <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800563e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005642:	2202      	movs	r2, #2
 8005644:	2101      	movs	r1, #1
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f001 fc08 	bl	8006e5c <USBD_LL_OpenEP>
 800564c:	e00b      	b.n	8005666 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800564e:	2340      	movs	r3, #64	; 0x40
 8005650:	2202      	movs	r2, #2
 8005652:	2181      	movs	r1, #129	; 0x81
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f001 fc01 	bl	8006e5c <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800565a:	2340      	movs	r3, #64	; 0x40
 800565c:	2202      	movs	r2, #2
 800565e:	2101      	movs	r1, #1
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 fbfb 	bl	8006e5c <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8005666:	2308      	movs	r3, #8
 8005668:	2203      	movs	r2, #3
 800566a:	2182      	movs	r1, #130	; 0x82
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f001 fbf5 	bl	8006e5c <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005672:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005676:	f001 fdb5 	bl	80071e4 <USBD_static_malloc>
 800567a:	4602      	mov	r2, r0
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 800568c:	2301      	movs	r3, #1
 800568e:	73fb      	strb	r3, [r7, #15]
 8005690:	e026      	b.n	80056e0 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005698:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	7c1b      	ldrb	r3, [r3, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d109      	bne.n	80056d0 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056c6:	2101      	movs	r1, #1
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f001 fd3d 	bl	8007148 <USBD_LL_PrepareReceive>
 80056ce:	e007      	b.n	80056e0 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056d6:	2340      	movs	r3, #64	; 0x40
 80056d8:	2101      	movs	r1, #1
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f001 fd34 	bl	8007148 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	460b      	mov	r3, r1
 80056f4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 80056fa:	2181      	movs	r1, #129	; 0x81
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f001 fbeb 	bl	8006ed8 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8005702:	2101      	movs	r1, #1
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f001 fbe7 	bl	8006ed8 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800570a:	2182      	movs	r1, #130	; 0x82
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f001 fbe3 	bl	8006ed8 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00e      	beq.n	800573a <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800572c:	4618      	mov	r0, r3
 800572e:	f001 fd65 	bl	80071fc <USBD_static_free>
    pdev->pClassData = NULL;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 800573a:	7bfb      	ldrb	r3, [r7, #15]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005754:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800575e:	2b00      	cmp	r3, #0
 8005760:	d03a      	beq.n	80057d8 <USBD_CDC_Setup+0x94>
 8005762:	2b20      	cmp	r3, #32
 8005764:	d000      	beq.n	8005768 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8005766:	e043      	b.n	80057f0 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	88db      	ldrh	r3, [r3, #6]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d029      	beq.n	80057c4 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	b25b      	sxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	da11      	bge.n	800579e <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005786:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	88d2      	ldrh	r2, [r2, #6]
 800578c:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 800578e:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	88db      	ldrh	r3, [r3, #6]
 8005794:	461a      	mov	r2, r3
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f001 f80e 	bl	80067b8 <USBD_CtlSendData>
    break;
 800579c:	e029      	b.n	80057f2 <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	785a      	ldrb	r2, [r3, #1]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	88db      	ldrh	r3, [r3, #6]
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 80057b4:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	88db      	ldrh	r3, [r3, #6]
 80057ba:	461a      	mov	r2, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 f829 	bl	8006814 <USBD_CtlPrepareRx>
    break;
 80057c2:	e016      	b.n	80057f2 <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	7850      	ldrb	r0, [r2, #1]
 80057d0:	2200      	movs	r2, #0
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	4798      	blx	r3
    break;
 80057d6:	e00c      	b.n	80057f2 <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	785b      	ldrb	r3, [r3, #1]
 80057dc:	2b0a      	cmp	r3, #10
 80057de:	d001      	beq.n	80057e4 <USBD_CDC_Setup+0xa0>
 80057e0:	2b0b      	cmp	r3, #11
      break;
 80057e2:	e005      	b.n	80057f0 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 80057e4:	2201      	movs	r2, #1
 80057e6:	4905      	ldr	r1, [pc, #20]	; (80057fc <USBD_CDC_Setup+0xb8>)
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 ffe5 	bl	80067b8 <USBD_CtlSendData>
      break;
 80057ee:	bf00      	nop
    break;
 80057f0:	bf00      	nop
  }
  return USBD_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20000272 	.word	0x20000272

08005800 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005812:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800581a:	2b00      	cmp	r3, #0
 800581c:	d005      	beq.n	800582a <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	e000      	b.n	800582c <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 800582a:	2302      	movs	r3, #2
  }
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr

08005836 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8005836:	b580      	push	{r7, lr}
 8005838:	b084      	sub	sp, #16
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	460b      	mov	r3, r1
 8005840:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005848:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800584a:	78fb      	ldrb	r3, [r7, #3]
 800584c:	4619      	mov	r1, r3
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f001 fcb4 	bl	80071bc <USBD_LL_GetRxDataSize>
 8005854:	4602      	mov	r2, r0
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00d      	beq.n	8005882 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800587a:	4611      	mov	r1, r2
 800587c:	4798      	blx	r3

    return USBD_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	e000      	b.n	8005884 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005882:	2302      	movs	r3, #2
  }
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800589a:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d015      	beq.n	80058d2 <USBD_CDC_EP0_RxReady+0x46>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80058ac:	2bff      	cmp	r3, #255	; 0xff
 80058ae:	d010      	beq.n	80058d2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80058be:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80058c6:	b292      	uxth	r2, r2
 80058c8:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	22ff      	movs	r2, #255	; 0xff
 80058ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2243      	movs	r2, #67	; 0x43
 80058e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80058ea:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bc80      	pop	{r7}
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000118 	.word	0x20000118

080058fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2243      	movs	r2, #67	; 0x43
 8005908:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800590a:	4b03      	ldr	r3, [pc, #12]	; (8005918 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800590c:	4618      	mov	r0, r3
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	200000d4 	.word	0x200000d4

0800591c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2243      	movs	r2, #67	; 0x43
 8005928:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800592a:	4b03      	ldr	r3, [pc, #12]	; (8005938 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	2000015c 	.word	0x2000015c

0800593c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	220a      	movs	r2, #10
 8005948:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800594a:	4b03      	ldr	r3, [pc, #12]	; (8005958 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800594c:	4618      	mov	r0, r3
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	20000090 	.word	0x20000090

0800595c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005966:	2302      	movs	r3, #2
 8005968:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8005978:	2300      	movs	r3, #0
 800597a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr

08005988 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	4613      	mov	r3, r2
 8005994:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800599c:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80059a6:	88fa      	ldrh	r2, [r7, #6]
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bc80      	pop	{r7}
 80059b8:	4770      	bx	lr

080059ba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80059ca:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80059ee:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d017      	beq.n	8005a2a <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d110      	bne.n	8005a26 <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2181      	movs	r1, #129	; 0x81
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 fb59 	bl	80070d4 <USBD_LL_Transmit>
      
      return USBD_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	e002      	b.n	8005a2c <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 8005a2a:	2302      	movs	r3, #2
  }
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a42:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d017      	beq.n	8005a7e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	7c1b      	ldrb	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a60:	2101      	movs	r1, #1
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f001 fb70 	bl	8007148 <USBD_LL_PrepareReceive>
 8005a68:	e007      	b.n	8005a7a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a70:	2340      	movs	r3, #64	; 0x40
 8005a72:	2101      	movs	r1, #1
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 fb67 	bl	8007148 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e000      	b.n	8005a80 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005a7e:	2302      	movs	r3, #2
  }
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	4613      	mov	r3, r2
 8005a94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e01a      	b.n	8005ad6 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	79fa      	ldrb	r2, [r7, #7]
 8005acc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f001 f936 	bl	8006d40 <USBD_LL_Init>
  
  return USBD_OK; 
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b085      	sub	sp, #20
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d006      	beq.n	8005b00 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]
 8005afe:	e001      	b.n	8005b04 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8005b00:	2302      	movs	r3, #2
 8005b02:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 f96d 	bl	8006df8 <USBD_LL_Start>
  
  return USBD_OK;  
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bc80      	pop	{r7}
 8005b3a:	4770      	bx	lr

08005b3c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005b48:	2302      	movs	r3, #2
 8005b4a:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00c      	beq.n	8005b70 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	78fa      	ldrb	r2, [r7, #3]
 8005b60:	4611      	mov	r1, r2
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	4798      	blx	r3
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	460b      	mov	r3, r1
 8005b84:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	78fa      	ldrb	r2, [r7, #3]
 8005b90:	4611      	mov	r1, r2
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	4798      	blx	r3
  return USBD_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fd59 	bl	800666a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005bd4:	f003 031f 	and.w	r3, r3, #31
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d00b      	beq.n	8005bf4 <USBD_LL_SetupStage+0x54>
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d011      	beq.n	8005c04 <USBD_LL_SetupStage+0x64>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d117      	bne.n	8005c14 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f987 	bl	8005f00 <USBD_StdDevReq>
    break;
 8005bf2:	e01a      	b.n	8005c2a <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f9cf 	bl	8005fa0 <USBD_StdItfReq>
    break;
 8005c02:	e012      	b.n	8005c2a <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f9fa 	bl	8006006 <USBD_StdEPReq>
    break;
 8005c12:	e00a      	b.n	8005c2a <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005c1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	4619      	mov	r1, r3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f001 f98e 	bl	8006f44 <USBD_LL_StallEP>
    break;
 8005c28:	bf00      	nop
  }  
  return USBD_OK;  
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8005c42:	7afb      	ldrb	r3, [r7, #11]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d138      	bne.n	8005cba <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8005c4e:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d142      	bne.n	8005ce0 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d914      	bls.n	8005c90 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	1ad2      	subs	r2, r2, r3
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	bf28      	it	cs
 8005c80:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 fde1 	bl	8006850 <USBD_CtlContinueRx>
 8005c8e:	e027      	b.n	8005ce0 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00a      	beq.n	8005cb2 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d105      	bne.n	8005cb2 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 fdde 	bl	8006874 <USBD_CtlSendStatus>
 8005cb8:	e012      	b.n	8005ce0 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00c      	beq.n	8005ce0 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d107      	bne.n	8005ce0 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	7afa      	ldrb	r2, [r7, #11]
 8005cda:	4611      	mov	r1, r2
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	4798      	blx	r3
  }  
  return USBD_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b086      	sub	sp, #24
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	607a      	str	r2, [r7, #4]
 8005cf6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8005cf8:	7afb      	ldrb	r3, [r7, #11]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d16c      	bne.n	8005dd8 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3314      	adds	r3, #20
 8005d02:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d157      	bne.n	8005dbe <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d915      	bls.n	8005d46 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	1ad2      	subs	r2, r2, r3
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	461a      	mov	r2, r3
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fd5c 	bl	80067f0 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005d38:	2300      	movs	r3, #0
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f001 fa02 	bl	8007148 <USBD_LL_PrepareReceive>
 8005d44:	e03b      	b.n	8005dbe <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	68d2      	ldr	r2, [r2, #12]
 8005d4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d52:	fb02 f201 	mul.w	r2, r2, r1
 8005d56:	1a9b      	subs	r3, r3, r2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d11c      	bne.n	8005d96 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d316      	bcc.n	8005d96 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d20f      	bcs.n	8005d96 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8005d76:	2200      	movs	r2, #0
 8005d78:	2100      	movs	r1, #0
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 fd38 	bl	80067f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005d88:	2300      	movs	r3, #0
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f001 f9da 	bl	8007148 <USBD_LL_PrepareReceive>
 8005d94:	e013      	b.n	8005dbe <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d105      	bne.n	8005db8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 fd6e 	bl	800689a <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d11a      	bne.n	8005dfe <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f7ff fead 	bl	8005b28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8005dd6:	e012      	b.n	8005dfe <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00c      	beq.n	8005dfe <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d107      	bne.n	8005dfe <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	7afa      	ldrb	r2, [r7, #11]
 8005df8:	4611      	mov	r1, r2
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	4798      	blx	r3
  }  
  return USBD_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8005e10:	2340      	movs	r3, #64	; 0x40
 8005e12:	2200      	movs	r2, #0
 8005e14:	2100      	movs	r1, #0
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f001 f820 	bl	8006e5c <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2240      	movs	r2, #64	; 0x40
 8005e20:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8005e24:	2340      	movs	r3, #64	; 0x40
 8005e26:	2200      	movs	r2, #0
 8005e28:	2180      	movs	r1, #128	; 0x80
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f001 f816 	bl	8006e5c <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2240      	movs	r2, #64	; 0x40
 8005e34:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d009      	beq.n	8005e5c <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6852      	ldr	r2, [r2, #4]
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	4611      	mov	r1, r2
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	4798      	blx	r3
 
  
  return USBD_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	78fa      	ldrb	r2, [r7, #3]
 8005e76:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr

08005e84 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2204      	movs	r2, #4
 8005e9c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr

08005eac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bc80      	pop	{r7}
 8005eca:	4770      	bx	lr

08005ecc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d10b      	bne.n	8005ef6 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d005      	beq.n	8005ef6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	785b      	ldrb	r3, [r3, #1]
 8005f12:	2b09      	cmp	r3, #9
 8005f14:	d839      	bhi.n	8005f8a <USBD_StdDevReq+0x8a>
 8005f16:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <USBD_StdDevReq+0x1c>)
 8005f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1c:	08005f6d 	.word	0x08005f6d
 8005f20:	08005f81 	.word	0x08005f81
 8005f24:	08005f8b 	.word	0x08005f8b
 8005f28:	08005f77 	.word	0x08005f77
 8005f2c:	08005f8b 	.word	0x08005f8b
 8005f30:	08005f4f 	.word	0x08005f4f
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005f8b 	.word	0x08005f8b
 8005f3c:	08005f63 	.word	0x08005f63
 8005f40:	08005f59 	.word	0x08005f59
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8005f44:	6839      	ldr	r1, [r7, #0]
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f936 	bl	80061b8 <USBD_GetDescriptor>
    break;
 8005f4c:	e022      	b.n	8005f94 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fa25 	bl	80063a0 <USBD_SetAddress>
    break;
 8005f56:	e01d      	b.n	8005f94 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fa5e 	bl	800641c <USBD_SetConfig>
    break;
 8005f60:	e018      	b.n	8005f94 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fae1 	bl	800652c <USBD_GetConfig>
    break;
 8005f6a:	e013      	b.n	8005f94 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fb0e 	bl	8006590 <USBD_GetStatus>
    break;
 8005f74:	e00e      	b.n	8005f94 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fb33 	bl	80065e4 <USBD_SetFeature>
    break;
 8005f7e:	e009      	b.n	8005f94 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fb49 	bl	800661a <USBD_ClrFeature>
    break;
 8005f88:	e004      	b.n	8005f94 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8005f8a:	6839      	ldr	r1, [r7, #0]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fba8 	bl	80066e2 <USBD_CtlError>
    break;
 8005f92:	bf00      	nop
  }
  
  return ret;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop

08005fa0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8005faa:	2300      	movs	r3, #0
 8005fac:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d11b      	bne.n	8005ff0 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	889b      	ldrh	r3, [r3, #4]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d811      	bhi.n	8005fe6 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	88db      	ldrh	r3, [r3, #6]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d110      	bne.n	8005ffa <USBD_StdItfReq+0x5a>
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10d      	bne.n	8005ffa <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fc48 	bl	8006874 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8005fe4:	e009      	b.n	8005ffa <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fb7a 	bl	80066e2 <USBD_CtlError>
    break;
 8005fee:	e004      	b.n	8005ffa <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fb75 	bl	80066e2 <USBD_CtlError>
    break;
 8005ff8:	e000      	b.n	8005ffc <USBD_StdItfReq+0x5c>
    break;
 8005ffa:	bf00      	nop
  }
  return USBD_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8006010:	2300      	movs	r3, #0
 8006012:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	889b      	ldrh	r3, [r3, #4]
 8006018:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006022:	2b20      	cmp	r3, #32
 8006024:	d108      	bne.n	8006038 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	6839      	ldr	r1, [r7, #0]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	4798      	blx	r3
    
    return USBD_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	e0ba      	b.n	80061ae <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	785b      	ldrb	r3, [r3, #1]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d039      	beq.n	80060b4 <USBD_StdEPReq+0xae>
 8006040:	2b03      	cmp	r3, #3
 8006042:	d002      	beq.n	800604a <USBD_StdEPReq+0x44>
 8006044:	2b00      	cmp	r3, #0
 8006046:	d06b      	beq.n	8006120 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8006048:	e0b0      	b.n	80061ac <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006050:	2b02      	cmp	r3, #2
 8006052:	d002      	beq.n	800605a <USBD_StdEPReq+0x54>
 8006054:	2b03      	cmp	r3, #3
 8006056:	d00c      	beq.n	8006072 <USBD_StdEPReq+0x6c>
 8006058:	e025      	b.n	80060a6 <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800605a:	7bbb      	ldrb	r3, [r7, #14]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d027      	beq.n	80060b0 <USBD_StdEPReq+0xaa>
 8006060:	7bbb      	ldrb	r3, [r7, #14]
 8006062:	2b80      	cmp	r3, #128	; 0x80
 8006064:	d024      	beq.n	80060b0 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8006066:	7bbb      	ldrb	r3, [r7, #14]
 8006068:	4619      	mov	r1, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 ff6a 	bl	8006f44 <USBD_LL_StallEP>
      break;	
 8006070:	e01e      	b.n	80060b0 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	885b      	ldrh	r3, [r3, #2]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10a      	bne.n	8006090 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800607a:	7bbb      	ldrb	r3, [r7, #14]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d007      	beq.n	8006090 <USBD_StdEPReq+0x8a>
 8006080:	7bbb      	ldrb	r3, [r7, #14]
 8006082:	2b80      	cmp	r3, #128	; 0x80
 8006084:	d004      	beq.n	8006090 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8006086:	7bbb      	ldrb	r3, [r7, #14]
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 ff5a 	bl	8006f44 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fbe8 	bl	8006874 <USBD_CtlSendStatus>
      break;
 80060a4:	e005      	b.n	80060b2 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fb1a 	bl	80066e2 <USBD_CtlError>
      break;    
 80060ae:	e000      	b.n	80060b2 <USBD_StdEPReq+0xac>
      break;	
 80060b0:	bf00      	nop
    break;
 80060b2:	e07b      	b.n	80061ac <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d002      	beq.n	80060c4 <USBD_StdEPReq+0xbe>
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d00c      	beq.n	80060dc <USBD_StdEPReq+0xd6>
 80060c2:	e024      	b.n	800610e <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80060c4:	7bbb      	ldrb	r3, [r7, #14]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d026      	beq.n	8006118 <USBD_StdEPReq+0x112>
 80060ca:	7bbb      	ldrb	r3, [r7, #14]
 80060cc:	2b80      	cmp	r3, #128	; 0x80
 80060ce:	d023      	beq.n	8006118 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 80060d0:	7bbb      	ldrb	r3, [r7, #14]
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 ff35 	bl	8006f44 <USBD_LL_StallEP>
      break;	
 80060da:	e01d      	b.n	8006118 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	885b      	ldrh	r3, [r3, #2]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d11b      	bne.n	800611c <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 80060e4:	7bbb      	ldrb	r3, [r7, #14]
 80060e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80060ee:	7bbb      	ldrb	r3, [r7, #14]
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 ff5c 	bl	8006fb0 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fbb4 	bl	8006874 <USBD_CtlSendStatus>
      break;
 800610c:	e006      	b.n	800611c <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fae6 	bl	80066e2 <USBD_CtlError>
      break;    
 8006116:	e002      	b.n	800611e <USBD_StdEPReq+0x118>
      break;	
 8006118:	bf00      	nop
 800611a:	e047      	b.n	80061ac <USBD_StdEPReq+0x1a6>
      break;
 800611c:	bf00      	nop
    break;
 800611e:	e045      	b.n	80061ac <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006126:	2b02      	cmp	r3, #2
 8006128:	d002      	beq.n	8006130 <USBD_StdEPReq+0x12a>
 800612a:	2b03      	cmp	r3, #3
 800612c:	d00b      	beq.n	8006146 <USBD_StdEPReq+0x140>
 800612e:	e036      	b.n	800619e <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006136:	2b00      	cmp	r3, #0
 8006138:	d036      	beq.n	80061a8 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 800613a:	7bbb      	ldrb	r3, [r7, #14]
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 ff00 	bl	8006f44 <USBD_LL_StallEP>
      break;	
 8006144:	e030      	b.n	80061a8 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8006146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800614a:	2b00      	cmp	r3, #0
 800614c:	da08      	bge.n	8006160 <USBD_StdEPReq+0x15a>
 800614e:	7bbb      	ldrb	r3, [r7, #14]
 8006150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006154:	3301      	adds	r3, #1
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	4413      	add	r3, r2
 800615c:	3304      	adds	r3, #4
 800615e:	e007      	b.n	8006170 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8006160:	7bbb      	ldrb	r3, [r7, #14]
 8006162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8006166:	3310      	adds	r3, #16
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	4413      	add	r3, r2
 800616e:	3304      	adds	r3, #4
 8006170:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006172:	7bbb      	ldrb	r3, [r7, #14]
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 ff50 	bl	800701c <USBD_LL_IsStallEP>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2201      	movs	r2, #1
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	e002      	b.n	8006190 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8006190:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8006192:	2202      	movs	r2, #2
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fb0e 	bl	80067b8 <USBD_CtlSendData>
      break;
 800619c:	e005      	b.n	80061aa <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fa9e 	bl	80066e2 <USBD_CtlError>
      break;
 80061a6:	e000      	b.n	80061aa <USBD_StdEPReq+0x1a4>
      break;	
 80061a8:	bf00      	nop
    break;
 80061aa:	bf00      	nop
  }
  return ret;
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	885b      	ldrh	r3, [r3, #2]
 80061c6:	0a1b      	lsrs	r3, r3, #8
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	3b01      	subs	r3, #1
 80061cc:	2b06      	cmp	r3, #6
 80061ce:	f200 80c9 	bhi.w	8006364 <USBD_GetDescriptor+0x1ac>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <USBD_GetDescriptor+0x20>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	080061f5 	.word	0x080061f5
 80061dc:	0800620d 	.word	0x0800620d
 80061e0:	0800624d 	.word	0x0800624d
 80061e4:	08006365 	.word	0x08006365
 80061e8:	08006365 	.word	0x08006365
 80061ec:	08006311 	.word	0x08006311
 80061f0:	08006337 	.word	0x08006337
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	7c12      	ldrb	r2, [r2, #16]
 8006200:	f107 010a 	add.w	r1, r7, #10
 8006204:	4610      	mov	r0, r2
 8006206:	4798      	blx	r3
 8006208:	60f8      	str	r0, [r7, #12]
    break;
 800620a:	e0b0      	b.n	800636e <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	7c1b      	ldrb	r3, [r3, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10d      	bne.n	8006230 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800621a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621c:	f107 020a 	add.w	r2, r7, #10
 8006220:	4610      	mov	r0, r2
 8006222:	4798      	blx	r3
 8006224:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3301      	adds	r3, #1
 800622a:	2202      	movs	r2, #2
 800622c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800622e:	e09e      	b.n	800636e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	f107 020a 	add.w	r2, r7, #10
 800623c:	4610      	mov	r0, r2
 800623e:	4798      	blx	r3
 8006240:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3301      	adds	r3, #1
 8006246:	2202      	movs	r2, #2
 8006248:	701a      	strb	r2, [r3, #0]
    break;
 800624a:	e090      	b.n	800636e <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	885b      	ldrh	r3, [r3, #2]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b05      	cmp	r3, #5
 8006254:	d856      	bhi.n	8006304 <USBD_GetDescriptor+0x14c>
 8006256:	a201      	add	r2, pc, #4	; (adr r2, 800625c <USBD_GetDescriptor+0xa4>)
 8006258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625c:	08006275 	.word	0x08006275
 8006260:	0800628d 	.word	0x0800628d
 8006264:	080062a5 	.word	0x080062a5
 8006268:	080062bd 	.word	0x080062bd
 800626c:	080062d5 	.word	0x080062d5
 8006270:	080062ed 	.word	0x080062ed
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	7c12      	ldrb	r2, [r2, #16]
 8006280:	f107 010a 	add.w	r1, r7, #10
 8006284:	4610      	mov	r0, r2
 8006286:	4798      	blx	r3
 8006288:	60f8      	str	r0, [r7, #12]
      break;
 800628a:	e040      	b.n	800630e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	7c12      	ldrb	r2, [r2, #16]
 8006298:	f107 010a 	add.w	r1, r7, #10
 800629c:	4610      	mov	r0, r2
 800629e:	4798      	blx	r3
 80062a0:	60f8      	str	r0, [r7, #12]
      break;
 80062a2:	e034      	b.n	800630e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	7c12      	ldrb	r2, [r2, #16]
 80062b0:	f107 010a 	add.w	r1, r7, #10
 80062b4:	4610      	mov	r0, r2
 80062b6:	4798      	blx	r3
 80062b8:	60f8      	str	r0, [r7, #12]
      break;
 80062ba:	e028      	b.n	800630e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	7c12      	ldrb	r2, [r2, #16]
 80062c8:	f107 010a 	add.w	r1, r7, #10
 80062cc:	4610      	mov	r0, r2
 80062ce:	4798      	blx	r3
 80062d0:	60f8      	str	r0, [r7, #12]
      break;
 80062d2:	e01c      	b.n	800630e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	7c12      	ldrb	r2, [r2, #16]
 80062e0:	f107 010a 	add.w	r1, r7, #10
 80062e4:	4610      	mov	r0, r2
 80062e6:	4798      	blx	r3
 80062e8:	60f8      	str	r0, [r7, #12]
      break;
 80062ea:	e010      	b.n	800630e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	7c12      	ldrb	r2, [r2, #16]
 80062f8:	f107 010a 	add.w	r1, r7, #10
 80062fc:	4610      	mov	r0, r2
 80062fe:	4798      	blx	r3
 8006300:	60f8      	str	r0, [r7, #12]
      break;
 8006302:	e004      	b.n	800630e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f9eb 	bl	80066e2 <USBD_CtlError>
      return;
 800630c:	e044      	b.n	8006398 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 800630e:	e02e      	b.n	800636e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	7c1b      	ldrb	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d109      	bne.n	800632c <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800631e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006320:	f107 020a 	add.w	r2, r7, #10
 8006324:	4610      	mov	r0, r2
 8006326:	4798      	blx	r3
 8006328:	60f8      	str	r0, [r7, #12]
      break;
 800632a:	e020      	b.n	800636e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f9d7 	bl	80066e2 <USBD_CtlError>
      return;
 8006334:	e030      	b.n	8006398 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	7c1b      	ldrb	r3, [r3, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10d      	bne.n	800635a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006346:	f107 020a 	add.w	r2, r7, #10
 800634a:	4610      	mov	r0, r2
 800634c:	4798      	blx	r3
 800634e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	3301      	adds	r3, #1
 8006354:	2207      	movs	r2, #7
 8006356:	701a      	strb	r2, [r3, #0]
      break; 
 8006358:	e009      	b.n	800636e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f9c0 	bl	80066e2 <USBD_CtlError>
      return;
 8006362:	e019      	b.n	8006398 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f9bb 	bl	80066e2 <USBD_CtlError>
    return;
 800636c:	e014      	b.n	8006398 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800636e:	897b      	ldrh	r3, [r7, #10]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d011      	beq.n	8006398 <USBD_GetDescriptor+0x1e0>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	88db      	ldrh	r3, [r3, #6]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00d      	beq.n	8006398 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	88da      	ldrh	r2, [r3, #6]
 8006380:	897b      	ldrh	r3, [r7, #10]
 8006382:	4293      	cmp	r3, r2
 8006384:	bf28      	it	cs
 8006386:	4613      	movcs	r3, r2
 8006388:	b29b      	uxth	r3, r3
 800638a:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 800638c:	897b      	ldrh	r3, [r7, #10]
 800638e:	461a      	mov	r2, r3
 8006390:	68f9      	ldr	r1, [r7, #12]
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fa10 	bl	80067b8 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop

080063a0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	889b      	ldrh	r3, [r3, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d12c      	bne.n	800640c <USBD_SetAddress+0x6c>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	88db      	ldrh	r3, [r3, #6]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d128      	bne.n	800640c <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	885b      	ldrh	r3, [r3, #2]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063c4:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d104      	bne.n	80063da <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f985 	bl	80066e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80063d8:	e01c      	b.n	8006414 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	7bfa      	ldrb	r2, [r7, #15]
 80063de:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fe3e 	bl	8007068 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fa41 	bl	8006874 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d004      	beq.n	8006402 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006400:	e008      	b.n	8006414 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800640a:	e003      	b.n	8006414 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f967 	bl	80066e2 <USBD_CtlError>
  } 
}
 8006414:	bf00      	nop
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	885b      	ldrh	r3, [r3, #2]
 800642a:	b2da      	uxtb	r2, r3
 800642c:	4b3e      	ldr	r3, [pc, #248]	; (8006528 <USBD_SetConfig+0x10c>)
 800642e:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8006430:	4b3d      	ldr	r3, [pc, #244]	; (8006528 <USBD_SetConfig+0x10c>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d904      	bls.n	8006442 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f951 	bl	80066e2 <USBD_CtlError>
 8006440:	e06f      	b.n	8006522 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006448:	2b02      	cmp	r3, #2
 800644a:	d002      	beq.n	8006452 <USBD_SetConfig+0x36>
 800644c:	2b03      	cmp	r3, #3
 800644e:	d023      	beq.n	8006498 <USBD_SetConfig+0x7c>
 8006450:	e062      	b.n	8006518 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8006452:	4b35      	ldr	r3, [pc, #212]	; (8006528 <USBD_SetConfig+0x10c>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d01a      	beq.n	8006490 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800645a:	4b33      	ldr	r3, [pc, #204]	; (8006528 <USBD_SetConfig+0x10c>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2203      	movs	r2, #3
 8006468:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800646c:	4b2e      	ldr	r3, [pc, #184]	; (8006528 <USBD_SetConfig+0x10c>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7ff fb62 	bl	8005b3c <USBD_SetClassConfig>
 8006478:	4603      	mov	r3, r0
 800647a:	2b02      	cmp	r3, #2
 800647c:	d104      	bne.n	8006488 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f92e 	bl	80066e2 <USBD_CtlError>
          return;
 8006486:	e04c      	b.n	8006522 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f9f3 	bl	8006874 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800648e:	e048      	b.n	8006522 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f9ef 	bl	8006874 <USBD_CtlSendStatus>
      break;
 8006496:	e044      	b.n	8006522 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8006498:	4b23      	ldr	r3, [pc, #140]	; (8006528 <USBD_SetConfig+0x10c>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d112      	bne.n	80064c6 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80064a8:	4b1f      	ldr	r3, [pc, #124]	; (8006528 <USBD_SetConfig+0x10c>)
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	461a      	mov	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80064b2:	4b1d      	ldr	r3, [pc, #116]	; (8006528 <USBD_SetConfig+0x10c>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff fb5e 	bl	8005b7a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f9d8 	bl	8006874 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80064c4:	e02d      	b.n	8006522 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 80064c6:	4b18      	ldr	r3, [pc, #96]	; (8006528 <USBD_SetConfig+0x10c>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d01d      	beq.n	8006510 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7ff fb4c 	bl	8005b7a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80064e2:	4b11      	ldr	r3, [pc, #68]	; (8006528 <USBD_SetConfig+0x10c>)
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80064ec:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <USBD_SetConfig+0x10c>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff fb22 	bl	8005b3c <USBD_SetClassConfig>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d104      	bne.n	8006508 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f8ee 	bl	80066e2 <USBD_CtlError>
          return;
 8006506:	e00c      	b.n	8006522 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f9b3 	bl	8006874 <USBD_CtlSendStatus>
      break;
 800650e:	e008      	b.n	8006522 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f9af 	bl	8006874 <USBD_CtlSendStatus>
      break;
 8006516:	e004      	b.n	8006522 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f8e1 	bl	80066e2 <USBD_CtlError>
      break;
 8006520:	bf00      	nop
    }
  }
}
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	20000273 	.word	0x20000273

0800652c <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	88db      	ldrh	r3, [r3, #6]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d004      	beq.n	8006548 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f8ce 	bl	80066e2 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8006546:	e01f      	b.n	8006588 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800654e:	2b02      	cmp	r3, #2
 8006550:	d002      	beq.n	8006558 <USBD_GetConfig+0x2c>
 8006552:	2b03      	cmp	r3, #3
 8006554:	d00b      	beq.n	800656e <USBD_GetConfig+0x42>
 8006556:	e012      	b.n	800657e <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8006562:	2201      	movs	r2, #1
 8006564:	4619      	mov	r1, r3
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f926 	bl	80067b8 <USBD_CtlSendData>
      break;
 800656c:	e00c      	b.n	8006588 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8006572:	2201      	movs	r2, #1
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f91e 	bl	80067b8 <USBD_CtlSendData>
      break;
 800657c:	e004      	b.n	8006588 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f8ae 	bl	80066e2 <USBD_CtlError>
      break;
 8006586:	bf00      	nop
}
 8006588:	bf00      	nop
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80065a0:	3b02      	subs	r3, #2
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d815      	bhi.n	80065d2 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d005      	beq.n	80065c2 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f043 0202 	orr.w	r2, r3, #2
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 80065c6:	2202      	movs	r2, #2
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f8f4 	bl	80067b8 <USBD_CtlSendData>
                      2);
    break;
 80065d0:	e004      	b.n	80065dc <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 80065d2:	6839      	ldr	r1, [r7, #0]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f884 	bl	80066e2 <USBD_CtlError>
    break;
 80065da:	bf00      	nop
  }
}
 80065dc:	bf00      	nop
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	885b      	ldrh	r3, [r3, #2]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d10d      	bne.n	8006612 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f931 	bl	8006874 <USBD_CtlSendStatus>
  }

}
 8006612:	bf00      	nop
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800662a:	3b02      	subs	r3, #2
 800662c:	2b01      	cmp	r3, #1
 800662e:	d812      	bhi.n	8006656 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	885b      	ldrh	r3, [r3, #2]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d113      	bne.n	8006660 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f910 	bl	8006874 <USBD_CtlSendStatus>
    }
    break;
 8006654:	e004      	b.n	8006660 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f842 	bl	80066e2 <USBD_CtlError>
    break;
 800665e:	e000      	b.n	8006662 <USBD_ClrFeature+0x48>
    break;
 8006660:	bf00      	nop
  }
}
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781a      	ldrb	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	785a      	ldrb	r2, [r3, #1]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	3302      	adds	r3, #2
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	b29a      	uxth	r2, r3
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	3303      	adds	r3, #3
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	b29b      	uxth	r3, r3
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	b29b      	uxth	r3, r3
 8006698:	4413      	add	r3, r2
 800669a:	b29a      	uxth	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	3304      	adds	r3, #4
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	3305      	adds	r3, #5
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	021b      	lsls	r3, r3, #8
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	4413      	add	r3, r2
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	3306      	adds	r3, #6
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	3307      	adds	r3, #7
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	4413      	add	r3, r2
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	80da      	strh	r2, [r3, #6]

}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	bc80      	pop	{r7}
 80066e0:	4770      	bx	lr

080066e2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b082      	sub	sp, #8
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 80066ec:	2180      	movs	r1, #128	; 0x80
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fc28 	bl	8006f44 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80066f4:	2100      	movs	r1, #0
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fc24 	bl	8006f44 <USBD_LL_StallEP>
}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8006710:	2300      	movs	r3, #0
 8006712:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d033      	beq.n	8006782 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 f835 	bl	800678a <USBD_GetLen>
 8006720:	4603      	mov	r3, r0
 8006722:	3301      	adds	r3, #1
 8006724:	b29b      	uxth	r3, r3
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800672e:	7dfb      	ldrb	r3, [r7, #23]
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	75fa      	strb	r2, [r7, #23]
 8006734:	461a      	mov	r2, r3
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	4413      	add	r3, r2
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	8812      	ldrh	r2, [r2, #0]
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8006742:	7dfb      	ldrb	r3, [r7, #23]
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	75fa      	strb	r2, [r7, #23]
 8006748:	461a      	mov	r2, r3
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	4413      	add	r3, r2
 800674e:	2203      	movs	r2, #3
 8006750:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8006752:	e012      	b.n	800677a <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	75fa      	strb	r2, [r7, #23]
 800675a:	461a      	mov	r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	441a      	add	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	1c59      	adds	r1, r3, #1
 8006764:	60f9      	str	r1, [r7, #12]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	75fa      	strb	r2, [r7, #23]
 8006770:	461a      	mov	r2, r3
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	4413      	add	r3, r2
 8006776:	2200      	movs	r2, #0
 8006778:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1e8      	bne.n	8006754 <USBD_GetString+0x50>
    }
  } 
}
 8006782:	bf00      	nop
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800678a:	b480      	push	{r7}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8006796:	e005      	b.n	80067a4 <USBD_GetLen+0x1a>
    {
        len++;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	3301      	adds	r3, #1
 800679c:	73fb      	strb	r3, [r7, #15]
        buf++;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3301      	adds	r3, #1
 80067a2:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1f5      	bne.n	8006798 <USBD_GetLen+0xe>
    }

    return len;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr

080067b8 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	4613      	mov	r3, r2
 80067c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2202      	movs	r2, #2
 80067ca:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80067ce:	88fa      	ldrh	r2, [r7, #6]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 80067d4:	88fa      	ldrh	r2, [r7, #6]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80067da:	88fb      	ldrh	r3, [r7, #6]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	2100      	movs	r1, #0
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 fc77 	bl	80070d4 <USBD_LL_Transmit>
  
  return USBD_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80067fe:	88fb      	ldrh	r3, [r7, #6]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	2100      	movs	r1, #0
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 fc65 	bl	80070d4 <USBD_LL_Transmit>
  
  return USBD_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	4613      	mov	r3, r2
 8006820:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2203      	movs	r2, #3
 8006826:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800682a:	88fa      	ldrh	r2, [r7, #6]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8006832:	88fa      	ldrh	r2, [r7, #6]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800683a:	88fb      	ldrh	r3, [r7, #6]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	2100      	movs	r1, #0
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 fc81 	bl	8007148 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	4613      	mov	r3, r2
 800685c:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 800685e:	88fb      	ldrh	r3, [r7, #6]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	2100      	movs	r1, #0
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 fc6f 	bl	8007148 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2204      	movs	r2, #4
 8006880:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8006884:	2300      	movs	r3, #0
 8006886:	2200      	movs	r2, #0
 8006888:	2100      	movs	r1, #0
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fc22 	bl	80070d4 <USBD_LL_Transmit>
  
  return USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2205      	movs	r2, #5
 80068a6:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80068aa:	2300      	movs	r3, #0
 80068ac:	2200      	movs	r2, #0
 80068ae:	2100      	movs	r1, #0
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fc49 	bl	8007148 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80068c4:	2200      	movs	r2, #0
 80068c6:	4908      	ldr	r1, [pc, #32]	; (80068e8 <MX_USB_DEVICE_Init+0x28>)
 80068c8:	4808      	ldr	r0, [pc, #32]	; (80068ec <MX_USB_DEVICE_Init+0x2c>)
 80068ca:	f7ff f8dd 	bl	8005a88 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80068ce:	4908      	ldr	r1, [pc, #32]	; (80068f0 <MX_USB_DEVICE_Init+0x30>)
 80068d0:	4806      	ldr	r0, [pc, #24]	; (80068ec <MX_USB_DEVICE_Init+0x2c>)
 80068d2:	f7ff f904 	bl	8005ade <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80068d6:	4907      	ldr	r1, [pc, #28]	; (80068f4 <MX_USB_DEVICE_Init+0x34>)
 80068d8:	4804      	ldr	r0, [pc, #16]	; (80068ec <MX_USB_DEVICE_Init+0x2c>)
 80068da:	f7ff f83f 	bl	800595c <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80068de:	4803      	ldr	r0, [pc, #12]	; (80068ec <MX_USB_DEVICE_Init+0x2c>)
 80068e0:	f7ff f916 	bl	8005b10 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80068e4:	bf00      	nop
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	200001b0 	.word	0x200001b0
 80068ec:	20000cb0 	.word	0x20000cb0
 80068f0:	2000009c 	.word	0x2000009c
 80068f4:	200001a0 	.word	0x200001a0

080068f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80068fc:	2200      	movs	r2, #0
 80068fe:	4905      	ldr	r1, [pc, #20]	; (8006914 <CDC_Init_FS+0x1c>)
 8006900:	4805      	ldr	r0, [pc, #20]	; (8006918 <CDC_Init_FS+0x20>)
 8006902:	f7ff f841 	bl	8005988 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006906:	4905      	ldr	r1, [pc, #20]	; (800691c <CDC_Init_FS+0x24>)
 8006908:	4803      	ldr	r0, [pc, #12]	; (8006918 <CDC_Init_FS+0x20>)
 800690a:	f7ff f856 	bl	80059ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800690e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006910:	4618      	mov	r0, r3
 8006912:	bd80      	pop	{r7, pc}
 8006914:	200012bc 	.word	0x200012bc
 8006918:	20000cb0 	.word	0x20000cb0
 800691c:	20000ed4 	.word	0x20000ed4

08006920 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006924:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006926:	4618      	mov	r0, r3
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr
	...

08006930 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	6039      	str	r1, [r7, #0]
 800693a:	71fb      	strb	r3, [r7, #7]
 800693c:	4613      	mov	r3, r2
 800693e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006940:	79fb      	ldrb	r3, [r7, #7]
 8006942:	2b23      	cmp	r3, #35	; 0x23
 8006944:	d84a      	bhi.n	80069dc <CDC_Control_FS+0xac>
 8006946:	a201      	add	r2, pc, #4	; (adr r2, 800694c <CDC_Control_FS+0x1c>)
 8006948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694c:	080069dd 	.word	0x080069dd
 8006950:	080069dd 	.word	0x080069dd
 8006954:	080069dd 	.word	0x080069dd
 8006958:	080069dd 	.word	0x080069dd
 800695c:	080069dd 	.word	0x080069dd
 8006960:	080069dd 	.word	0x080069dd
 8006964:	080069dd 	.word	0x080069dd
 8006968:	080069dd 	.word	0x080069dd
 800696c:	080069dd 	.word	0x080069dd
 8006970:	080069dd 	.word	0x080069dd
 8006974:	080069dd 	.word	0x080069dd
 8006978:	080069dd 	.word	0x080069dd
 800697c:	080069dd 	.word	0x080069dd
 8006980:	080069dd 	.word	0x080069dd
 8006984:	080069dd 	.word	0x080069dd
 8006988:	080069dd 	.word	0x080069dd
 800698c:	080069dd 	.word	0x080069dd
 8006990:	080069dd 	.word	0x080069dd
 8006994:	080069dd 	.word	0x080069dd
 8006998:	080069dd 	.word	0x080069dd
 800699c:	080069dd 	.word	0x080069dd
 80069a0:	080069dd 	.word	0x080069dd
 80069a4:	080069dd 	.word	0x080069dd
 80069a8:	080069dd 	.word	0x080069dd
 80069ac:	080069dd 	.word	0x080069dd
 80069b0:	080069dd 	.word	0x080069dd
 80069b4:	080069dd 	.word	0x080069dd
 80069b8:	080069dd 	.word	0x080069dd
 80069bc:	080069dd 	.word	0x080069dd
 80069c0:	080069dd 	.word	0x080069dd
 80069c4:	080069dd 	.word	0x080069dd
 80069c8:	080069dd 	.word	0x080069dd
 80069cc:	080069dd 	.word	0x080069dd
 80069d0:	080069dd 	.word	0x080069dd
 80069d4:	080069dd 	.word	0x080069dd
 80069d8:	080069dd 	.word	0x080069dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80069dc:	bf00      	nop
  }

  return (USBD_OK);
 80069de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bc80      	pop	{r7}
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop

080069ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	4805      	ldr	r0, [pc, #20]	; (8006a10 <CDC_Receive_FS+0x24>)
 80069fa:	f7fe ffde 	bl	80059ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80069fe:	4804      	ldr	r0, [pc, #16]	; (8006a10 <CDC_Receive_FS+0x24>)
 8006a00:	f7ff f818 	bl	8005a34 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006a04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000cb0 	.word	0x20000cb0

08006a14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006a24:	4b0d      	ldr	r3, [pc, #52]	; (8006a5c <CDC_Transmit_FS+0x48>)
 8006a26:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006a2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e00b      	b.n	8006a52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006a3a:	887b      	ldrh	r3, [r7, #2]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	4806      	ldr	r0, [pc, #24]	; (8006a5c <CDC_Transmit_FS+0x48>)
 8006a42:	f7fe ffa1 	bl	8005988 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006a46:	4805      	ldr	r0, [pc, #20]	; (8006a5c <CDC_Transmit_FS+0x48>)
 8006a48:	f7fe ffca 	bl	80059e0 <USBD_CDC_TransmitPacket>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000cb0 	.word	0x20000cb0

08006a60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	4603      	mov	r3, r0
 8006a68:	6039      	str	r1, [r7, #0]
 8006a6a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2212      	movs	r2, #18
 8006a70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006a72:	4b03      	ldr	r3, [pc, #12]	; (8006a80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	200001cc 	.word	0x200001cc

08006a84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	6039      	str	r1, [r7, #0]
 8006a8e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2204      	movs	r2, #4
 8006a94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006a96:	4b03      	ldr	r3, [pc, #12]	; (8006aa4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	200001e0 	.word	0x200001e0

08006aa8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	6039      	str	r1, [r7, #0]
 8006ab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d105      	bne.n	8006ac6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	4907      	ldr	r1, [pc, #28]	; (8006adc <USBD_FS_ProductStrDescriptor+0x34>)
 8006abe:	4808      	ldr	r0, [pc, #32]	; (8006ae0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ac0:	f7ff fe20 	bl	8006704 <USBD_GetString>
 8006ac4:	e004      	b.n	8006ad0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	4904      	ldr	r1, [pc, #16]	; (8006adc <USBD_FS_ProductStrDescriptor+0x34>)
 8006aca:	4805      	ldr	r0, [pc, #20]	; (8006ae0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006acc:	f7ff fe1a 	bl	8006704 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ad0:	4b02      	ldr	r3, [pc, #8]	; (8006adc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	200016a4 	.word	0x200016a4
 8006ae0:	08007b88 	.word	0x08007b88

08006ae4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	6039      	str	r1, [r7, #0]
 8006aee:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	4904      	ldr	r1, [pc, #16]	; (8006b04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006af4:	4804      	ldr	r0, [pc, #16]	; (8006b08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006af6:	f7ff fe05 	bl	8006704 <USBD_GetString>
  return USBD_StrDesc;
 8006afa:	4b02      	ldr	r3, [pc, #8]	; (8006b04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	200016a4 	.word	0x200016a4
 8006b08:	08007ba0 	.word	0x08007ba0

08006b0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	4603      	mov	r3, r0
 8006b14:	6039      	str	r1, [r7, #0]
 8006b16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b18:	79fb      	ldrb	r3, [r7, #7]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d105      	bne.n	8006b2a <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	4907      	ldr	r1, [pc, #28]	; (8006b40 <USBD_FS_SerialStrDescriptor+0x34>)
 8006b22:	4808      	ldr	r0, [pc, #32]	; (8006b44 <USBD_FS_SerialStrDescriptor+0x38>)
 8006b24:	f7ff fdee 	bl	8006704 <USBD_GetString>
 8006b28:	e004      	b.n	8006b34 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	4904      	ldr	r1, [pc, #16]	; (8006b40 <USBD_FS_SerialStrDescriptor+0x34>)
 8006b2e:	4805      	ldr	r0, [pc, #20]	; (8006b44 <USBD_FS_SerialStrDescriptor+0x38>)
 8006b30:	f7ff fde8 	bl	8006704 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b34:	4b02      	ldr	r3, [pc, #8]	; (8006b40 <USBD_FS_SerialStrDescriptor+0x34>)
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	200016a4 	.word	0x200016a4
 8006b44:	08007bb4 	.word	0x08007bb4

08006b48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	4603      	mov	r3, r0
 8006b50:	6039      	str	r1, [r7, #0]
 8006b52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b54:	79fb      	ldrb	r3, [r7, #7]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d105      	bne.n	8006b66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	4907      	ldr	r1, [pc, #28]	; (8006b7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b5e:	4808      	ldr	r0, [pc, #32]	; (8006b80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b60:	f7ff fdd0 	bl	8006704 <USBD_GetString>
 8006b64:	e004      	b.n	8006b70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	4904      	ldr	r1, [pc, #16]	; (8006b7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b6a:	4805      	ldr	r0, [pc, #20]	; (8006b80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b6c:	f7ff fdca 	bl	8006704 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b70:	4b02      	ldr	r3, [pc, #8]	; (8006b7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	200016a4 	.word	0x200016a4
 8006b80:	08007bc4 	.word	0x08007bc4

08006b84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	6039      	str	r1, [r7, #0]
 8006b8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d105      	bne.n	8006ba2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	4907      	ldr	r1, [pc, #28]	; (8006bb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b9a:	4808      	ldr	r0, [pc, #32]	; (8006bbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b9c:	f7ff fdb2 	bl	8006704 <USBD_GetString>
 8006ba0:	e004      	b.n	8006bac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	4904      	ldr	r1, [pc, #16]	; (8006bb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ba6:	4805      	ldr	r0, [pc, #20]	; (8006bbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ba8:	f7ff fdac 	bl	8006704 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bac:	4b02      	ldr	r3, [pc, #8]	; (8006bb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	200016a4 	.word	0x200016a4
 8006bbc:	08007bd0 	.word	0x08007bd0

08006bc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a0d      	ldr	r2, [pc, #52]	; (8006c04 <HAL_PCD_MspInit+0x44>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d113      	bne.n	8006bfa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006bd2:	4a0d      	ldr	r2, [pc, #52]	; (8006c08 <HAL_PCD_MspInit+0x48>)
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <HAL_PCD_MspInit+0x48>)
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006bdc:	61d3      	str	r3, [r2, #28]
 8006bde:	4b0a      	ldr	r3, [pc, #40]	; (8006c08 <HAL_PCD_MspInit+0x48>)
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006bea:	2200      	movs	r2, #0
 8006bec:	2100      	movs	r1, #0
 8006bee:	2014      	movs	r0, #20
 8006bf0:	f7fa fb99 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006bf4:	2014      	movs	r0, #20
 8006bf6:	f7fa fbb2 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006bfa:	bf00      	nop
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	40005c00 	.word	0x40005c00
 8006c08:	40021000 	.word	0x40021000

08006c0c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8006c20:	4619      	mov	r1, r3
 8006c22:	4610      	mov	r0, r2
 8006c24:	f7fe ffbc 	bl	8005ba0 <USBD_LL_SetupStage>
}
 8006c28:	bf00      	nop
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8006c42:	78fb      	ldrb	r3, [r7, #3]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	015b      	lsls	r3, r3, #5
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	4619      	mov	r1, r3
 8006c54:	f7fe ffee 	bl	8005c34 <USBD_LL_DataOutStage>
}
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	015b      	lsls	r3, r3, #5
 8006c78:	4413      	add	r3, r2
 8006c7a:	333c      	adds	r3, #60	; 0x3c
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	4619      	mov	r1, r3
 8006c82:	f7ff f832 	bl	8005cea <USBD_LL_DataInStage>
}
 8006c86:	bf00      	nop
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b082      	sub	sp, #8
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7ff f915 	bl	8005ecc <USBD_LL_SOF>
}
 8006ca2:	bf00      	nop
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d102      	bne.n	8006cc4 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc2:	e002      	b.n	8006cca <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	73fb      	strb	r3, [r7, #15]
    break;    
 8006cc8:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006cd0:	7bfa      	ldrb	r2, [r7, #15]
 8006cd2:	4611      	mov	r1, r2
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7ff f8c6 	bl	8005e66 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff f891 	bl	8005e08 <USBD_LL_Reset>
}
 8006ce6:	bf00      	nop
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff f8c0 	bl	8005e84 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d005      	beq.n	8006d18 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d0c:	4a04      	ldr	r2, [pc, #16]	; (8006d20 <HAL_PCD_SuspendCallback+0x30>)
 8006d0e:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <HAL_PCD_SuspendCallback+0x30>)
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f043 0306 	orr.w	r3, r3, #6
 8006d16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006d18:	bf00      	nop
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	e000ed00 	.word	0xe000ed00

08006d24 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff f8ba 	bl	8005eac <USBD_LL_Resume>
}
 8006d38:	bf00      	nop
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006d48:	4a29      	ldr	r2, [pc, #164]	; (8006df0 <USBD_LL_Init+0xb0>)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a27      	ldr	r2, [pc, #156]	; (8006df0 <USBD_LL_Init+0xb0>)
 8006d54:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8006d58:	4b25      	ldr	r3, [pc, #148]	; (8006df0 <USBD_LL_Init+0xb0>)
 8006d5a:	4a26      	ldr	r2, [pc, #152]	; (8006df4 <USBD_LL_Init+0xb4>)
 8006d5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006d5e:	4b24      	ldr	r3, [pc, #144]	; (8006df0 <USBD_LL_Init+0xb0>)
 8006d60:	2208      	movs	r2, #8
 8006d62:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006d64:	4b22      	ldr	r3, [pc, #136]	; (8006df0 <USBD_LL_Init+0xb0>)
 8006d66:	2202      	movs	r2, #2
 8006d68:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8006d6a:	4b21      	ldr	r3, [pc, #132]	; (8006df0 <USBD_LL_Init+0xb0>)
 8006d6c:	2203      	movs	r2, #3
 8006d6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006d70:	4b1f      	ldr	r3, [pc, #124]	; (8006df0 <USBD_LL_Init+0xb0>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006d76:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <USBD_LL_Init+0xb0>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006d7c:	4b1c      	ldr	r3, [pc, #112]	; (8006df0 <USBD_LL_Init+0xb0>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006d82:	481b      	ldr	r0, [pc, #108]	; (8006df0 <USBD_LL_Init+0xb0>)
 8006d84:	f7fa fef2 	bl	8001b6c <HAL_PCD_Init>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 8006d8e:	f7f9 ff3f 	bl	8000c10 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006d98:	2318      	movs	r3, #24
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	f7fb fdf9 	bl	8002994 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006da8:	2358      	movs	r3, #88	; 0x58
 8006daa:	2200      	movs	r2, #0
 8006dac:	2180      	movs	r1, #128	; 0x80
 8006dae:	f7fb fdf1 	bl	8002994 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006db8:	23c0      	movs	r3, #192	; 0xc0
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2181      	movs	r1, #129	; 0x81
 8006dbe:	f7fb fde9 	bl	8002994 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006dc8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2101      	movs	r1, #1
 8006dd0:	f7fb fde0 	bl	8002994 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dde:	2200      	movs	r2, #0
 8006de0:	2182      	movs	r1, #130	; 0x82
 8006de2:	f7fb fdd7 	bl	8002994 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	200018a4 	.word	0x200018a4
 8006df4:	40005c00 	.word	0x40005c00

08006df8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fa ff86 	bl	8001d20 <HAL_PCD_Start>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d816      	bhi.n	8006e4c <USBD_LL_Start+0x54>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <USBD_LL_Start+0x2c>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e35 	.word	0x08006e35
 8006e28:	08006e3b 	.word	0x08006e3b
 8006e2c:	08006e41 	.word	0x08006e41
 8006e30:	08006e47 	.word	0x08006e47
    case HAL_OK :
      usb_status = USBD_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	73fb      	strb	r3, [r7, #15]
    break;
 8006e38:	e00b      	b.n	8006e52 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8006e3e:	e008      	b.n	8006e52 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e40:	2301      	movs	r3, #1
 8006e42:	73fb      	strb	r3, [r7, #15]
    break;
 8006e44:	e005      	b.n	8006e52 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e46:	2302      	movs	r3, #2
 8006e48:	73fb      	strb	r3, [r7, #15]
    break;
 8006e4a:	e002      	b.n	8006e52 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e50:	bf00      	nop
  }
  return usb_status;
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	4608      	mov	r0, r1
 8006e66:	4611      	mov	r1, r2
 8006e68:	461a      	mov	r2, r3
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	70fb      	strb	r3, [r7, #3]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	70bb      	strb	r3, [r7, #2]
 8006e72:	4613      	mov	r3, r2
 8006e74:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006e84:	78bb      	ldrb	r3, [r7, #2]
 8006e86:	883a      	ldrh	r2, [r7, #0]
 8006e88:	78f9      	ldrb	r1, [r7, #3]
 8006e8a:	f7fb f896 	bl	8001fba <HAL_PCD_EP_Open>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d817      	bhi.n	8006ec8 <USBD_LL_OpenEP+0x6c>
 8006e98:	a201      	add	r2, pc, #4	; (adr r2, 8006ea0 <USBD_LL_OpenEP+0x44>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006eb1 	.word	0x08006eb1
 8006ea4:	08006eb7 	.word	0x08006eb7
 8006ea8:	08006ebd 	.word	0x08006ebd
 8006eac:	08006ec3 	.word	0x08006ec3
    case HAL_OK :
      usb_status = USBD_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8006eb4:	e00b      	b.n	8006ece <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8006eba:	e008      	b.n	8006ece <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8006ec0:	e005      	b.n	8006ece <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8006ec6:	e002      	b.n	8006ece <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	73fb      	strb	r3, [r7, #15]
    break;
 8006ecc:	bf00      	nop
  }
  return usb_status;
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006ef2:	78fa      	ldrb	r2, [r7, #3]
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fb f8b4 	bl	8002064 <HAL_PCD_EP_Close>
 8006efc:	4603      	mov	r3, r0
 8006efe:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d816      	bhi.n	8006f34 <USBD_LL_CloseEP+0x5c>
 8006f06:	a201      	add	r2, pc, #4	; (adr r2, 8006f0c <USBD_LL_CloseEP+0x34>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f1d 	.word	0x08006f1d
 8006f10:	08006f23 	.word	0x08006f23
 8006f14:	08006f29 	.word	0x08006f29
 8006f18:	08006f2f 	.word	0x08006f2f
    case HAL_OK :
      usb_status = USBD_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8006f20:	e00b      	b.n	8006f3a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f22:	2302      	movs	r3, #2
 8006f24:	73fb      	strb	r3, [r7, #15]
    break;
 8006f26:	e008      	b.n	8006f3a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f2c:	e005      	b.n	8006f3a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f2e:	2302      	movs	r3, #2
 8006f30:	73fb      	strb	r3, [r7, #15]
    break;
 8006f32:	e002      	b.n	8006f3a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006f34:	2302      	movs	r3, #2
 8006f36:	73fb      	strb	r3, [r7, #15]
    break;
 8006f38:	bf00      	nop
  }
  return usb_status;  
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006f5e:	78fa      	ldrb	r2, [r7, #3]
 8006f60:	4611      	mov	r1, r2
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fb f950 	bl	8002208 <HAL_PCD_EP_SetStall>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d816      	bhi.n	8006fa0 <USBD_LL_StallEP+0x5c>
 8006f72:	a201      	add	r2, pc, #4	; (adr r2, 8006f78 <USBD_LL_StallEP+0x34>)
 8006f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f78:	08006f89 	.word	0x08006f89
 8006f7c:	08006f8f 	.word	0x08006f8f
 8006f80:	08006f95 	.word	0x08006f95
 8006f84:	08006f9b 	.word	0x08006f9b
    case HAL_OK :
      usb_status = USBD_OK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f8c:	e00b      	b.n	8006fa6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f8e:	2302      	movs	r3, #2
 8006f90:	73fb      	strb	r3, [r7, #15]
    break;
 8006f92:	e008      	b.n	8006fa6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f94:	2301      	movs	r3, #1
 8006f96:	73fb      	strb	r3, [r7, #15]
    break;
 8006f98:	e005      	b.n	8006fa6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f9e:	e002      	b.n	8006fa6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8006fa4:	bf00      	nop
  }
  return usb_status;  
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006fca:	78fa      	ldrb	r2, [r7, #3]
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fb f96f 	bl	80022b2 <HAL_PCD_EP_ClrStall>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d816      	bhi.n	800700c <USBD_LL_ClearStallEP+0x5c>
 8006fde:	a201      	add	r2, pc, #4	; (adr r2, 8006fe4 <USBD_LL_ClearStallEP+0x34>)
 8006fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe4:	08006ff5 	.word	0x08006ff5
 8006fe8:	08006ffb 	.word	0x08006ffb
 8006fec:	08007001 	.word	0x08007001
 8006ff0:	08007007 	.word	0x08007007
    case HAL_OK :
      usb_status = USBD_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ff8:	e00b      	b.n	8007012 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	73fb      	strb	r3, [r7, #15]
    break;
 8006ffe:	e008      	b.n	8007012 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007000:	2301      	movs	r3, #1
 8007002:	73fb      	strb	r3, [r7, #15]
    break;
 8007004:	e005      	b.n	8007012 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007006:	2302      	movs	r3, #2
 8007008:	73fb      	strb	r3, [r7, #15]
    break;
 800700a:	e002      	b.n	8007012 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800700c:	2302      	movs	r3, #2
 800700e:	73fb      	strb	r3, [r7, #15]
    break;
 8007010:	bf00      	nop
  }
  return usb_status; 
 8007012:	7bfb      	ldrb	r3, [r7, #15]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800702e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007034:	2b00      	cmp	r3, #0
 8007036:	da08      	bge.n	800704a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007038:	78fb      	ldrb	r3, [r7, #3]
 800703a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	015b      	lsls	r3, r3, #5
 8007042:	4413      	add	r3, r2
 8007044:	332a      	adds	r3, #42	; 0x2a
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	e008      	b.n	800705c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800704a:	78fb      	ldrb	r3, [r7, #3]
 800704c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	015b      	lsls	r3, r3, #5
 8007054:	4413      	add	r3, r2
 8007056:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800705a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800705c:	4618      	mov	r0, r3
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	bc80      	pop	{r7}
 8007064:	4770      	bx	lr
	...

08007068 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	460b      	mov	r3, r1
 8007072:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007082:	78fa      	ldrb	r2, [r7, #3]
 8007084:	4611      	mov	r1, r2
 8007086:	4618      	mov	r0, r3
 8007088:	f7fa ff72 	bl	8001f70 <HAL_PCD_SetAddress>
 800708c:	4603      	mov	r3, r0
 800708e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	2b03      	cmp	r3, #3
 8007094:	d816      	bhi.n	80070c4 <USBD_LL_SetUSBAddress+0x5c>
 8007096:	a201      	add	r2, pc, #4	; (adr r2, 800709c <USBD_LL_SetUSBAddress+0x34>)
 8007098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709c:	080070ad 	.word	0x080070ad
 80070a0:	080070b3 	.word	0x080070b3
 80070a4:	080070b9 	.word	0x080070b9
 80070a8:	080070bf 	.word	0x080070bf
    case HAL_OK :
      usb_status = USBD_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73fb      	strb	r3, [r7, #15]
    break;
 80070b0:	e00b      	b.n	80070ca <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070b2:	2302      	movs	r3, #2
 80070b4:	73fb      	strb	r3, [r7, #15]
    break;
 80070b6:	e008      	b.n	80070ca <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070b8:	2301      	movs	r3, #1
 80070ba:	73fb      	strb	r3, [r7, #15]
    break;
 80070bc:	e005      	b.n	80070ca <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070be:	2302      	movs	r3, #2
 80070c0:	73fb      	strb	r3, [r7, #15]
    break;
 80070c2:	e002      	b.n	80070ca <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80070c4:	2302      	movs	r3, #2
 80070c6:	73fb      	strb	r3, [r7, #15]
    break;
 80070c8:	bf00      	nop
  }
  return usb_status;  
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	607a      	str	r2, [r7, #4]
 80070de:	461a      	mov	r2, r3
 80070e0:	460b      	mov	r3, r1
 80070e2:	72fb      	strb	r3, [r7, #11]
 80070e4:	4613      	mov	r3, r2
 80070e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80070f6:	893b      	ldrh	r3, [r7, #8]
 80070f8:	7af9      	ldrb	r1, [r7, #11]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	f7fb f849 	bl	8002192 <HAL_PCD_EP_Transmit>
 8007100:	4603      	mov	r3, r0
 8007102:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8007104:	7dbb      	ldrb	r3, [r7, #22]
 8007106:	2b03      	cmp	r3, #3
 8007108:	d816      	bhi.n	8007138 <USBD_LL_Transmit+0x64>
 800710a:	a201      	add	r2, pc, #4	; (adr r2, 8007110 <USBD_LL_Transmit+0x3c>)
 800710c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007110:	08007121 	.word	0x08007121
 8007114:	08007127 	.word	0x08007127
 8007118:	0800712d 	.word	0x0800712d
 800711c:	08007133 	.word	0x08007133
    case HAL_OK :
      usb_status = USBD_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	75fb      	strb	r3, [r7, #23]
    break;
 8007124:	e00b      	b.n	800713e <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007126:	2302      	movs	r3, #2
 8007128:	75fb      	strb	r3, [r7, #23]
    break;
 800712a:	e008      	b.n	800713e <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800712c:	2301      	movs	r3, #1
 800712e:	75fb      	strb	r3, [r7, #23]
    break;
 8007130:	e005      	b.n	800713e <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007132:	2302      	movs	r3, #2
 8007134:	75fb      	strb	r3, [r7, #23]
    break;
 8007136:	e002      	b.n	800713e <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8007138:	2302      	movs	r3, #2
 800713a:	75fb      	strb	r3, [r7, #23]
    break;
 800713c:	bf00      	nop
  }
  return usb_status;    
 800713e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	607a      	str	r2, [r7, #4]
 8007152:	461a      	mov	r2, r3
 8007154:	460b      	mov	r3, r1
 8007156:	72fb      	strb	r3, [r7, #11]
 8007158:	4613      	mov	r3, r2
 800715a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800716a:	893b      	ldrh	r3, [r7, #8]
 800716c:	7af9      	ldrb	r1, [r7, #11]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	f7fa ffbe 	bl	80020f0 <HAL_PCD_EP_Receive>
 8007174:	4603      	mov	r3, r0
 8007176:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8007178:	7dbb      	ldrb	r3, [r7, #22]
 800717a:	2b03      	cmp	r3, #3
 800717c:	d816      	bhi.n	80071ac <USBD_LL_PrepareReceive+0x64>
 800717e:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <USBD_LL_PrepareReceive+0x3c>)
 8007180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007184:	08007195 	.word	0x08007195
 8007188:	0800719b 	.word	0x0800719b
 800718c:	080071a1 	.word	0x080071a1
 8007190:	080071a7 	.word	0x080071a7
    case HAL_OK :
      usb_status = USBD_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	75fb      	strb	r3, [r7, #23]
    break;
 8007198:	e00b      	b.n	80071b2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800719a:	2302      	movs	r3, #2
 800719c:	75fb      	strb	r3, [r7, #23]
    break;
 800719e:	e008      	b.n	80071b2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071a0:	2301      	movs	r3, #1
 80071a2:	75fb      	strb	r3, [r7, #23]
    break;
 80071a4:	e005      	b.n	80071b2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071a6:	2302      	movs	r3, #2
 80071a8:	75fb      	strb	r3, [r7, #23]
    break;
 80071aa:	e002      	b.n	80071b2 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 80071ac:	2302      	movs	r3, #2
 80071ae:	75fb      	strb	r3, [r7, #23]
    break;
 80071b0:	bf00      	nop
  }
  return usb_status; 
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80071ce:	78fa      	ldrb	r2, [r7, #3]
 80071d0:	4611      	mov	r1, r2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fa ffc8 	bl	8002168 <HAL_PCD_EP_GetRxCount>
 80071d8:	4603      	mov	r3, r0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80071ec:	4b02      	ldr	r3, [pc, #8]	; (80071f8 <USBD_static_malloc+0x14>)
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bc80      	pop	{r7}
 80071f6:	4770      	bx	lr
 80071f8:	20000274 	.word	0x20000274

080071fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]

}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	bc80      	pop	{r7}
 800720c:	4770      	bx	lr

0800720e <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	460b      	mov	r3, r1
 8007218:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr

08007224 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007224:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007226:	e003      	b.n	8007230 <LoopCopyDataInit>

08007228 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007228:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800722a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800722c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800722e:	3104      	adds	r1, #4

08007230 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007230:	480a      	ldr	r0, [pc, #40]	; (800725c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007232:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007234:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007236:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007238:	d3f6      	bcc.n	8007228 <CopyDataInit>
  ldr r2, =_sbss
 800723a:	4a0a      	ldr	r2, [pc, #40]	; (8007264 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800723c:	e002      	b.n	8007244 <LoopFillZerobss>

0800723e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800723e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007240:	f842 3b04 	str.w	r3, [r2], #4

08007244 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007244:	4b08      	ldr	r3, [pc, #32]	; (8007268 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007246:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007248:	d3f9      	bcc.n	800723e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800724a:	f7f9 ff05 	bl	8001058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800724e:	f000 f80f 	bl	8007270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007252:	f7f9 f81b 	bl	800028c <main>
  bx lr
 8007256:	4770      	bx	lr
  ldr r3, =_sidata
 8007258:	08007c34 	.word	0x08007c34
  ldr r0, =_sdata
 800725c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007260:	20000248 	.word	0x20000248
  ldr r2, =_sbss
 8007264:	20000248 	.word	0x20000248
  ldr r3, = _ebss
 8007268:	20001d08 	.word	0x20001d08

0800726c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800726c:	e7fe      	b.n	800726c <ADC1_2_IRQHandler>
	...

08007270 <__libc_init_array>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	2500      	movs	r5, #0
 8007274:	4e0c      	ldr	r6, [pc, #48]	; (80072a8 <__libc_init_array+0x38>)
 8007276:	4c0d      	ldr	r4, [pc, #52]	; (80072ac <__libc_init_array+0x3c>)
 8007278:	1ba4      	subs	r4, r4, r6
 800727a:	10a4      	asrs	r4, r4, #2
 800727c:	42a5      	cmp	r5, r4
 800727e:	d109      	bne.n	8007294 <__libc_init_array+0x24>
 8007280:	f000 fc5c 	bl	8007b3c <_init>
 8007284:	2500      	movs	r5, #0
 8007286:	4e0a      	ldr	r6, [pc, #40]	; (80072b0 <__libc_init_array+0x40>)
 8007288:	4c0a      	ldr	r4, [pc, #40]	; (80072b4 <__libc_init_array+0x44>)
 800728a:	1ba4      	subs	r4, r4, r6
 800728c:	10a4      	asrs	r4, r4, #2
 800728e:	42a5      	cmp	r5, r4
 8007290:	d105      	bne.n	800729e <__libc_init_array+0x2e>
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007298:	4798      	blx	r3
 800729a:	3501      	adds	r5, #1
 800729c:	e7ee      	b.n	800727c <__libc_init_array+0xc>
 800729e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072a2:	4798      	blx	r3
 80072a4:	3501      	adds	r5, #1
 80072a6:	e7f2      	b.n	800728e <__libc_init_array+0x1e>
 80072a8:	08007c2c 	.word	0x08007c2c
 80072ac:	08007c2c 	.word	0x08007c2c
 80072b0:	08007c2c 	.word	0x08007c2c
 80072b4:	08007c30 	.word	0x08007c30

080072b8 <memset>:
 80072b8:	4603      	mov	r3, r0
 80072ba:	4402      	add	r2, r0
 80072bc:	4293      	cmp	r3, r2
 80072be:	d100      	bne.n	80072c2 <memset+0xa>
 80072c0:	4770      	bx	lr
 80072c2:	f803 1b01 	strb.w	r1, [r3], #1
 80072c6:	e7f9      	b.n	80072bc <memset+0x4>

080072c8 <siprintf>:
 80072c8:	b40e      	push	{r1, r2, r3}
 80072ca:	f44f 7102 	mov.w	r1, #520	; 0x208
 80072ce:	b500      	push	{lr}
 80072d0:	b09c      	sub	sp, #112	; 0x70
 80072d2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80072d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072da:	9104      	str	r1, [sp, #16]
 80072dc:	9107      	str	r1, [sp, #28]
 80072de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80072e2:	ab1d      	add	r3, sp, #116	; 0x74
 80072e4:	9002      	str	r0, [sp, #8]
 80072e6:	9006      	str	r0, [sp, #24]
 80072e8:	4808      	ldr	r0, [pc, #32]	; (800730c <siprintf+0x44>)
 80072ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ee:	f8ad 1016 	strh.w	r1, [sp, #22]
 80072f2:	6800      	ldr	r0, [r0, #0]
 80072f4:	a902      	add	r1, sp, #8
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	f000 f866 	bl	80073c8 <_svfiprintf_r>
 80072fc:	2200      	movs	r2, #0
 80072fe:	9b02      	ldr	r3, [sp, #8]
 8007300:	701a      	strb	r2, [r3, #0]
 8007302:	b01c      	add	sp, #112	; 0x70
 8007304:	f85d eb04 	ldr.w	lr, [sp], #4
 8007308:	b003      	add	sp, #12
 800730a:	4770      	bx	lr
 800730c:	200001e4 	.word	0x200001e4

08007310 <__ssputs_r>:
 8007310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007314:	688e      	ldr	r6, [r1, #8]
 8007316:	4682      	mov	sl, r0
 8007318:	429e      	cmp	r6, r3
 800731a:	460c      	mov	r4, r1
 800731c:	4691      	mov	r9, r2
 800731e:	4698      	mov	r8, r3
 8007320:	d835      	bhi.n	800738e <__ssputs_r+0x7e>
 8007322:	898a      	ldrh	r2, [r1, #12]
 8007324:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007328:	d031      	beq.n	800738e <__ssputs_r+0x7e>
 800732a:	2302      	movs	r3, #2
 800732c:	6825      	ldr	r5, [r4, #0]
 800732e:	6909      	ldr	r1, [r1, #16]
 8007330:	1a6f      	subs	r7, r5, r1
 8007332:	6965      	ldr	r5, [r4, #20]
 8007334:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007338:	fb95 f5f3 	sdiv	r5, r5, r3
 800733c:	f108 0301 	add.w	r3, r8, #1
 8007340:	443b      	add	r3, r7
 8007342:	429d      	cmp	r5, r3
 8007344:	bf38      	it	cc
 8007346:	461d      	movcc	r5, r3
 8007348:	0553      	lsls	r3, r2, #21
 800734a:	d531      	bpl.n	80073b0 <__ssputs_r+0xa0>
 800734c:	4629      	mov	r1, r5
 800734e:	f000 fb47 	bl	80079e0 <_malloc_r>
 8007352:	4606      	mov	r6, r0
 8007354:	b950      	cbnz	r0, 800736c <__ssputs_r+0x5c>
 8007356:	230c      	movs	r3, #12
 8007358:	f8ca 3000 	str.w	r3, [sl]
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	f04f 30ff 	mov.w	r0, #4294967295
 8007362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007366:	81a3      	strh	r3, [r4, #12]
 8007368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800736c:	463a      	mov	r2, r7
 800736e:	6921      	ldr	r1, [r4, #16]
 8007370:	f000 fac4 	bl	80078fc <memcpy>
 8007374:	89a3      	ldrh	r3, [r4, #12]
 8007376:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800737a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800737e:	81a3      	strh	r3, [r4, #12]
 8007380:	6126      	str	r6, [r4, #16]
 8007382:	443e      	add	r6, r7
 8007384:	6026      	str	r6, [r4, #0]
 8007386:	4646      	mov	r6, r8
 8007388:	6165      	str	r5, [r4, #20]
 800738a:	1bed      	subs	r5, r5, r7
 800738c:	60a5      	str	r5, [r4, #8]
 800738e:	4546      	cmp	r6, r8
 8007390:	bf28      	it	cs
 8007392:	4646      	movcs	r6, r8
 8007394:	4649      	mov	r1, r9
 8007396:	4632      	mov	r2, r6
 8007398:	6820      	ldr	r0, [r4, #0]
 800739a:	f000 faba 	bl	8007912 <memmove>
 800739e:	68a3      	ldr	r3, [r4, #8]
 80073a0:	2000      	movs	r0, #0
 80073a2:	1b9b      	subs	r3, r3, r6
 80073a4:	60a3      	str	r3, [r4, #8]
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	441e      	add	r6, r3
 80073aa:	6026      	str	r6, [r4, #0]
 80073ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b0:	462a      	mov	r2, r5
 80073b2:	f000 fb73 	bl	8007a9c <_realloc_r>
 80073b6:	4606      	mov	r6, r0
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d1e1      	bne.n	8007380 <__ssputs_r+0x70>
 80073bc:	6921      	ldr	r1, [r4, #16]
 80073be:	4650      	mov	r0, sl
 80073c0:	f000 fac2 	bl	8007948 <_free_r>
 80073c4:	e7c7      	b.n	8007356 <__ssputs_r+0x46>
	...

080073c8 <_svfiprintf_r>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	b09d      	sub	sp, #116	; 0x74
 80073ce:	9303      	str	r3, [sp, #12]
 80073d0:	898b      	ldrh	r3, [r1, #12]
 80073d2:	4680      	mov	r8, r0
 80073d4:	061c      	lsls	r4, r3, #24
 80073d6:	460d      	mov	r5, r1
 80073d8:	4616      	mov	r6, r2
 80073da:	d50f      	bpl.n	80073fc <_svfiprintf_r+0x34>
 80073dc:	690b      	ldr	r3, [r1, #16]
 80073de:	b96b      	cbnz	r3, 80073fc <_svfiprintf_r+0x34>
 80073e0:	2140      	movs	r1, #64	; 0x40
 80073e2:	f000 fafd 	bl	80079e0 <_malloc_r>
 80073e6:	6028      	str	r0, [r5, #0]
 80073e8:	6128      	str	r0, [r5, #16]
 80073ea:	b928      	cbnz	r0, 80073f8 <_svfiprintf_r+0x30>
 80073ec:	230c      	movs	r3, #12
 80073ee:	f8c8 3000 	str.w	r3, [r8]
 80073f2:	f04f 30ff 	mov.w	r0, #4294967295
 80073f6:	e0c4      	b.n	8007582 <_svfiprintf_r+0x1ba>
 80073f8:	2340      	movs	r3, #64	; 0x40
 80073fa:	616b      	str	r3, [r5, #20]
 80073fc:	2300      	movs	r3, #0
 80073fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007400:	2320      	movs	r3, #32
 8007402:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007406:	2330      	movs	r3, #48	; 0x30
 8007408:	f04f 0b01 	mov.w	fp, #1
 800740c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007410:	4637      	mov	r7, r6
 8007412:	463c      	mov	r4, r7
 8007414:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d13c      	bne.n	8007496 <_svfiprintf_r+0xce>
 800741c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007420:	d00b      	beq.n	800743a <_svfiprintf_r+0x72>
 8007422:	4653      	mov	r3, sl
 8007424:	4632      	mov	r2, r6
 8007426:	4629      	mov	r1, r5
 8007428:	4640      	mov	r0, r8
 800742a:	f7ff ff71 	bl	8007310 <__ssputs_r>
 800742e:	3001      	adds	r0, #1
 8007430:	f000 80a2 	beq.w	8007578 <_svfiprintf_r+0x1b0>
 8007434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007436:	4453      	add	r3, sl
 8007438:	9309      	str	r3, [sp, #36]	; 0x24
 800743a:	783b      	ldrb	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 809b 	beq.w	8007578 <_svfiprintf_r+0x1b0>
 8007442:	2300      	movs	r3, #0
 8007444:	f04f 32ff 	mov.w	r2, #4294967295
 8007448:	9304      	str	r3, [sp, #16]
 800744a:	9307      	str	r3, [sp, #28]
 800744c:	9205      	str	r2, [sp, #20]
 800744e:	9306      	str	r3, [sp, #24]
 8007450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007454:	931a      	str	r3, [sp, #104]	; 0x68
 8007456:	2205      	movs	r2, #5
 8007458:	7821      	ldrb	r1, [r4, #0]
 800745a:	4850      	ldr	r0, [pc, #320]	; (800759c <_svfiprintf_r+0x1d4>)
 800745c:	f000 fa40 	bl	80078e0 <memchr>
 8007460:	1c67      	adds	r7, r4, #1
 8007462:	9b04      	ldr	r3, [sp, #16]
 8007464:	b9d8      	cbnz	r0, 800749e <_svfiprintf_r+0xd6>
 8007466:	06d9      	lsls	r1, r3, #27
 8007468:	bf44      	itt	mi
 800746a:	2220      	movmi	r2, #32
 800746c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007470:	071a      	lsls	r2, r3, #28
 8007472:	bf44      	itt	mi
 8007474:	222b      	movmi	r2, #43	; 0x2b
 8007476:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800747a:	7822      	ldrb	r2, [r4, #0]
 800747c:	2a2a      	cmp	r2, #42	; 0x2a
 800747e:	d016      	beq.n	80074ae <_svfiprintf_r+0xe6>
 8007480:	2100      	movs	r1, #0
 8007482:	200a      	movs	r0, #10
 8007484:	9a07      	ldr	r2, [sp, #28]
 8007486:	4627      	mov	r7, r4
 8007488:	783b      	ldrb	r3, [r7, #0]
 800748a:	3401      	adds	r4, #1
 800748c:	3b30      	subs	r3, #48	; 0x30
 800748e:	2b09      	cmp	r3, #9
 8007490:	d950      	bls.n	8007534 <_svfiprintf_r+0x16c>
 8007492:	b1c9      	cbz	r1, 80074c8 <_svfiprintf_r+0x100>
 8007494:	e011      	b.n	80074ba <_svfiprintf_r+0xf2>
 8007496:	2b25      	cmp	r3, #37	; 0x25
 8007498:	d0c0      	beq.n	800741c <_svfiprintf_r+0x54>
 800749a:	4627      	mov	r7, r4
 800749c:	e7b9      	b.n	8007412 <_svfiprintf_r+0x4a>
 800749e:	4a3f      	ldr	r2, [pc, #252]	; (800759c <_svfiprintf_r+0x1d4>)
 80074a0:	463c      	mov	r4, r7
 80074a2:	1a80      	subs	r0, r0, r2
 80074a4:	fa0b f000 	lsl.w	r0, fp, r0
 80074a8:	4318      	orrs	r0, r3
 80074aa:	9004      	str	r0, [sp, #16]
 80074ac:	e7d3      	b.n	8007456 <_svfiprintf_r+0x8e>
 80074ae:	9a03      	ldr	r2, [sp, #12]
 80074b0:	1d11      	adds	r1, r2, #4
 80074b2:	6812      	ldr	r2, [r2, #0]
 80074b4:	9103      	str	r1, [sp, #12]
 80074b6:	2a00      	cmp	r2, #0
 80074b8:	db01      	blt.n	80074be <_svfiprintf_r+0xf6>
 80074ba:	9207      	str	r2, [sp, #28]
 80074bc:	e004      	b.n	80074c8 <_svfiprintf_r+0x100>
 80074be:	4252      	negs	r2, r2
 80074c0:	f043 0302 	orr.w	r3, r3, #2
 80074c4:	9207      	str	r2, [sp, #28]
 80074c6:	9304      	str	r3, [sp, #16]
 80074c8:	783b      	ldrb	r3, [r7, #0]
 80074ca:	2b2e      	cmp	r3, #46	; 0x2e
 80074cc:	d10d      	bne.n	80074ea <_svfiprintf_r+0x122>
 80074ce:	787b      	ldrb	r3, [r7, #1]
 80074d0:	1c79      	adds	r1, r7, #1
 80074d2:	2b2a      	cmp	r3, #42	; 0x2a
 80074d4:	d132      	bne.n	800753c <_svfiprintf_r+0x174>
 80074d6:	9b03      	ldr	r3, [sp, #12]
 80074d8:	3702      	adds	r7, #2
 80074da:	1d1a      	adds	r2, r3, #4
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	9203      	str	r2, [sp, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	bfb8      	it	lt
 80074e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80074e8:	9305      	str	r3, [sp, #20]
 80074ea:	4c2d      	ldr	r4, [pc, #180]	; (80075a0 <_svfiprintf_r+0x1d8>)
 80074ec:	2203      	movs	r2, #3
 80074ee:	7839      	ldrb	r1, [r7, #0]
 80074f0:	4620      	mov	r0, r4
 80074f2:	f000 f9f5 	bl	80078e0 <memchr>
 80074f6:	b138      	cbz	r0, 8007508 <_svfiprintf_r+0x140>
 80074f8:	2340      	movs	r3, #64	; 0x40
 80074fa:	1b00      	subs	r0, r0, r4
 80074fc:	fa03 f000 	lsl.w	r0, r3, r0
 8007500:	9b04      	ldr	r3, [sp, #16]
 8007502:	3701      	adds	r7, #1
 8007504:	4303      	orrs	r3, r0
 8007506:	9304      	str	r3, [sp, #16]
 8007508:	7839      	ldrb	r1, [r7, #0]
 800750a:	2206      	movs	r2, #6
 800750c:	4825      	ldr	r0, [pc, #148]	; (80075a4 <_svfiprintf_r+0x1dc>)
 800750e:	1c7e      	adds	r6, r7, #1
 8007510:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007514:	f000 f9e4 	bl	80078e0 <memchr>
 8007518:	2800      	cmp	r0, #0
 800751a:	d035      	beq.n	8007588 <_svfiprintf_r+0x1c0>
 800751c:	4b22      	ldr	r3, [pc, #136]	; (80075a8 <_svfiprintf_r+0x1e0>)
 800751e:	b9fb      	cbnz	r3, 8007560 <_svfiprintf_r+0x198>
 8007520:	9b03      	ldr	r3, [sp, #12]
 8007522:	3307      	adds	r3, #7
 8007524:	f023 0307 	bic.w	r3, r3, #7
 8007528:	3308      	adds	r3, #8
 800752a:	9303      	str	r3, [sp, #12]
 800752c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800752e:	444b      	add	r3, r9
 8007530:	9309      	str	r3, [sp, #36]	; 0x24
 8007532:	e76d      	b.n	8007410 <_svfiprintf_r+0x48>
 8007534:	fb00 3202 	mla	r2, r0, r2, r3
 8007538:	2101      	movs	r1, #1
 800753a:	e7a4      	b.n	8007486 <_svfiprintf_r+0xbe>
 800753c:	2300      	movs	r3, #0
 800753e:	240a      	movs	r4, #10
 8007540:	4618      	mov	r0, r3
 8007542:	9305      	str	r3, [sp, #20]
 8007544:	460f      	mov	r7, r1
 8007546:	783a      	ldrb	r2, [r7, #0]
 8007548:	3101      	adds	r1, #1
 800754a:	3a30      	subs	r2, #48	; 0x30
 800754c:	2a09      	cmp	r2, #9
 800754e:	d903      	bls.n	8007558 <_svfiprintf_r+0x190>
 8007550:	2b00      	cmp	r3, #0
 8007552:	d0ca      	beq.n	80074ea <_svfiprintf_r+0x122>
 8007554:	9005      	str	r0, [sp, #20]
 8007556:	e7c8      	b.n	80074ea <_svfiprintf_r+0x122>
 8007558:	fb04 2000 	mla	r0, r4, r0, r2
 800755c:	2301      	movs	r3, #1
 800755e:	e7f1      	b.n	8007544 <_svfiprintf_r+0x17c>
 8007560:	ab03      	add	r3, sp, #12
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	462a      	mov	r2, r5
 8007566:	4b11      	ldr	r3, [pc, #68]	; (80075ac <_svfiprintf_r+0x1e4>)
 8007568:	a904      	add	r1, sp, #16
 800756a:	4640      	mov	r0, r8
 800756c:	f3af 8000 	nop.w
 8007570:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007574:	4681      	mov	r9, r0
 8007576:	d1d9      	bne.n	800752c <_svfiprintf_r+0x164>
 8007578:	89ab      	ldrh	r3, [r5, #12]
 800757a:	065b      	lsls	r3, r3, #25
 800757c:	f53f af39 	bmi.w	80073f2 <_svfiprintf_r+0x2a>
 8007580:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007582:	b01d      	add	sp, #116	; 0x74
 8007584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007588:	ab03      	add	r3, sp, #12
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	462a      	mov	r2, r5
 800758e:	4b07      	ldr	r3, [pc, #28]	; (80075ac <_svfiprintf_r+0x1e4>)
 8007590:	a904      	add	r1, sp, #16
 8007592:	4640      	mov	r0, r8
 8007594:	f000 f884 	bl	80076a0 <_printf_i>
 8007598:	e7ea      	b.n	8007570 <_svfiprintf_r+0x1a8>
 800759a:	bf00      	nop
 800759c:	08007bf8 	.word	0x08007bf8
 80075a0:	08007bfe 	.word	0x08007bfe
 80075a4:	08007c02 	.word	0x08007c02
 80075a8:	00000000 	.word	0x00000000
 80075ac:	08007311 	.word	0x08007311

080075b0 <_printf_common>:
 80075b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b4:	4691      	mov	r9, r2
 80075b6:	461f      	mov	r7, r3
 80075b8:	688a      	ldr	r2, [r1, #8]
 80075ba:	690b      	ldr	r3, [r1, #16]
 80075bc:	4606      	mov	r6, r0
 80075be:	4293      	cmp	r3, r2
 80075c0:	bfb8      	it	lt
 80075c2:	4613      	movlt	r3, r2
 80075c4:	f8c9 3000 	str.w	r3, [r9]
 80075c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075cc:	460c      	mov	r4, r1
 80075ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075d2:	b112      	cbz	r2, 80075da <_printf_common+0x2a>
 80075d4:	3301      	adds	r3, #1
 80075d6:	f8c9 3000 	str.w	r3, [r9]
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	0699      	lsls	r1, r3, #26
 80075de:	bf42      	ittt	mi
 80075e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80075e4:	3302      	addmi	r3, #2
 80075e6:	f8c9 3000 	strmi.w	r3, [r9]
 80075ea:	6825      	ldr	r5, [r4, #0]
 80075ec:	f015 0506 	ands.w	r5, r5, #6
 80075f0:	d107      	bne.n	8007602 <_printf_common+0x52>
 80075f2:	f104 0a19 	add.w	sl, r4, #25
 80075f6:	68e3      	ldr	r3, [r4, #12]
 80075f8:	f8d9 2000 	ldr.w	r2, [r9]
 80075fc:	1a9b      	subs	r3, r3, r2
 80075fe:	429d      	cmp	r5, r3
 8007600:	db2a      	blt.n	8007658 <_printf_common+0xa8>
 8007602:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007606:	6822      	ldr	r2, [r4, #0]
 8007608:	3300      	adds	r3, #0
 800760a:	bf18      	it	ne
 800760c:	2301      	movne	r3, #1
 800760e:	0692      	lsls	r2, r2, #26
 8007610:	d42f      	bmi.n	8007672 <_printf_common+0xc2>
 8007612:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007616:	4639      	mov	r1, r7
 8007618:	4630      	mov	r0, r6
 800761a:	47c0      	blx	r8
 800761c:	3001      	adds	r0, #1
 800761e:	d022      	beq.n	8007666 <_printf_common+0xb6>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	68e5      	ldr	r5, [r4, #12]
 8007624:	f003 0306 	and.w	r3, r3, #6
 8007628:	2b04      	cmp	r3, #4
 800762a:	bf18      	it	ne
 800762c:	2500      	movne	r5, #0
 800762e:	f8d9 2000 	ldr.w	r2, [r9]
 8007632:	f04f 0900 	mov.w	r9, #0
 8007636:	bf08      	it	eq
 8007638:	1aad      	subeq	r5, r5, r2
 800763a:	68a3      	ldr	r3, [r4, #8]
 800763c:	6922      	ldr	r2, [r4, #16]
 800763e:	bf08      	it	eq
 8007640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007644:	4293      	cmp	r3, r2
 8007646:	bfc4      	itt	gt
 8007648:	1a9b      	subgt	r3, r3, r2
 800764a:	18ed      	addgt	r5, r5, r3
 800764c:	341a      	adds	r4, #26
 800764e:	454d      	cmp	r5, r9
 8007650:	d11b      	bne.n	800768a <_printf_common+0xda>
 8007652:	2000      	movs	r0, #0
 8007654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007658:	2301      	movs	r3, #1
 800765a:	4652      	mov	r2, sl
 800765c:	4639      	mov	r1, r7
 800765e:	4630      	mov	r0, r6
 8007660:	47c0      	blx	r8
 8007662:	3001      	adds	r0, #1
 8007664:	d103      	bne.n	800766e <_printf_common+0xbe>
 8007666:	f04f 30ff 	mov.w	r0, #4294967295
 800766a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800766e:	3501      	adds	r5, #1
 8007670:	e7c1      	b.n	80075f6 <_printf_common+0x46>
 8007672:	2030      	movs	r0, #48	; 0x30
 8007674:	18e1      	adds	r1, r4, r3
 8007676:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007680:	4422      	add	r2, r4
 8007682:	3302      	adds	r3, #2
 8007684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007688:	e7c3      	b.n	8007612 <_printf_common+0x62>
 800768a:	2301      	movs	r3, #1
 800768c:	4622      	mov	r2, r4
 800768e:	4639      	mov	r1, r7
 8007690:	4630      	mov	r0, r6
 8007692:	47c0      	blx	r8
 8007694:	3001      	adds	r0, #1
 8007696:	d0e6      	beq.n	8007666 <_printf_common+0xb6>
 8007698:	f109 0901 	add.w	r9, r9, #1
 800769c:	e7d7      	b.n	800764e <_printf_common+0x9e>
	...

080076a0 <_printf_i>:
 80076a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076a4:	4617      	mov	r7, r2
 80076a6:	7e0a      	ldrb	r2, [r1, #24]
 80076a8:	b085      	sub	sp, #20
 80076aa:	2a6e      	cmp	r2, #110	; 0x6e
 80076ac:	4698      	mov	r8, r3
 80076ae:	4606      	mov	r6, r0
 80076b0:	460c      	mov	r4, r1
 80076b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076b4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80076b8:	f000 80bc 	beq.w	8007834 <_printf_i+0x194>
 80076bc:	d81a      	bhi.n	80076f4 <_printf_i+0x54>
 80076be:	2a63      	cmp	r2, #99	; 0x63
 80076c0:	d02e      	beq.n	8007720 <_printf_i+0x80>
 80076c2:	d80a      	bhi.n	80076da <_printf_i+0x3a>
 80076c4:	2a00      	cmp	r2, #0
 80076c6:	f000 80c8 	beq.w	800785a <_printf_i+0x1ba>
 80076ca:	2a58      	cmp	r2, #88	; 0x58
 80076cc:	f000 808a 	beq.w	80077e4 <_printf_i+0x144>
 80076d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076d4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80076d8:	e02a      	b.n	8007730 <_printf_i+0x90>
 80076da:	2a64      	cmp	r2, #100	; 0x64
 80076dc:	d001      	beq.n	80076e2 <_printf_i+0x42>
 80076de:	2a69      	cmp	r2, #105	; 0x69
 80076e0:	d1f6      	bne.n	80076d0 <_printf_i+0x30>
 80076e2:	6821      	ldr	r1, [r4, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80076ea:	d023      	beq.n	8007734 <_printf_i+0x94>
 80076ec:	1d11      	adds	r1, r2, #4
 80076ee:	6019      	str	r1, [r3, #0]
 80076f0:	6813      	ldr	r3, [r2, #0]
 80076f2:	e027      	b.n	8007744 <_printf_i+0xa4>
 80076f4:	2a73      	cmp	r2, #115	; 0x73
 80076f6:	f000 80b4 	beq.w	8007862 <_printf_i+0x1c2>
 80076fa:	d808      	bhi.n	800770e <_printf_i+0x6e>
 80076fc:	2a6f      	cmp	r2, #111	; 0x6f
 80076fe:	d02a      	beq.n	8007756 <_printf_i+0xb6>
 8007700:	2a70      	cmp	r2, #112	; 0x70
 8007702:	d1e5      	bne.n	80076d0 <_printf_i+0x30>
 8007704:	680a      	ldr	r2, [r1, #0]
 8007706:	f042 0220 	orr.w	r2, r2, #32
 800770a:	600a      	str	r2, [r1, #0]
 800770c:	e003      	b.n	8007716 <_printf_i+0x76>
 800770e:	2a75      	cmp	r2, #117	; 0x75
 8007710:	d021      	beq.n	8007756 <_printf_i+0xb6>
 8007712:	2a78      	cmp	r2, #120	; 0x78
 8007714:	d1dc      	bne.n	80076d0 <_printf_i+0x30>
 8007716:	2278      	movs	r2, #120	; 0x78
 8007718:	496f      	ldr	r1, [pc, #444]	; (80078d8 <_printf_i+0x238>)
 800771a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800771e:	e064      	b.n	80077ea <_printf_i+0x14a>
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8007726:	1d11      	adds	r1, r2, #4
 8007728:	6019      	str	r1, [r3, #0]
 800772a:	6813      	ldr	r3, [r2, #0]
 800772c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007730:	2301      	movs	r3, #1
 8007732:	e0a3      	b.n	800787c <_printf_i+0x1dc>
 8007734:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007738:	f102 0104 	add.w	r1, r2, #4
 800773c:	6019      	str	r1, [r3, #0]
 800773e:	d0d7      	beq.n	80076f0 <_printf_i+0x50>
 8007740:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007744:	2b00      	cmp	r3, #0
 8007746:	da03      	bge.n	8007750 <_printf_i+0xb0>
 8007748:	222d      	movs	r2, #45	; 0x2d
 800774a:	425b      	negs	r3, r3
 800774c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007750:	4962      	ldr	r1, [pc, #392]	; (80078dc <_printf_i+0x23c>)
 8007752:	220a      	movs	r2, #10
 8007754:	e017      	b.n	8007786 <_printf_i+0xe6>
 8007756:	6820      	ldr	r0, [r4, #0]
 8007758:	6819      	ldr	r1, [r3, #0]
 800775a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800775e:	d003      	beq.n	8007768 <_printf_i+0xc8>
 8007760:	1d08      	adds	r0, r1, #4
 8007762:	6018      	str	r0, [r3, #0]
 8007764:	680b      	ldr	r3, [r1, #0]
 8007766:	e006      	b.n	8007776 <_printf_i+0xd6>
 8007768:	f010 0f40 	tst.w	r0, #64	; 0x40
 800776c:	f101 0004 	add.w	r0, r1, #4
 8007770:	6018      	str	r0, [r3, #0]
 8007772:	d0f7      	beq.n	8007764 <_printf_i+0xc4>
 8007774:	880b      	ldrh	r3, [r1, #0]
 8007776:	2a6f      	cmp	r2, #111	; 0x6f
 8007778:	bf14      	ite	ne
 800777a:	220a      	movne	r2, #10
 800777c:	2208      	moveq	r2, #8
 800777e:	4957      	ldr	r1, [pc, #348]	; (80078dc <_printf_i+0x23c>)
 8007780:	2000      	movs	r0, #0
 8007782:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8007786:	6865      	ldr	r5, [r4, #4]
 8007788:	2d00      	cmp	r5, #0
 800778a:	60a5      	str	r5, [r4, #8]
 800778c:	f2c0 809c 	blt.w	80078c8 <_printf_i+0x228>
 8007790:	6820      	ldr	r0, [r4, #0]
 8007792:	f020 0004 	bic.w	r0, r0, #4
 8007796:	6020      	str	r0, [r4, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d13f      	bne.n	800781c <_printf_i+0x17c>
 800779c:	2d00      	cmp	r5, #0
 800779e:	f040 8095 	bne.w	80078cc <_printf_i+0x22c>
 80077a2:	4675      	mov	r5, lr
 80077a4:	2a08      	cmp	r2, #8
 80077a6:	d10b      	bne.n	80077c0 <_printf_i+0x120>
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	07da      	lsls	r2, r3, #31
 80077ac:	d508      	bpl.n	80077c0 <_printf_i+0x120>
 80077ae:	6923      	ldr	r3, [r4, #16]
 80077b0:	6862      	ldr	r2, [r4, #4]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	bfde      	ittt	le
 80077b6:	2330      	movle	r3, #48	; 0x30
 80077b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80077c0:	ebae 0305 	sub.w	r3, lr, r5
 80077c4:	6123      	str	r3, [r4, #16]
 80077c6:	f8cd 8000 	str.w	r8, [sp]
 80077ca:	463b      	mov	r3, r7
 80077cc:	aa03      	add	r2, sp, #12
 80077ce:	4621      	mov	r1, r4
 80077d0:	4630      	mov	r0, r6
 80077d2:	f7ff feed 	bl	80075b0 <_printf_common>
 80077d6:	3001      	adds	r0, #1
 80077d8:	d155      	bne.n	8007886 <_printf_i+0x1e6>
 80077da:	f04f 30ff 	mov.w	r0, #4294967295
 80077de:	b005      	add	sp, #20
 80077e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077e4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80077e8:	493c      	ldr	r1, [pc, #240]	; (80078dc <_printf_i+0x23c>)
 80077ea:	6822      	ldr	r2, [r4, #0]
 80077ec:	6818      	ldr	r0, [r3, #0]
 80077ee:	f012 0f80 	tst.w	r2, #128	; 0x80
 80077f2:	f100 0504 	add.w	r5, r0, #4
 80077f6:	601d      	str	r5, [r3, #0]
 80077f8:	d001      	beq.n	80077fe <_printf_i+0x15e>
 80077fa:	6803      	ldr	r3, [r0, #0]
 80077fc:	e002      	b.n	8007804 <_printf_i+0x164>
 80077fe:	0655      	lsls	r5, r2, #25
 8007800:	d5fb      	bpl.n	80077fa <_printf_i+0x15a>
 8007802:	8803      	ldrh	r3, [r0, #0]
 8007804:	07d0      	lsls	r0, r2, #31
 8007806:	bf44      	itt	mi
 8007808:	f042 0220 	orrmi.w	r2, r2, #32
 800780c:	6022      	strmi	r2, [r4, #0]
 800780e:	b91b      	cbnz	r3, 8007818 <_printf_i+0x178>
 8007810:	6822      	ldr	r2, [r4, #0]
 8007812:	f022 0220 	bic.w	r2, r2, #32
 8007816:	6022      	str	r2, [r4, #0]
 8007818:	2210      	movs	r2, #16
 800781a:	e7b1      	b.n	8007780 <_printf_i+0xe0>
 800781c:	4675      	mov	r5, lr
 800781e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007822:	fb02 3310 	mls	r3, r2, r0, r3
 8007826:	5ccb      	ldrb	r3, [r1, r3]
 8007828:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800782c:	4603      	mov	r3, r0
 800782e:	2800      	cmp	r0, #0
 8007830:	d1f5      	bne.n	800781e <_printf_i+0x17e>
 8007832:	e7b7      	b.n	80077a4 <_printf_i+0x104>
 8007834:	6808      	ldr	r0, [r1, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	f010 0f80 	tst.w	r0, #128	; 0x80
 800783c:	6949      	ldr	r1, [r1, #20]
 800783e:	d004      	beq.n	800784a <_printf_i+0x1aa>
 8007840:	1d10      	adds	r0, r2, #4
 8007842:	6018      	str	r0, [r3, #0]
 8007844:	6813      	ldr	r3, [r2, #0]
 8007846:	6019      	str	r1, [r3, #0]
 8007848:	e007      	b.n	800785a <_printf_i+0x1ba>
 800784a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800784e:	f102 0004 	add.w	r0, r2, #4
 8007852:	6018      	str	r0, [r3, #0]
 8007854:	6813      	ldr	r3, [r2, #0]
 8007856:	d0f6      	beq.n	8007846 <_printf_i+0x1a6>
 8007858:	8019      	strh	r1, [r3, #0]
 800785a:	2300      	movs	r3, #0
 800785c:	4675      	mov	r5, lr
 800785e:	6123      	str	r3, [r4, #16]
 8007860:	e7b1      	b.n	80077c6 <_printf_i+0x126>
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	1d11      	adds	r1, r2, #4
 8007866:	6019      	str	r1, [r3, #0]
 8007868:	6815      	ldr	r5, [r2, #0]
 800786a:	2100      	movs	r1, #0
 800786c:	6862      	ldr	r2, [r4, #4]
 800786e:	4628      	mov	r0, r5
 8007870:	f000 f836 	bl	80078e0 <memchr>
 8007874:	b108      	cbz	r0, 800787a <_printf_i+0x1da>
 8007876:	1b40      	subs	r0, r0, r5
 8007878:	6060      	str	r0, [r4, #4]
 800787a:	6863      	ldr	r3, [r4, #4]
 800787c:	6123      	str	r3, [r4, #16]
 800787e:	2300      	movs	r3, #0
 8007880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007884:	e79f      	b.n	80077c6 <_printf_i+0x126>
 8007886:	6923      	ldr	r3, [r4, #16]
 8007888:	462a      	mov	r2, r5
 800788a:	4639      	mov	r1, r7
 800788c:	4630      	mov	r0, r6
 800788e:	47c0      	blx	r8
 8007890:	3001      	adds	r0, #1
 8007892:	d0a2      	beq.n	80077da <_printf_i+0x13a>
 8007894:	6823      	ldr	r3, [r4, #0]
 8007896:	079b      	lsls	r3, r3, #30
 8007898:	d507      	bpl.n	80078aa <_printf_i+0x20a>
 800789a:	2500      	movs	r5, #0
 800789c:	f104 0919 	add.w	r9, r4, #25
 80078a0:	68e3      	ldr	r3, [r4, #12]
 80078a2:	9a03      	ldr	r2, [sp, #12]
 80078a4:	1a9b      	subs	r3, r3, r2
 80078a6:	429d      	cmp	r5, r3
 80078a8:	db05      	blt.n	80078b6 <_printf_i+0x216>
 80078aa:	68e0      	ldr	r0, [r4, #12]
 80078ac:	9b03      	ldr	r3, [sp, #12]
 80078ae:	4298      	cmp	r0, r3
 80078b0:	bfb8      	it	lt
 80078b2:	4618      	movlt	r0, r3
 80078b4:	e793      	b.n	80077de <_printf_i+0x13e>
 80078b6:	2301      	movs	r3, #1
 80078b8:	464a      	mov	r2, r9
 80078ba:	4639      	mov	r1, r7
 80078bc:	4630      	mov	r0, r6
 80078be:	47c0      	blx	r8
 80078c0:	3001      	adds	r0, #1
 80078c2:	d08a      	beq.n	80077da <_printf_i+0x13a>
 80078c4:	3501      	adds	r5, #1
 80078c6:	e7eb      	b.n	80078a0 <_printf_i+0x200>
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1a7      	bne.n	800781c <_printf_i+0x17c>
 80078cc:	780b      	ldrb	r3, [r1, #0]
 80078ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078d6:	e765      	b.n	80077a4 <_printf_i+0x104>
 80078d8:	08007c1a 	.word	0x08007c1a
 80078dc:	08007c09 	.word	0x08007c09

080078e0 <memchr>:
 80078e0:	b510      	push	{r4, lr}
 80078e2:	b2c9      	uxtb	r1, r1
 80078e4:	4402      	add	r2, r0
 80078e6:	4290      	cmp	r0, r2
 80078e8:	4603      	mov	r3, r0
 80078ea:	d101      	bne.n	80078f0 <memchr+0x10>
 80078ec:	2000      	movs	r0, #0
 80078ee:	bd10      	pop	{r4, pc}
 80078f0:	781c      	ldrb	r4, [r3, #0]
 80078f2:	3001      	adds	r0, #1
 80078f4:	428c      	cmp	r4, r1
 80078f6:	d1f6      	bne.n	80078e6 <memchr+0x6>
 80078f8:	4618      	mov	r0, r3
 80078fa:	bd10      	pop	{r4, pc}

080078fc <memcpy>:
 80078fc:	b510      	push	{r4, lr}
 80078fe:	1e43      	subs	r3, r0, #1
 8007900:	440a      	add	r2, r1
 8007902:	4291      	cmp	r1, r2
 8007904:	d100      	bne.n	8007908 <memcpy+0xc>
 8007906:	bd10      	pop	{r4, pc}
 8007908:	f811 4b01 	ldrb.w	r4, [r1], #1
 800790c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007910:	e7f7      	b.n	8007902 <memcpy+0x6>

08007912 <memmove>:
 8007912:	4288      	cmp	r0, r1
 8007914:	b510      	push	{r4, lr}
 8007916:	eb01 0302 	add.w	r3, r1, r2
 800791a:	d803      	bhi.n	8007924 <memmove+0x12>
 800791c:	1e42      	subs	r2, r0, #1
 800791e:	4299      	cmp	r1, r3
 8007920:	d10c      	bne.n	800793c <memmove+0x2a>
 8007922:	bd10      	pop	{r4, pc}
 8007924:	4298      	cmp	r0, r3
 8007926:	d2f9      	bcs.n	800791c <memmove+0xa>
 8007928:	1881      	adds	r1, r0, r2
 800792a:	1ad2      	subs	r2, r2, r3
 800792c:	42d3      	cmn	r3, r2
 800792e:	d100      	bne.n	8007932 <memmove+0x20>
 8007930:	bd10      	pop	{r4, pc}
 8007932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007936:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800793a:	e7f7      	b.n	800792c <memmove+0x1a>
 800793c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007940:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007944:	e7eb      	b.n	800791e <memmove+0xc>
	...

08007948 <_free_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4605      	mov	r5, r0
 800794c:	2900      	cmp	r1, #0
 800794e:	d043      	beq.n	80079d8 <_free_r+0x90>
 8007950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007954:	1f0c      	subs	r4, r1, #4
 8007956:	2b00      	cmp	r3, #0
 8007958:	bfb8      	it	lt
 800795a:	18e4      	addlt	r4, r4, r3
 800795c:	f000 f8d4 	bl	8007b08 <__malloc_lock>
 8007960:	4a1e      	ldr	r2, [pc, #120]	; (80079dc <_free_r+0x94>)
 8007962:	6813      	ldr	r3, [r2, #0]
 8007964:	4610      	mov	r0, r2
 8007966:	b933      	cbnz	r3, 8007976 <_free_r+0x2e>
 8007968:	6063      	str	r3, [r4, #4]
 800796a:	6014      	str	r4, [r2, #0]
 800796c:	4628      	mov	r0, r5
 800796e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007972:	f000 b8ca 	b.w	8007b0a <__malloc_unlock>
 8007976:	42a3      	cmp	r3, r4
 8007978:	d90b      	bls.n	8007992 <_free_r+0x4a>
 800797a:	6821      	ldr	r1, [r4, #0]
 800797c:	1862      	adds	r2, r4, r1
 800797e:	4293      	cmp	r3, r2
 8007980:	bf01      	itttt	eq
 8007982:	681a      	ldreq	r2, [r3, #0]
 8007984:	685b      	ldreq	r3, [r3, #4]
 8007986:	1852      	addeq	r2, r2, r1
 8007988:	6022      	streq	r2, [r4, #0]
 800798a:	6063      	str	r3, [r4, #4]
 800798c:	6004      	str	r4, [r0, #0]
 800798e:	e7ed      	b.n	800796c <_free_r+0x24>
 8007990:	4613      	mov	r3, r2
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	b10a      	cbz	r2, 800799a <_free_r+0x52>
 8007996:	42a2      	cmp	r2, r4
 8007998:	d9fa      	bls.n	8007990 <_free_r+0x48>
 800799a:	6819      	ldr	r1, [r3, #0]
 800799c:	1858      	adds	r0, r3, r1
 800799e:	42a0      	cmp	r0, r4
 80079a0:	d10b      	bne.n	80079ba <_free_r+0x72>
 80079a2:	6820      	ldr	r0, [r4, #0]
 80079a4:	4401      	add	r1, r0
 80079a6:	1858      	adds	r0, r3, r1
 80079a8:	4282      	cmp	r2, r0
 80079aa:	6019      	str	r1, [r3, #0]
 80079ac:	d1de      	bne.n	800796c <_free_r+0x24>
 80079ae:	6810      	ldr	r0, [r2, #0]
 80079b0:	6852      	ldr	r2, [r2, #4]
 80079b2:	4401      	add	r1, r0
 80079b4:	6019      	str	r1, [r3, #0]
 80079b6:	605a      	str	r2, [r3, #4]
 80079b8:	e7d8      	b.n	800796c <_free_r+0x24>
 80079ba:	d902      	bls.n	80079c2 <_free_r+0x7a>
 80079bc:	230c      	movs	r3, #12
 80079be:	602b      	str	r3, [r5, #0]
 80079c0:	e7d4      	b.n	800796c <_free_r+0x24>
 80079c2:	6820      	ldr	r0, [r4, #0]
 80079c4:	1821      	adds	r1, r4, r0
 80079c6:	428a      	cmp	r2, r1
 80079c8:	bf01      	itttt	eq
 80079ca:	6811      	ldreq	r1, [r2, #0]
 80079cc:	6852      	ldreq	r2, [r2, #4]
 80079ce:	1809      	addeq	r1, r1, r0
 80079d0:	6021      	streq	r1, [r4, #0]
 80079d2:	6062      	str	r2, [r4, #4]
 80079d4:	605c      	str	r4, [r3, #4]
 80079d6:	e7c9      	b.n	800796c <_free_r+0x24>
 80079d8:	bd38      	pop	{r3, r4, r5, pc}
 80079da:	bf00      	nop
 80079dc:	20000494 	.word	0x20000494

080079e0 <_malloc_r>:
 80079e0:	b570      	push	{r4, r5, r6, lr}
 80079e2:	1ccd      	adds	r5, r1, #3
 80079e4:	f025 0503 	bic.w	r5, r5, #3
 80079e8:	3508      	adds	r5, #8
 80079ea:	2d0c      	cmp	r5, #12
 80079ec:	bf38      	it	cc
 80079ee:	250c      	movcc	r5, #12
 80079f0:	2d00      	cmp	r5, #0
 80079f2:	4606      	mov	r6, r0
 80079f4:	db01      	blt.n	80079fa <_malloc_r+0x1a>
 80079f6:	42a9      	cmp	r1, r5
 80079f8:	d903      	bls.n	8007a02 <_malloc_r+0x22>
 80079fa:	230c      	movs	r3, #12
 80079fc:	6033      	str	r3, [r6, #0]
 80079fe:	2000      	movs	r0, #0
 8007a00:	bd70      	pop	{r4, r5, r6, pc}
 8007a02:	f000 f881 	bl	8007b08 <__malloc_lock>
 8007a06:	4a23      	ldr	r2, [pc, #140]	; (8007a94 <_malloc_r+0xb4>)
 8007a08:	6814      	ldr	r4, [r2, #0]
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	b991      	cbnz	r1, 8007a34 <_malloc_r+0x54>
 8007a0e:	4c22      	ldr	r4, [pc, #136]	; (8007a98 <_malloc_r+0xb8>)
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	b91b      	cbnz	r3, 8007a1c <_malloc_r+0x3c>
 8007a14:	4630      	mov	r0, r6
 8007a16:	f000 f867 	bl	8007ae8 <_sbrk_r>
 8007a1a:	6020      	str	r0, [r4, #0]
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f000 f862 	bl	8007ae8 <_sbrk_r>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d126      	bne.n	8007a76 <_malloc_r+0x96>
 8007a28:	230c      	movs	r3, #12
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	6033      	str	r3, [r6, #0]
 8007a2e:	f000 f86c 	bl	8007b0a <__malloc_unlock>
 8007a32:	e7e4      	b.n	80079fe <_malloc_r+0x1e>
 8007a34:	680b      	ldr	r3, [r1, #0]
 8007a36:	1b5b      	subs	r3, r3, r5
 8007a38:	d41a      	bmi.n	8007a70 <_malloc_r+0x90>
 8007a3a:	2b0b      	cmp	r3, #11
 8007a3c:	d90f      	bls.n	8007a5e <_malloc_r+0x7e>
 8007a3e:	600b      	str	r3, [r1, #0]
 8007a40:	18cc      	adds	r4, r1, r3
 8007a42:	50cd      	str	r5, [r1, r3]
 8007a44:	4630      	mov	r0, r6
 8007a46:	f000 f860 	bl	8007b0a <__malloc_unlock>
 8007a4a:	f104 000b 	add.w	r0, r4, #11
 8007a4e:	1d23      	adds	r3, r4, #4
 8007a50:	f020 0007 	bic.w	r0, r0, #7
 8007a54:	1ac3      	subs	r3, r0, r3
 8007a56:	d01b      	beq.n	8007a90 <_malloc_r+0xb0>
 8007a58:	425a      	negs	r2, r3
 8007a5a:	50e2      	str	r2, [r4, r3]
 8007a5c:	bd70      	pop	{r4, r5, r6, pc}
 8007a5e:	428c      	cmp	r4, r1
 8007a60:	bf0b      	itete	eq
 8007a62:	6863      	ldreq	r3, [r4, #4]
 8007a64:	684b      	ldrne	r3, [r1, #4]
 8007a66:	6013      	streq	r3, [r2, #0]
 8007a68:	6063      	strne	r3, [r4, #4]
 8007a6a:	bf18      	it	ne
 8007a6c:	460c      	movne	r4, r1
 8007a6e:	e7e9      	b.n	8007a44 <_malloc_r+0x64>
 8007a70:	460c      	mov	r4, r1
 8007a72:	6849      	ldr	r1, [r1, #4]
 8007a74:	e7ca      	b.n	8007a0c <_malloc_r+0x2c>
 8007a76:	1cc4      	adds	r4, r0, #3
 8007a78:	f024 0403 	bic.w	r4, r4, #3
 8007a7c:	42a0      	cmp	r0, r4
 8007a7e:	d005      	beq.n	8007a8c <_malloc_r+0xac>
 8007a80:	1a21      	subs	r1, r4, r0
 8007a82:	4630      	mov	r0, r6
 8007a84:	f000 f830 	bl	8007ae8 <_sbrk_r>
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d0cd      	beq.n	8007a28 <_malloc_r+0x48>
 8007a8c:	6025      	str	r5, [r4, #0]
 8007a8e:	e7d9      	b.n	8007a44 <_malloc_r+0x64>
 8007a90:	bd70      	pop	{r4, r5, r6, pc}
 8007a92:	bf00      	nop
 8007a94:	20000494 	.word	0x20000494
 8007a98:	20000498 	.word	0x20000498

08007a9c <_realloc_r>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	4607      	mov	r7, r0
 8007aa0:	4614      	mov	r4, r2
 8007aa2:	460e      	mov	r6, r1
 8007aa4:	b921      	cbnz	r1, 8007ab0 <_realloc_r+0x14>
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007aac:	f7ff bf98 	b.w	80079e0 <_malloc_r>
 8007ab0:	b922      	cbnz	r2, 8007abc <_realloc_r+0x20>
 8007ab2:	f7ff ff49 	bl	8007948 <_free_r>
 8007ab6:	4625      	mov	r5, r4
 8007ab8:	4628      	mov	r0, r5
 8007aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007abc:	f000 f826 	bl	8007b0c <_malloc_usable_size_r>
 8007ac0:	4284      	cmp	r4, r0
 8007ac2:	d90f      	bls.n	8007ae4 <_realloc_r+0x48>
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4638      	mov	r0, r7
 8007ac8:	f7ff ff8a 	bl	80079e0 <_malloc_r>
 8007acc:	4605      	mov	r5, r0
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d0f2      	beq.n	8007ab8 <_realloc_r+0x1c>
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4622      	mov	r2, r4
 8007ad6:	f7ff ff11 	bl	80078fc <memcpy>
 8007ada:	4631      	mov	r1, r6
 8007adc:	4638      	mov	r0, r7
 8007ade:	f7ff ff33 	bl	8007948 <_free_r>
 8007ae2:	e7e9      	b.n	8007ab8 <_realloc_r+0x1c>
 8007ae4:	4635      	mov	r5, r6
 8007ae6:	e7e7      	b.n	8007ab8 <_realloc_r+0x1c>

08007ae8 <_sbrk_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	2300      	movs	r3, #0
 8007aec:	4c05      	ldr	r4, [pc, #20]	; (8007b04 <_sbrk_r+0x1c>)
 8007aee:	4605      	mov	r5, r0
 8007af0:	4608      	mov	r0, r1
 8007af2:	6023      	str	r3, [r4, #0]
 8007af4:	f000 f814 	bl	8007b20 <_sbrk>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_sbrk_r+0x1a>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_sbrk_r+0x1a>
 8007b00:	602b      	str	r3, [r5, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	20001d04 	.word	0x20001d04

08007b08 <__malloc_lock>:
 8007b08:	4770      	bx	lr

08007b0a <__malloc_unlock>:
 8007b0a:	4770      	bx	lr

08007b0c <_malloc_usable_size_r>:
 8007b0c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007b10:	2800      	cmp	r0, #0
 8007b12:	f1a0 0004 	sub.w	r0, r0, #4
 8007b16:	bfbc      	itt	lt
 8007b18:	580b      	ldrlt	r3, [r1, r0]
 8007b1a:	18c0      	addlt	r0, r0, r3
 8007b1c:	4770      	bx	lr
	...

08007b20 <_sbrk>:
 8007b20:	4b04      	ldr	r3, [pc, #16]	; (8007b34 <_sbrk+0x14>)
 8007b22:	4602      	mov	r2, r0
 8007b24:	6819      	ldr	r1, [r3, #0]
 8007b26:	b909      	cbnz	r1, 8007b2c <_sbrk+0xc>
 8007b28:	4903      	ldr	r1, [pc, #12]	; (8007b38 <_sbrk+0x18>)
 8007b2a:	6019      	str	r1, [r3, #0]
 8007b2c:	6818      	ldr	r0, [r3, #0]
 8007b2e:	4402      	add	r2, r0
 8007b30:	601a      	str	r2, [r3, #0]
 8007b32:	4770      	bx	lr
 8007b34:	2000049c 	.word	0x2000049c
 8007b38:	20001d08 	.word	0x20001d08

08007b3c <_init>:
 8007b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3e:	bf00      	nop
 8007b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b42:	bc08      	pop	{r3}
 8007b44:	469e      	mov	lr, r3
 8007b46:	4770      	bx	lr

08007b48 <_fini>:
 8007b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4a:	bf00      	nop
 8007b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4e:	bc08      	pop	{r3}
 8007b50:	469e      	mov	lr, r3
 8007b52:	4770      	bx	lr
